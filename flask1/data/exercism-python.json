{
  "basic": {
    "repo_name": "exercism/python",
    "license": "MIT License",
    "language": "Python"
  },
  "contributors": {
    "num_of_contributors": "337",
    "contributors": [
      {
        "contributor_name": "BethanyG",
        "historical_contributions": 862
      },
      {
        "contributor_name": "cmccandless",
        "historical_contributions": 334
      },
      {
        "contributor_name": "behrtam",
        "historical_contributions": 183
      },
      {
        "contributor_name": "ikhadykin",
        "historical_contributions": 129
      },
      {
        "contributor_name": "kytrinyx",
        "historical_contributions": 114
      },
      {
        "contributor_name": "sjakobi",
        "historical_contributions": 112
      },
      {
        "contributor_name": "Dog",
        "historical_contributions": 86
      },
      {
        "contributor_name": "ErikSchierboom",
        "historical_contributions": 77
      },
      {
        "contributor_name": "PaulT89",
        "historical_contributions": 48
      },
      {
        "contributor_name": "yawpitch",
        "historical_contributions": 44
      },
      {
        "contributor_name": "J08K",
        "historical_contributions": 31
      },
      {
        "contributor_name": "N-Parsons",
        "historical_contributions": 24
      },
      {
        "contributor_name": "thomasjpfan",
        "historical_contributions": 22
      },
      {
        "contributor_name": "Metallifax",
        "historical_contributions": 21
      },
      {
        "contributor_name": "pranasziaukas",
        "historical_contributions": 21
      },
      {
        "contributor_name": "betegelse",
        "historical_contributions": 19
      },
      {
        "contributor_name": "dvermd",
        "historical_contributions": 19
      },
      {
        "contributor_name": "AnAccountForReportingBugs",
        "historical_contributions": 18
      },
      {
        "contributor_name": "valentin-p",
        "historical_contributions": 18
      },
      {
        "contributor_name": "Grociu",
        "historical_contributions": 17
      },
      {
        "contributor_name": "rootulp",
        "historical_contributions": 16
      },
      {
        "contributor_name": "crsmi",
        "historical_contributions": 14
      },
      {
        "contributor_name": "dependabot[bot]",
        "historical_contributions": 14
      },
      {
        "contributor_name": "Chris-May",
        "historical_contributions": 13
      },
      {
        "contributor_name": "tqa236",
        "historical_contributions": 13
      },
      {
        "contributor_name": "gurupratap-matharu",
        "historical_contributions": 11
      },
      {
        "contributor_name": "robphoenix",
        "historical_contributions": 11
      },
      {
        "contributor_name": "kbuc",
        "historical_contributions": 11
      },
      {
        "contributor_name": "exercism-bot",
        "historical_contributions": 10
      },
      {
        "contributor_name": "Peque",
        "historical_contributions": 10
      }
    ]
  },
  "vitality": {
    "num_of_star": 1200,
    "num_of_fork": 893,
    "num_of_watch": 119
  },
  "dependency": {
    "num_of_dependency": 30,
    "info_of_dependency": [
      {
        "dependency_name": "/pallets/jinja",
        "dependency_token": "Jinja2",
        "dependency_version": "2.10.1"
      },
      {
        "dependency_name": "/psf/black",
        "dependency_token": "",
        "dependency_version": "22.3.0"
      },
      {
        "dependency_name": "/PyCQA/flake8",
        "dependency_token": "",
        "dependency_version": "3.7.8"
      },
      {
        "dependency_name": "/pallets/markupsafe",
        "dependency_token": "",
        "dependency_version": "2.0.1"
      },
      {
        "dependency_name": "/dateutil/dateutil",
        "dependency_token": "python-dateutil",
        "dependency_version": "2.8.1"
      },
      {
        "dependency_name": "The file has no dependencies or is too large to display",
        "dependency_token": "null",
        "dependency_version": "null"
      },
      {
        "dependency_name": "/PyCQA/astroid",
        "dependency_token": "",
        "dependency_version": ">= 2.6.5"
      },
      {
        "dependency_name": "/PyCQA/flake8",
        "dependency_token": "",
        "dependency_version": "4.0.1"
      },
      {
        "dependency_name": "/s0undt3ch/pylint",
        "dependency_token": "",
        "dependency_version": ">= 2.9.2"
      },
      {
        "dependency_name": "The file has no dependencies or is too large to display",
        "dependency_token": "null",
        "dependency_version": "null"
      },
      {
        "dependency_name": "/google/yapf",
        "dependency_token": "",
        "dependency_version": ">= 0.31.0"
      },
      {
        "dependency_name": "/actions/checkout",
        "dependency_token": "actions/checkout",
        "dependency_version": "3"
      },
      {
        "dependency_name": "/actions/setup-python",
        "dependency_token": "actions/setup-python",
        "dependency_version": "3"
      },
      {
        "dependency_name": "/exercism/github-actions",
        "dependency_token": "exercism/github-actions/.github/workflows/configlet.yml",
        "dependency_version": "main"
      },
      {
        "dependency_name": "/actions/checkout",
        "dependency_token": "actions/checkout",
        "dependency_version": "3"
      },
      {
        "dependency_name": "/jd-0001/gh-action-comment-on-new-issue",
        "dependency_token": "jd-0001/gh-action-comment-on-new-issue",
        "dependency_version": "2.0.3"
      },
      {
        "dependency_name": "/juliangruber/read-file-action",
        "dependency_token": "juliangruber/read-file-action",
        "dependency_version": "1"
      },
      {
        "dependency_name": "/exercism/pr-commenter-action",
        "dependency_token": "exercism/pr-commenter-action",
        "dependency_version": "1.3.0"
      },
      {
        "dependency_name": "/actions/stale",
        "dependency_token": "actions/stale",
        "dependency_version": "5"
      },
      {
        "dependency_name": "/exercism/github-actions",
        "dependency_token": "exercism/github-actions/.github/workflows/labels.yml",
        "dependency_version": "main"
      },
      {
        "dependency_name": "/actions/checkout",
        "dependency_token": "actions/checkout",
        "dependency_version": "3"
      },
      {
        "dependency_name": "/actions/checkout",
        "dependency_token": "actions/checkout",
        "dependency_version": "2.4.0"
      },
      {
        "dependency_name": "/actions/setup-python",
        "dependency_token": "actions/setup-python",
        "dependency_version": "2.3.2"
      },
      {
        "dependency_name": "/actions/checkout",
        "dependency_token": "actions/checkout",
        "dependency_version": "2.4.0"
      },
      {
        "dependency_name": "/jd-0001/gh-action-comment-on-new-issue",
        "dependency_token": "jd-0001/gh-action-comment-on-new-issue",
        "dependency_version": "2.0.3"
      },
      {
        "dependency_name": "/juliangruber/read-file-action",
        "dependency_token": "juliangruber/read-file-action",
        "dependency_version": "1"
      },
      {
        "dependency_name": "/exercism/pr-commenter-action",
        "dependency_token": "exercism/pr-commenter-action",
        "dependency_version": "1.3.0"
      },
      {
        "dependency_name": "/actions/checkout",
        "dependency_token": "actions/checkout",
        "dependency_version": "2.4.0"
      },
      {
        "dependency_name": "/micnncim/action-label-syncer",
        "dependency_token": "micnncim/action-label-syncer",
        "dependency_version": "3abd5ab72fda571e69fffd97bd4e0033dd5f495c"
      },
      {
        "dependency_name": "/actions/checkout",
        "dependency_token": "actions/checkout",
        "dependency_version": "2.4.0"
      }
    ]
  },
  "issue": {
    "num_of_issue": "62",
    "issues": [
      {
        "issue_serial": "/exercism/python/issues/3009",
        "issue_name": "[Single Linked List] Head concept doesn't seem to match descriptions",
        "issue_label": "",
        "issue_content": "\n          Reading the descriptions for Linked Lists in general, and even in the cited documentation for the exercise give us the idea of a list that would work as [1,2,3] where 1 would be the head node and 3 would be the tail node, hence follow LIFO. However, all the tests seem to expect that the HEAD would be 3, and, for instance, any new node pushed into the list would be the new head.\nGiven that even the exercise itself links to documentation which contradicts the expected results, either the explanation is not clear enough (or I'm not very good at understanding it) or the tests should be somewhat changed. I've confirmed that with a mentor as well.\n      ",
        "issue_comment": "Reading the descriptions for Linked Lists in general, and even in the cited documentation for the exercise give us the idea of a list that would work as [1,2,3] where 1 would be the head node and 3 would be the tail node, hence follow LIFO. However, all the tests seem to expect that the HEAD would be 3, and, for instance, any new node pushed into the list would be the new head. \\nGiven that even the exercise itself links to documentation which contradicts the expected results, either the explanation is not clear enough (or I'm not very good at understanding it) or the tests should be somewhat changed. I've confirmed that with a mentor as well.  \\xa0  Hi! üëãüèΩ    Welcome to the Exercism Python Repo! Thank you for opening an issue!   \\xa0    \\n \\n \\n \\u200b\\t\\t\\xa0 \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 ‚ó¶\\xa0 \\n\\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 \\n \\n \\n         \\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Run checks on the whole repo & submit a bunch of PRs. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 This creates longer review cycles & exhausts reviewers energy & time. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 It may also conflict with ongoing changes from other contributors. \\n\\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Insert only blank lines, make a closing bracket drop to the next line, change a word \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0to a synonym without obvious reason, or add trailing space that's not an  for the very end of text files. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Introduce arbitrary changes \"just to change things\" . \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0  \\n \\n \\n \\n  \\xa0  \\xa0  If you decide to help out with other  , you have our     üôåüèΩ. \\nAnything tagged with   and without   is up for grabs. \\nComment on the issue and we will reserve it for you.      Hi   üëãüèΩ Thanks for filing this issue.  I don't have time at the moment, but will investigate when I do.  Meanwhile, could you give me a little more detail?  Which tests seem off to you, against which code?  What would be your proposed changes? For instance, this test: \\n \\nclearly expects that THE LAST element of the list is the head. In my mind, the test should read: \\n . \\nThis test exemplifies this even better: \\n \\nIt specifically expects that the head of the LL should change with a push, which doesn't seem to match the concept that I've read about. So I'd say this merely should be talking about the tail of the list, right? \\nHowever, this would generate an inconsistency here: \\n \\nSince it seems to expect that a linked list built of range(10) should in fact be 10-> 9 -> ... -> 1"
      },
      {
        "issue_serial": "/exercism/python/issues/3008",
        "issue_name": "[Clock] Improved/additional tests for __add__ and __sub__",
        "issue_label": "",
        "issue_content": "\n          Motivation: I've seem multiple solutions where Clock.__add__ either (1) returns a str or (2) modifies and returns self. Ideally a = b + c should not mutate b or c and Clock + int should return a Clock.\nProposal: Add a test or two where,\nnow = Clock(0, 0)\nfuture = now + 5\ntest.assertNotEqual(now, future)\ntest.assertEqual(future, Clock(0, 5))\n\nPossibly replicate for __sub__ as well.\nI'd be happy to work on this myself.\n      ",
        "issue_comment": "Motivation: I've seem multiple solutions where   either (1) returns a   or (2) modifies and returns  . Ideally   should not mutate   or   and   should return a  . Proposal: Add a test or two where, Possibly replicate for   as well. I'd be happy to work on this myself. Hi   üëãüèΩ Thanks for filing this issue.  Since the   exercise pulls from  , and already has   and three additional test cases for   tacked on, I am loath to   any more to it by extending  .  There are about 50 more tests than there need to be for this exercise already. The   were intended to only support adding a   method that was unique to Python.  I think what you are proposing here is more   the way the already existing   and   test cases are  . To that end, the  ,  , and   would need to be altered.  You might also have to change the  . But I question if we really want to change the cases.  The cannoncial data clearly shows that the result of   and   are  .  Additionally, there are 2000+ published community solutions that could be invalidated.  Since the main point of this exercise was to get students familiar with further customizing classes with things like dunder methods, it feels like a high price to pay to make a few points about mutability. Rather than going back over this exercise again, I'd rather develop one that would set up and get at the pitfalls of mutability. Overloading this one doesn't feel like a good strategy. In the past,   was a   based exercise, and has  a clear setup around mutability, so that might be a good candidate to turn back into something OOP.  We do have an   already.  And yes - it also has thousands of community solutions.  I feel a little less guilty about changing that one, since we radically changed it already, and it is a fairly toothless exercise as it stands. In fact, either altering High Scores or making an additional OOP version that gets at mutability issues  would be a very welcome addition, should you want to take that on.  We don't have a lot of practice exercises that really dig into   you would set up a class in a specific way, or when (or when not to) mutate attributes/return altered objects/return new objects. Another exercise that could be \"riffed on\" or extended is  .  The current exercise doesn't get at   or   the   with new information.  But we could either do an addendum or a follow-on exercise that requires that, which could set up the problem of mutating or returning a new object."
      },
      {
        "issue_serial": "/exercism/python/issues/3005",
        "issue_name": "[Meetup] Descriptors for Week of Month  in Problem Statement Don't Match the Descriptors in the  Tests",
        "issue_label": "",
        "issue_content": "\n          The descriptors for the week in the instructions.md do not match what is used in the unit test.  The best fix in my opinion would be to modify the instructions.md to match the unit test.  This would maintain the validity of existing submissions.\ninstructions.md:\nfirst, second, third, fourth, fifth\nmeetup_test.py\n1st, 2nd, 3rd, 4th, 5th\n      ",
        "issue_comment": "The descriptors for the week in the instructions.md do not match what is used in the unit test.  The best fix in my opinion would be to modify the instructions.md to match the unit test.  This would maintain the validity of existing submissions. instructions.md: \\nfirst, second, third, fourth, fifth meetup_test.py \\n1st, 2nd, 3rd, 4th, 5th  \\xa0  Hi! üëãüèΩ    Welcome to the Exercism Python Repo! Thank you for opening an issue!   \\xa0    \\n \\n \\n \\u200b\\t\\t\\xa0 \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 ‚ó¶\\xa0 \\n\\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 \\n \\n \\n         \\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Run checks on the whole repo & submit a bunch of PRs. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 This creates longer review cycles & exhausts reviewers energy & time. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 It may also conflict with ongoing changes from other contributors. \\n\\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Insert only blank lines, make a closing bracket drop to the next line, change a word \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0to a synonym without obvious reason, or add trailing space that's not an  for the very end of text files. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Introduce arbitrary changes \"just to change things\" . \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0  \\n \\n \\n \\n  \\xa0  \\xa0  If you decide to help out with other  , you have our     üôåüèΩ. \\nAnything tagged with   and without   is up for grabs. \\nComment on the issue and we will reserve it for you.      Hi   üëãüèΩ   -  Thanks for filing this issue. As stated in the PR you filed: Since the problem description is common across tracks, it doesn't make sense to change it just for Python. Instead, you'd want to change the  , the  , and then re-generate the python test file to match the current description.   It was work we didn't deem high priority for a difference of words vs numbers, but I am happy to have you PR changes if you'd like to make them. It does require getting familiar with  JinJa2 (the templating language), as well as our test generator script.  You can learn more about both in our   documents.  The example file needs to pass whatever test file is generated, so it will also need to edited accordingly. \\n \\n \\n \\n \\n Let me know if you want to take on the work, and if you have any questions or issues. Hello  I would like to take on the work.  I always enjoy learning something new.  On the surface this seems to be a fairly easy fix,  though that is rarely the case. Okay, the example file passes all 103 test.  That was the easy part, here is where I might need a little help. Do you want me to just create another pull request on it tagging this issue?  -  Did you edit the test generation template & regenerate the test files as well? If so --   -- please open a PR with the new template, the regenerated tests, and the updated example file, tagging this issue.    - and let me know if there is anything I can help with, or if you run into any issues."
      },
      {
        "issue_serial": "/exercism/python/issues/3003",
        "issue_name": "[Guidos Gorgeous Lasagna] Correction to Instructions",
        "issue_label": "",
        "issue_content": "\n          The first step of the exercise consist on defining a constant. In the instructions there is an example where the the constant is called as follows:\n>>> lasagna.EXPECTED_BAKE_TIME\nI believe that the constant was probably an atribute from the lasagna class in an earlier version of the problem, and now it just makes it difficult to understand what \"lasagna\" means in the exercise.\n      ",
        "issue_comment": "The first step of the exercise consist on defining a constant. In the instructions there is an example where the the constant is called as follows: I believe that the constant was probably an atribute from the lasagna class in an earlier version of the problem, and now it just makes it difficult to understand what \"lasagna\" means in the exercise. Hi   üëãüèΩ Thanks for submitting this issue. While it may be confusing ( ), it is not wrong here to say  .  It wasn't left over from a    , rather   is the name of the exercise  . The convention in Python is to use    if you are referring to a variable, constant, or class from an imported file/module - which you would be, if you were accessing the EXPECTED_BAKE_TIME constant from the   file in a  Python terminal ( ) You could also do   to avoid having to reference  , but we chose not to go over that here. I also left this note on the PR -- so if you'd like to add an import statement to the code example as clarification, I'd happily review and accept it -- but the current usage of   is correct. Hi  , thanks for your thorough explanation. I think you expect me to modify the first example to look like this: But then I think I should also add the   for the rest of the functions to be consistent, like the example below: Another option would be leaving only the first import, but calling all the functions with the complete name: What do you think? Hi  , thanks for your thoughtful reply! Now that I am looking at it, I like the idea of adding the more specific import for the functions as well.  That gives two different examples of imports -- the whole file/module vs a specific function from it. But as a learner, is that going to be confusing?  If not, then I say go with your top two examples above - and many thanks for filing the issue and doing the work!  "
      },
      {
        "issue_serial": "/exercism/python/issues/2998",
        "issue_name": "[Darts]: Hints File Does Not Display Nested Bullets or RefLinks",
        "issue_label": "",
        "issue_content": "\n          The hints file for Darts (available here) has both nested bullets and markdown reflinks.  These display fine on GH:\n\nThe same bullets and links are dropped when the file is displayed on the website:\n\nThis may or may not be easily fixed.  If the decision is to wait (or not) fix, then PR #2997 should be reviewed and merged.\n      ",
        "issue_comment": "The   file for Darts (available  ) has both nested bullets and markdown reflinks.  These display fine on GH: The same bullets and links are dropped when the file is displayed on the website: This may or may not be easily fixed.  If the decision is to wait (or not) fix, then PR   should be reviewed and merged.  -- I went with this issue.  If it's not an easy fix, just ping me, and I can push the reformatted file.  Since this is our very first practice exercise hint file, I am not a a big hurry, since I don't think its going to really be quickly discoverable.  I've just checked, and reference links in top-level list items work. The issue is likely with the nested list items. Good to know!  I'll go back to the reflinks, and un-nest the bullets for now.  Thanks for checking.   Sure. I'll see if I can fix the nesting."
      },
      {
        "issue_serial": "/exercism/python/issues/2992",
        "issue_name": "[Ellen's Alien Game] Tests are Blocked from Running in Editor & Locally Due to Function Import Error",
        "issue_label": "",
        "issue_content": "\n          Dear community,\nworking on Ellen's Alien Game, the tests do not run and I get this message:\n\nWe received the following error when we ran your code:\nImportError while importing test module '.mnt.exercism-iteration.classes_test.py'.\nHint: make sure your test modules.packages have valid Python names.\nTraceback:\n.usr.local.lib.python3.9.importlib.init.py:127: in import_module\nreturn _bootstrap._gcd_import(name[level:], package, level)\n.mnt.exercism-iteration.classes_test.py:4: in \nfrom classes import new_aliens_collection\nE   ImportError: cannot import name 'new_aliens_collection' from 'classes' (.mnt.exercism-iteration.classes.py)\n\nThere is from classes import new_aliens_collection in line 4 in classes_test.py. Why is it there?\n      ",
        "issue_comment": "Dear community, working on Ellen's Alien Game, the tests do not run and I get this message: We received the following error when we ran your code: ImportError while importing test module '.mnt.exercism-iteration.classes_test.py'. \\nHint: make sure your test modules.packages have valid Python names. \\nTraceback: \\n.usr.local.lib.python3.9.importlib. .py:127: in import_module \\nreturn _bootstrap._gcd_import(name[level:], package, level) \\n.mnt.exercism-iteration.classes_test.py:4: in  \\nfrom classes import new_aliens_collection \\nE   ImportError: cannot import name 'new_aliens_collection' from 'classes' (.mnt.exercism-iteration.classes.py) There is   in line 4 in  . Why is it there? Ah, the last instruction calls for the creation of function  . Well, there are two ways, I guess. Either \\n \\n \\n Having just done the exercise, I think it is good to have the tests running step by step. So the second option would mean they fail with an  ... If you want, I can create a PR implementing the first option: Hi   üëãüèΩ Thanks for filing this issue!  There is a bit of a dilemma  here, since this exercise was intended to teach both class creation, and some basics around using or calling the class. We also wanted to show that Python supports both defining a   and defining stand-alone functions within the same module. Pre-defining the stand-alone function stub short-circuits that learning somewhat. But students are getting confused with the wording of task 7: And, as you pointed out, the import error for   makes it look as though the tests are \"broken\", unless you are used to decoding Python stack traces. So yes - the most straightforward \"fix\" would be to define a stub.  What worries me there is that a student then misses out on the \"lightbulb\" of learning that Python will happily accept functions and classes in the same module, and might also miss out on learning how to interpret stack traces. We also have an issue where students are not using/reading the stub file, and they erase it, only to have import errors from mis-named classes and functions ( ).   But I would also like to hear your thoughts on how we might ease students into learning how to interpret things like an   stack trace: \\n \\n \\n \\n Not sure that always defining stubs or always trapping import fails is the correct approach for the entire track.  It makes sense as students are first learning Python, but I think it might get in the way of fluency as someone progresses.  I know the first steps of debugging were a struggle for me - but I am so used to looking at traces now, I barely register the process. So .. aaaalll that being said - I would happily welcome a PR for this particular exercise, as we work through what our longer-term strategy might be.  Aaaaalright, thank you   for your very detailed and descriptive explanation! Maybe I start with my opinion on the strategy. I personally have done some exercises in the Python track a while ago (v. 2), came back now and do the recommended learning exercises. I imagine that this is a common procedures for Python newbies. So eventually, the beginners end up in Ellen's Alien Game and have so far learnt basic Python concepts and types and are familiar with functions. But they know nothing really about scoping or imports or exceptions or stack traces. Thus, I assume that many could stumble upon this exercise and at the same time have no knowledge about how to interpret the stack trace or are unsure on how to define a function by themselves (just because there were stubs all time). Nevertheless I think, like you, those are important concepts. For this exercise, the topic is OOP and a first introduction to classes. So I would not overload it with the stand-alone function and the interpretation of the stack trace and rather have that in another exercise (but this is only my outsider view). To your questions: \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Another compromise for the PR could be splitting the tests on multiple files, one for the   class and one for the function. At the same we could use the   stub and no   stub.   test cases run and fail and the tests for   throws an import error (with a hint to implement the function). What do you think?"
      },
      {
        "issue_serial": "/exercism/python/issues/2985",
        "issue_name": "Clock recommended after 10 solved exercises",
        "issue_label": "",
        "issue_content": "\n          Hi, I really like this project but I think there is a small issue with the recommended exercises.\nClock was recommended to me after I've solved just 10 exercises . Besides the fact that concept is still locked, it is way to difficult for people to solve who just started.\n      ",
        "issue_comment": "Hi, I really like this project but I think there is a small issue with the recommended exercises. Clock was recommended to me after I've solved just 10 exercises . Besides the fact that concept is still locked, it is way to difficult for people to solve who just started.  \\xa0  Hi! üëãüèΩ    Welcome to the Exercism Python Repo! Thank you for opening an issue!   \\xa0    \\n \\n \\n \\u200b\\t\\t\\xa0 \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 ‚ó¶\\xa0 \\n\\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 \\n \\n \\n         \\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Run checks on the whole repo & submit a bunch of PRs. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 This creates longer review cycles & exhausts reviewers energy & time. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 It may also conflict with ongoing changes from other contributors. \\n\\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Insert only blank lines, make a closing bracket drop to the next line, change a word \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0to a synonym without obvious reason, or add trailing space that's not an  for the very end of text files. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Introduce arbitrary changes \"just to change things\" . \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0  \\n \\n \\n \\n  \\xa0  \\xa0  If you decide to help out with other  , you have our     üôåüèΩ. \\nAnything tagged with   and without   is up for grabs. \\nComment on the issue and we will reserve it for you.      Hi   üëãüèΩ Thanks for filing this issue.  I agree that   is probably not something you want to take on after just 10 exercises.  Not entirely sure how the recommendation happened, since   isn't even linked in the ( ) active syllabus tree. My   is that it unlocked because it only has three prerequisites -  ,  , and   - so once you completed those concepts, it went into the pool of \"available\" exercises, and thus got recommended.  We've since added a concept exercise on   that should be part of the prerequisites.  I will be adjusting the track config accordingly, and that might  help things a bit.  Additionally, we're looking at the \"level\" of each of our practice exercises.  I'll note that maybe   needs a \"bump\" in difficulty level. Thanks "
      },
      {
        "issue_serial": "/exercism/python/issues/2974",
        "issue_name": "Docstring style/format is not consistent",
        "issue_label": "discussion documentation ",
        "issue_content": "\n          The docstring param and return blocks vary from file to file. See:\n¬ª grep -hr -e ':return: [^ ]\\+ ' -e ':param [^ ]\\+:' | sed 's/^ *//' | sed 's/\\(\\([^ ]* \\)\\{5\\}\\).*/\\1/'| sort -u\n:param amount: Amount of seats\n:param appetizers: list of appetizer\n:param azara_record: tuple - a\n:param budget: float - amount\n:param budget: float - the\n:param card: str - given\n:param combined_record_group: tuple of tuples\n:param coordinate: str - a\n[...]\n:return: int amount of prep\n:return: integer count of student\n:return: int - index at\n:return: int - maximum value\n:return: int - non-exchangeable value.\n:return: int - number of\n:return: int - number raised\n:return: int remaining bake time\n:return: int - the value\n[...]\n\n(Full output)\nThe predominant style appears to be:\n:param <name>: <type> - <description>\n:return: <type> - <description>\n\nwhere the description begins with a lowercase letter and ends with a period.\nHappy to send a PR if this is acceptable.\n      ",
        "issue_comment": "The docstring param and return blocks vary from file to file. See: ( ) The predominant style appears to be: where the description begins with a lowercase letter and ends with a period. Happy to send a PR if this is acceptable.   -- I think these are largely fine as they stand.  As long as they   follow this format: :  I think it's too much to be ridged around the fine details, as long as we stay within what PEP257 and PEP8 describe and additionally have some consistency with how we mark out the   and  . As the intro to PEP257 says: The aim of this PEP is to standardize the high-level structure of docstrings: what they should contain, and how to say it (without touching on any markup syntax within docstrings).  \\n‚ÄîTim Peters on comp.lang.python, 2001-06-16 I consider the   and the   optional ( ). I do think that having an additional colon after the :param: or :return:   is hard to read, makes things confusing, and is not mentioned in any of the docstring formats I took a quick look at. I did see both single and double dashes used in both PEP8 & 257. Not every concept exercise is going to have these docstrings stubs.  We'll probably not have them after the   exercise - or they will be less verbose.  Eventually, we'd like students to make ones of their own.  But until/unless we write specific exercises around a specific style or format of docstrings, I think we shouldn't be enforcing more than the general PEP257 format (with the demarcations for params and returns noted previously). So I don't think a PR from you for concept exercises is needed at this time.     has taken on reviewing docstrings for concept exercises as time allows ( ), and can clean up the small set of cases where   has been omitted, or some other issue arises. Hey  , \\nI'll keep an eye out for missing types in the param/return lines as   said when I have the time to devote to the repository again, which should be pretty soon (recent midterms ate up a lot of my time). If there's a way to extend pydocstyle or any other docstring linter to check for missing types, that'd be our best bet for uniformity from exercise to exercise (in my opinion), I just haven't found anything like that yet and pydocstyle seems to not care about if types are there or not in its current configuration. Thanks for pointing this out though and I'll make a note of this for future PRs. Cheers.   - if/when either you or I have time, maybe we can take a look at some of the programs in the documentation generation space for Python.  In particular: \\n \\n \\n Also:   But also   of the generators: \\n \\n \\n  comes the closest ( ) right now to what we are doing - but that doesn't necessarily mean we want to follow it.  For one, separating the type into its own line is quite hard to read, and the whole format suffers from an extreme excess of periods and colons.   \\n  by Thomas Cokelaer comes the closest I've found yet to showing how a Sphinx docstring format then gets processed by Sphinx RST. \\n  lays out how the PSF/Python core team uses Sphinx and reST to produce Python's documentation. \\n The intricacies of machine processing and auto-generation are fairly burdensome to someone who's learning to code in Python, and there is a high likelyhood that the very next project or team they are on will require something different.  Cases in point: \\n \\n \\n \\n \\n So it does feel like a sort of \"losing battle\" beyond enforcing a few points.  That being said, I can update this issue with any tooling I find that may or may not be helpful. Would recording an official preferred style be worth having? Not at the moment.  I think we're not quite there yet.  Maybe after this last pass by  , and some noodling on what we might want to cover in a   and   series of concept exercises. But even then, it would be for track exemplar code and (selected) stub files.  I am not about to go and require them on all submissions or mentor notes.  And we will NOT be putting any in test files - that would really screw up the code that gets displayed on the website currently. The overarching message I 'd like to convey to students is that   doctstings that are useful to those reading the code later are a   thing.  And that generally, it is a really good idea to follow conventions in PEP257.  The earlier you have the habit, the easier it is.  Like having unit tests, it shows you are a good developer. Having them written so that documentation is automated is    , and the hallmark of a stellar dev team -- but also ( ) fraught with complication the further you dig. Sorry if I wasn't clear. I definitely didn't mean to imply that we should be pushing a style for student submissions! I was thinking it'd be helpful for stubs, examples and exemplars to keep them consistent. Thanks! Same answer.   Not there yet.  Sorry if I left ya hanging for a minute, I just wanted to research the subjects here and devote some time to the topic. if/when either you or I have time, maybe we can take a look at some of the programs in the documentation generation space for Python. Will this be a part of a future exercise or is this just so we can hone in on our style eventually? Or more exciting, a documentation site for the repository to make use of our new found documentation skills  ? The intricacies of machine processing and auto-generation are fairly burdensome to someone who's learning to code in Python, and there is a high likely-hood that the very next project or team they are on will require something different. Then if you'd like my nooby advice, I'd go with the fewest steps possible for the student, which PDoc does well. I was able to generate some nice looking html files with a simple one liner inside just a regular old exercise that a student would receive via the exercism cli: The problem is that PDoc only works with Google and Numpy format, and while they support reST directives, they seem to have some issues displaying reST docstring format at the moment and have an outstanding issue since 2020 where they've  In the meantime, I'll just keep trucking along as you say and keep an eye on the issue while we figure this out and follow your format suggestion in your first reply. I'll also keep an eye out for tooling as well and update the thread with some good contenders."
      },
      {
        "issue_serial": "/exercism/python/issues/2972",
        "issue_name": "[New Concept Docs]:  Class Inheritance",
        "issue_label": "claimed new documentation x:module/conceptx:status/claimed",
        "issue_content": "\n          This issue describes how to implement the class-inheritance concept docs.\nGetting started\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\n\nContributing to Exercism | Exercism and GitHub | - Contributor Pull Request Guide\nWhat are those Weird Task Tags about?\nBuilding Language Tracks: An Overview\nWhat are Concepts?\nConcept Specifications\nExercism Formatting and Style Guide\nExercism Markdown Specification\nReputation\n\nGoal\nThis concept is meant to teach an understanding/use of class-inheritance  in Python.\nLearning objectives\n\nmore fully understand the uses (and possible abuses) of classes  in Python\nunderstanding and use of single inheritance in Python\nunderstanding and use of multiple inheritance in Python\n\nthe diamond inheritance problem\nPythons MRO (method resolution order)\npros and cos of mixins () to isolate multiple inheritance issues\n\n\nwhen and when not to use __super__() to call a parent class constructor\n\nOut of scope\n\nclass-composition as an explicit topic (it is ok to use limited composition as needed in example code)\ndataclasses\ndecorators outside of @property, @staticmethod, and @classmethod (the student should already be exposed to these in the prerequisite exercise)\ngenerators\ncoroutines\ndescriptors (these will get their own exercise)\nusing a class as a decorator\nperformance considerations\n\nConcepts\n\nclasses\ninheritance in OOP\nsingle inheritance\nmultiple inheritance\nminxins\n__super__()\n\nPrerequisites\nThese are the concepts/concept exercises the student needs to complete/understand before solving the concept exercise that these concept documents support.\n\nbasics\nbooleans\nclasses\nclass-customization\ncomparisons\ndecorators\ndicts\nfunctions\nhigher-order-functions\niteration\nlists\nnumbers\nsequences\nsets\nstrings\ntuples\n\nResources to refer to\n\nclasses (Python tutorial)\nReal Python: Object-Oriented Programming in Python 3\nReal Python: Inheritance and Composition: A Python OOP Guide\nTowards DataScience: Understand Inheritance in Python -- (this is not a good resource for hints or links, since it requires an account signup)\n\nLiskov substitution principle\n\n\nMultiple Inheritance in Python\nMultiple Inheritance is Hard (Ned Batchelder)\nPython.org: MRO in Python 2.3+\nDig into Python super() and MRO\nMultiple inheritance and mixin classes in Python\nMaking Python classes more modular using mixins\nWrite composable, reusable Python classes using Mixinsl)\nMixins in Python and Ruby Compared\nPython Data Model - Python Docs\n\n\n\nlinks.json\nFor more information, see concept links file\n\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\n\n\n\nConcept Description\nPlease see the following for more details on these files:  concepts\n\n\nConcept about.md\nFor more information, see Concept about.md\n\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\n\n\n\nConcept introduction.md\nFor more information, see Concept introduction.md\n\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\n\n\n\nImplementation Notes\n\nExample code  should only use syntax & concepts introduced within these docs or one of the prerequisite concept exercises or documents.\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\n\nHelp\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\n      ",
        "issue_comment": "This issue describes how to implement the   concept docs. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \\n \\n \\n \\n \\n \\n \\n \\n \\n Goal This concept is meant to teach an understanding/use of    in Python. Learning objectives \\n \\n \\n \\n \\n \\n \\n \\n \\n Out of scope \\n \\n \\n \\n \\n \\n \\n \\n \\n Concepts \\n \\n \\n \\n \\n \\n \\n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving the concept exercise that these concept documents support. \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Resources to refer to \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n For more information, see  \\n \\n \\n \\n Concept Description Please see the following for more details on these files:   \\n Concept  For more information, see  \\n \\n \\n Concept  For more information, see  \\n \\n \\n Implementation Notes \\n \\n \\n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.  \\xa0  Hi! üëãüèΩ    Welcome to the Exercism Python Repo! Thank you for opening an issue!   \\xa0    \\n \\n \\n \\u200b\\t\\t\\xa0 \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 ‚ó¶\\xa0 \\n\\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 \\n \\n \\n         \\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Run checks on the whole repo & submit a bunch of PRs. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 This creates longer review cycles & exhausts reviewers energy & time. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 It may also conflict with ongoing changes from other contributors. \\n\\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Insert only blank lines, make a closing bracket drop to the next line, change a word \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0to a synonym without obvious reason, or add trailing space that's not an  for the very end of text files. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Introduce arbitrary changes \"just to change things\" . \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0  \\n \\n \\n \\n  \\xa0  \\xa0  If you decide to help out with other  , you have our     üôåüèΩ. \\nAnything tagged with   and without   is up for grabs. \\nComment on the issue and we will reserve it for you.      Linking PR  @  - not able to directly assign you, but this is an issue for just the concept docs.   Ok thank you Once you commented, I could assign.  So now you are assigned.  "
      },
      {
        "issue_serial": "/exercism/python/issues/2957",
        "issue_name": "[Little Sister's Vocabulary] exercise uses lists + other issues",
        "issue_label": "abandoned discussion status/wontfix  üôÖüèΩ",
        "issue_content": "\\n          https://exercism.org/tracks/python/exercises/little-sisters-vocab\\ndef make_word_groups(vocab_words):\\n    \"\"\"\\n\\n    :param vocab_words: list of vocabulary words with a prefix.\\n    :return: str of prefix followed by vocabulary words with\\n             prefix applied, separated by ' :: '.\\n\\n    This function takes a `vocab_words` list and returns a string\\n    with the prefix  and the words with prefix applied, separated\\n     by ' :: '.\\n    \"\"\"\\n\\nThere are two problems here:\\na) It requires the user to manipulate a list before you've introduced lists.\\nb) If I saw this in real-world code, it would flag my code-smell detector. We should be teaching people good code practices. The function definition should be:\\ndef make_word_groups(prefix, vocab_words) - the prefix should be a separate parameter.\\nAlthough that would then complicate the solution (as loops haven't been taught yet), I guess get rid of the prefix entirely and just teach join.\\n      ",
        "issue_comment": "There are two problems here: a) It requires the user to manipulate a list before you've introduced lists. b) If I saw this in real-world code, it would flag my code-smell detector. We should be teaching people good code practices. The function definition should be: \\n  - the prefix should be a separate parameter. \\nAlthough that would then complicate the solution (as loops haven't been taught yet), I guess get rid of the prefix entirely and just teach join.  \\xa0  Hi! üëãüèΩ    Welcome to the Exercism Python Repo! Thank you for opening an issue!   \\xa0    \\n \\n \\n \\u200b\\t\\t\\xa0 \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 ‚ó¶\\xa0 \\n\\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 \\n \\n \\n         \\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Run checks on the whole repo & submit a bunch of PRs. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 This creates longer review cycles & exhausts reviewers energy & time. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 It may also conflict with ongoing changes from other contributors. \\n\\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Insert only blank lines, make a closing bracket drop to the next line, change a word \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0to a synonym without obvious reason, or add trailing space that's not an  for the very end of text files. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Introduce arbitrary changes \"just to change things\" . \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0  \\n \\n \\n \\n  \\xa0  \\xa0  If you decide to help out with other  , you have our     üôåüèΩ. \\nAnything tagged with   and without   is up for grabs. \\nComment on the issue and we will reserve it for you.      Hi   üëãüèΩ Please see the reasoning laid out here in closed issue  . As long as there are clear examples, it is not forbidden to add in an additional concept. I would also say that having     an iterable is not the same as having a student use   or  . So we are not asking students to manipulate lists - only understand that   can process one and that   returns one. I'm not sure how breaking down data in one form to return it in another is a \"code smell\".  Sometimes, separators are well-known and fixed.  This one is clearly stated in the task.  Dealing with how or why you would have a parameter for a variable separator or a fixed one ( ) is out of scope for this exercise.  I mis-read that you were speaking about the  , but my statement still stands -- the student has been given instruction on how to extract an element from both a   and a   at this stage, since they are both   types.  So this should not be a huge struggle for them.  I'd also argue that weird input and output data is indeed a \"real world\" thing - so having to pull out a prefix and then transform the rest of the list and return it with a separator in a rather arbitrary feeling     a \"real world\" scenario.   I raise these issues because not only did I struggle with them (as a result of the instructions not being entirely clear and the code-smell), but also because a mentee struggled too. As long as there are clear examples, it is not forbidden to add in an additional concept. \\nIt should be. The purpose of these exercises is to teach, and to do so effectively. That means not putting in other concepts that are not pertinent; that will simply add confusion to the exercise. Teach one thing and teach it well. I'd also argue that weird input and output data is indeed a \"real world\" thing \\nIndubitably, but so is crime. That doesn't mean we should expose people to it if we can avoid it. And absolutely definitely not during a teaching exercise. Yes there are countless real-world examples where you have to pull data out of itself and then munge it back together again (practically my day job). I'm not an academic so I can't expound on the theory, but the current \"use the first value to edit all the other values but not the first value\" feels onerous. The fact that it's not split out before the function definition feels code-smelly given this is a entirely contrived example rather than real data..    I think I am going to stop my participation in this discussion here, as I don't think we are going to come to an agreement.  I've asked several other maintainers to take a look, and weigh in on what they think of this exercise, its \"code smells\", and where it's placed in the exercise tree. Meanwhile, I'd encourage you to submit a PR with changes you feel improve this exercise, or teach the concept in a better fashion from your perspective. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "issue_serial": "/exercism/python/issues/2951",
        "issue_name": "[Numbers] Redesign Numbers Concept Exercise",
        "issue_label": "claimed improve exercise x:size/largex:status/claimed",
        "issue_content": "\\n          Per issues #2946 ,  #2621 , #2835,  #2804,  #2591,  and #2490  -- this exercise has gone through a lot of improvements and also complaints.\\nSince multiple re-works and improvements have not succeeded, we have decided a complete re-design of the Numbers exercise is in order.\\nConcept docs can be retained, or revised as needed.  Design documents should be updated.\\nOriginal specs for Numbers exercise are below:\\n\\nGoal\\nThe goal of this exercise is to teach the basics of theint , float , and complex numeric types (numbers) in Python.\\nLearning objectives\\n\\nunderstand the difference between int, float and complex numbers in Python\\nunderstand that Python uses j to represent the square root of -1. appending j to a number defines it as imaginary. (e.g.3j is equivalent of 3(sqrt(-1)) -- IF Pythons math module allowed negative square roots...it doesn't).\\nunderstand that a decimal (.) preceeded or followed by a number creates a float literal\\ncreate an imaginary literal via appending j to an int or float (e.g. 3.4j or 5j)\\ncreate a float by casting an int and an int by casting a float, using the int() and float() constructors.\\ncreate complex numbers by casting int and float to complex using the complex() constructor.\\ncreate a complex number by adding a float and an imaginary literal (e.g. 3.0 + 6j)\\nunderstand when and how Python uses arithmetic conversions to apply arithmetic operators between these numeric types.\\napply the arithmetic operators to each/between each of the number types (where applicable)\\nperform integer (floor) division and \"regular\" (float) division and see how they differ.\\nchanging precision of a float, using round(<float>, <digits>)\\n\\nOut of scope\\n\\nSpecial values for Infinity and NaN\\nSpecial math functions for complex numbers contained in cmath\\nBitwise operations on ints\\nround numbers using math.floor() and math.ceiling()\\nIssues with precision limits & sys.float_info -- but maybe we should note these in passing, or link to them in links.\\nNumpy and the numeric types defined by Numpy -- again, something for links/notes.\\nChecking strings to see if they are floats. This means any test input to this exercise should not require a student to (a) catch or raise an Exception if a non-float string is passed, or (b) check to see if the string is a float. Only pass valid float strings, i.e. \"1.032\".\\n\\nConcepts\\n\\nnumbers\\narithmetic operations\\n\\nPrerequisites\\n\\nbasics\\n\\nResources to refer to\\n\\nPython numeric type documentation\\nDocumentation for int() built in\\nDocumentation for complex() built in\\nDocumentation for float() built in\\nDocumentation for builtin function round()\\nPythons Integer Implementation\\nArithmetic conversions\\nArithmetic Operations (see table and notes on the same page as numeric types.)\\nOperator Precedence in Python\\n\\nHints\\nHints can link to the builtin function docs mentioned above, with appropriate prompts.\\nConcept Description\\n(a variant of this can be used for the v3/languages/python/concepts/<concept>/about.md doc and this exercises introduction.md doc.)\\nPython has three different types of built-in numbers: integers (int), floating-point (float, and complex (complex). Fractions (fractions.Fraction) and Decimals (decimal.Decimal) are also available via import from the standard library.\\nWhole numbers (including hex, octals and binary numbers) without decimal places are identified as ints:\\n#whole number\\n>>> 1234\\n1234\\n>>> type(1234)\\n<class 'int'>\\n\\n>>>  -12\\n-12\\n\\n#hex number\\n>>> 0x17\\n23\\n>>> type(0x17)\\n<class 'int'>\\n\\n#octal number\\n>>> 0o446\\n294\\n>>> type(0o446)\\n<class 'int'>\\n\\n#binary number\\n>>> 0b1100110\\n102\\n>>> type(0b1100110)\\n<class 'int'>\\nNumbers containing a decimal point are identified as floats:\\n>>> 3.45\\n3.45\\n>>> type(3.45)\\n<class 'float'>\\n\\nAppending `j` or `J` to a number creates a _imaginary number_ -- a `complex` number with a zero real part. Integers or floats can then be added to an imaginary number to create a `complex` number with both real and imaginary parts:\\n\\n>>> 3j\\n3j\\n>>> type(3j)\\n<class 'complex'>\\n\\n>>> 3.5+4j\\n(3.5+4j)\\nArithmetic\\nPython fully supports arithmetic between these different number types, and will convert narrower numbers to match their less narrow counterparts when used with binary arithmetic operators (+, -, *, /, and %). ints are narrower than floats, which are considered narrower than complex. Comparisons between different number types behaves as as if the exact values of those numbers were being compared:\\n#the int is widened to a float here, and a float is returned\\n>>> 3 + 4.0\\n7.0\\n\\n#the int is widened to a complex number, and a complex number is returned\\n>>> 6/(3+2j)\\n(2+2j)\\n\\n#division always returns a float, even if integers are used\\n>>> 6/2\\n3.0\\n\\n#if an int result is needed, you can use floor division to truncate the result\\n>>> 6//2\\n3\\n\\n#when comparing, exact values are used\\n>>> 23 == 0x17\\nTrue\\n\\n>>> 0b10111 \\\\== 0x17\\nTrue\\n\\n>>> 6 == (6+0j)\\nTrue\\nAll numbers (except complex) support the same general arithmetic operations, evaluated according to operator precedence.\\nPrecision & Representation\\nIntegers in Python have arbitrary precision -- the amount of digits is limited only by the available memory of the host system.\\nFloating point numbers are usually implemented using a double in C (15 decimal places of precision), but will vary in representation based on the host system. Complex numbers have a real and an imaginary part, both of which are represented by floating point numbers.\\nFor a more detailed discussion of the issues and limitations of floating point arithmetic, take a look at The Python Tutorial.\\nImplementing\\nTests should be written using unittest.TestCase, and the test file named numbers_test.py.\\nCode in the .meta/example.py file should only use syntax & concepts introduced in this exercise or one of its prerequisites.\\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered. Please also follow PEP8 guidelines.\\nHelp\\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue.\\n      ",
        "issue_comment": "Per issues   ,    ,  ,   ,   ,  and    -- this exercise has gone through a lot of improvements and also complaints. Since multiple re-works and improvements have not succeeded, we have decided a complete re-design of the   exercise is in order.   Design documents should be updated. Original specs for   exercise are below: Goal The goal of this exercise is to teach the basics of the  ,   , and   numeric types ( ) in Python. Learning objectives \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Out of scope \\n \\n \\n \\n \\n \\n \\n \\n Concepts \\n \\n \\n Prerequisites \\n \\n Resources to refer to \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Hints Hints can link to the builtin function docs mentioned above, with appropriate prompts. Concept Description ( ) Python has three different types of built-in numbers: integers ( ), floating-point ( , and complex ( ). Fractions ( ) and Decimals ( ) are also available via import from the standard library. Whole numbers ( ) without decimal places are identified as  : Numbers containing a decimal point are identified as  : Arithmetic Python fully supports arithmetic between these different number types, and will convert narrower numbers to match their less narrow counterparts when used with binary arithmetic operators ( ,  ,  ,  , and  ).   are narrower than  , which are considered narrower than  . Comparisons between different number types behaves as as if the   values of those numbers were being compared: All numbers (except complex) support the same general  , evaluated according to  . Precision & Representation Integers in Python have   -- the amount of digits is limited only by the available memory of the host system. Floating point numbers are usually implemented using a   in C ( ), but will vary in representation based on the host system. Complex numbers have a   and an   part, both of which are represented by floating point numbers. For a more detailed discussion of the issues and limitations of floating point arithmetic, take a look at  . Implementing Tests should be written using  , and the test file named  . Code in the   file should only use syntax & concepts introduced in this exercise or one of its prerequisites. \\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered. Please also follow   guidelines. Help If you have any questions while implementing the exercise, please post the questions as comments in this issue. I was preparing to work on this. Commenting here for the ticket to be assigned understand that Python uses j to represent the square root of -1. appending j to a number defines it as imaginary. (e.g.3j is equivalent of 3(sqrt(-1)) -- IF Pythons math module allowed negative square roots...it doesn't). This seems like an oddly specific learning objective and another example of over-complex math being introduced. In fact, the same goes for   and   numbers. I've used Python for innumerable real-world problem solving things over the past decade+ in a variety of domains and have never once used either   or   (I also have no idea what they are, so you'd have to overcome that hurdle too, likely with many other users as well). I appreciate they may be useful for some domains but I'd posit the teaching should be things that will benefit   python users and that almost all users will need at some point. \\nIn that vein,   and   would seem worthwhile, as would converting from strings and catching bad strings. All much more common things Hi   üëãüèΩ As clearly stated at the top of the description ( ): The specs here were provided  , not a commandment nor set of debate points.  I'll let   speak to the plans he has going forward ( ), although he shouldn't feel that he   to. I am also going to ask you going forward to either PR a concept exercise for   you feel is better or stop complaining about the existing one.  At this point, we understand the need to re-work this particular exercise and also look at how we deal with the different numeric types in additional exercises. But I don't think having a debate about the utility of   ( ) in programming is helpful. Nor do I want to have a debate about which math is \"too complicated\" or \"unnecessary\".  I   interested in crafting exercises that don't excessively confuse or frustrate students and (hopefully) help then become more fluent in Python. The author of this re-worked exercise may or may not include   in the rewrite - that is up to them.  They understand the feedback and the struggles. We may or may not have other exercises that cover   in the future.  As for the   module -- if you would like to propose a new concept exercise around that -- please do.  Or a concept exercise around math that goes beyond  ,  ,  ,  , and  .  Neither are on the priority list the moment ( ), but we'd welcome proposals for the \"next wave\" of exercises to build out. Please also feel free to propose one or more practice exercises around topics you feel we haven't gotten to yet. But I don't think having a debate about the utility of complex numbers (or any other numeric type) in programming is helpful. Nor do I want to have a debate about which math is \"too complicated\" or \"unnecessary\". I am interested in crafting exercises that don't excessively confuse or frustrate students and (hopefully) help then become more fluent in Python. By definition if the math is too complex then you will be creating exercises that are going to confuse and frustrate students who do not have that math. See also my comments in this thread:   which are highly pertinent. I am also going to ask you going forward to either PR a concept exercise for numbers you feel is better or stop complaining about the existing one. As noted in my other comment, I'd genuinely forgotten I'd raised the issues months previously; I wasn't being vexatious. The fact they came up again when another mentee did them 3 months later only re-enforces my point, As clearly stated at the top of the description (emphasis mine): Design documents should be updated. Sorry, but I don't know what that means. If you're saying \"we don't want feedback at this point\", then sure, I'll wait. Hi  , I'm submitting a couple exercises as a form of a/b testing. If you want to submit your own PRs as well, I'm super into it. The way I'm envisioning tackling complex / imaginary exercises are in a separate PR still related to this issue and simplifying the current arithmetic exercises (read: currency exchange). My plan is to borrow exercises from other languages that cover the same exercise and craft them for python. Most importantly I want to submit more than one exercise covering the same thing in order to foster a conversation about which one is possibly more effective. Sorry, but I don't know what that means. If you're saying \"we don't want feedback at this point\", then sure, I'll wait. We don't want more of the same feedback on the existing exercise at this point, since   is re-designing it, and has also taken on thinking through multiple exercises with regards to numbers in Python.  Hence the comment about updating design docs -- he may very well end up with design docs that split the topic into multiple concepts and topics. So do please either participate by PR-ing an additional exercise/exercises as he's welcomed above, or give him and others time to re-work things before launching a long discussion on how math or numbers should or should not be taught.  Thanks.   Not Abandoned! Just slower than I'd like For shame, github bot!  "
      },
      {
        "issue_serial": "/exercism/python/issues/2926",
        "issue_name": "[Clock] Proposal for additional tests",
        "issue_label": "",
        "issue_content": "\\n          I was mentoring a friend who solved the problem in a way that surprised me: his __repr__ implementation always returned the values the clock was initially constructed with. Regardless of how you mutated the clock, his __repr__ would stay the same. Since this incorrect solution passed all existing tests, I'd like to add a couple more tests.\\nSince the tests for __repr__ are in practice/clock/.meta/additional_tests.json, I'm assuming this repo is the right place to add some additional tests.\\nFrom looking at how the tests are generated, I'm not sure what the easiest approach would be. The way the current repr type tests are setup makes it easy to add \"create a Clock, immediately call __repr__\" tests, but adding a couple of tests that add/subtract before calling __repr__ would probably require a new type of test? (since it would need different treatment by the Jinja template).\\nI was also thinking about adding tests of __repr__ in addition to __str__ to the add and subtract tests (since those tests are why __str__ has to update), but that would require the Jinja template to reformat each hh:mm string from upstream into Clock(hh,mm) while removing the leading zeros. I'm not really familiar with Jinja, so that seems like it might be complicated to template correctly.\\nI'm happy to make a PR, but I'd like input first on how they should be added. :)\\n      ",
        "issue_comment": "I was mentoring a friend who solved the problem in a way that surprised me: his   implementation always returned the values the clock was initially constructed with. Regardless of how you mutated the clock, his   would stay the same. Since this incorrect solution passed all existing tests, I'd like to add a couple more tests. Since the tests for   are in  , I'm assuming this repo is the right place to add some additional tests. From looking at how the tests are generated, I'm not sure what the easiest approach would be. The way the current   type tests are setup makes it easy to add \"create a Clock, immediately call  \" tests, but adding a couple of tests that add/subtract before calling   would probably require a new type of test? (since it would need different treatment by the Jinja template). I was also thinking about adding tests of   in addition to   to the   and   tests (since those tests are why   has to update), but that would require the Jinja template to reformat each   string from upstream into   while removing the leading zeros. I'm not really familiar with Jinja, so that seems like it might be complicated to template correctly. I'm happy to make a PR, but I'd like input first on how they should be added. :)  \\xa0  Hi! üëãüèΩ    Welcome to the Exercism Python Repo! Thank you for opening an issue!   \\xa0    \\n \\n \\n \\u200b\\t\\t\\xa0 \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 ‚ó¶\\xa0 \\n\\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 \\n \\n \\n         \\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Run checks on the whole repo & submit a bunch of PRs. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 This creates longer review cycles & exhausts reviewers energy & time. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 It may also conflict with ongoing changes from other contributors. \\n\\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Insert only blank lines, make a closing bracket drop to the next line, change a word \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0to a synonym without obvious reason, or add trailing space that's not an  for the very end of text files. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Introduce arbitrary changes \"just to change things\" . \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0  \\n \\n \\n \\n  \\xa0  \\xa0  If you decide to help out with other  , you have our     üôåüèΩ. \\nAnything tagged with   and without   is up for grabs. \\nComment on the issue and we will reserve it for you.      Hi   üëãüèΩ Thank you so much for filing this issue - and I would be thrilled if you wanted to PR additional tests for  the    exercise! Let's take these point-by-point:   You are correct.  We'd add these proposed tests in the   file, as they are specific to this track's implementation.    Yeah.  That does sound like its a new ( ) test type.  No worries -- what I usually do ( ) is : \\n \\n \\n \\n \\n \\n \\n \\n \\n So ... forgive me if I am mis-interpreting here.  I see two things: \\n Our addendum file already does this reformatting, and since tests are immutable, you'd  be adding new tests in the addendum ( ).  So you could add a test with  a \"add plus str\" property, under  a  array.  I am pretty sure that the test generator knows how to handle this and concatenate the tests accordingly.  If not -- well, we have a bug to fix.  Either way, worth trying. \\n      - but I've found that once I've gotten into a rhythm,   many things in JinJa are surprisingly straightforward.  Except for heavy conditional nesting -- that's super cruddy --   but reformatting a datetime string may not be so bad.  I am pretty sure I have see reformatting macros.  Keep in mind that you can also do things like put python code in to call   to reformat the string for you -- or even call  .  When I get a chance, I will see if I can find a template that does that sort of thing.  Happy to also troubleshoot with you or problem solve -- this templating stuff is intimidating, so maybe collaboration or a back-and-forth is in order? \\n Just let me know what I can do to help.  I think the tests you propose would be super-helpful, and really support the addendums we've included in this exercise - so I'd love to see them happen.     -- just a friendly ping!  Are you still interested in working this?  Just let me know...thanks!"
      },
      {
        "issue_serial": "/exercism/python/issues/2877",
        "issue_name": "[word-count] instruction suggestion",
        "issue_label": "",
        "issue_content": "\n          I wrote a not very elegant solution to this one, then once I looked at some other solutions I realized that using regex would make things a lot easier. Once I made that switch, it was a much better solution. I wonder if the instructions should drop a hit that regex may be a good way to solve it. I also found this post that discusses how the Exercises are deliberately designed to cause us to think through the problem more, so maybe the hint is being left out on purpose?\n      ",
        "issue_comment": "I wrote a not very elegant solution to this one, then once I looked at some other solutions I realized that using regex would make things a lot easier. Once I made that switch, it was a much better solution. I wonder if the instructions should drop a hit that regex may be a good way to solve it. I also found   that discusses how the Exercises are deliberately designed to cause us to think through the problem more, so maybe the hint is being left out on purpose?  \\xa0  Hi! üëãüèΩ    Welcome to the Exercism Python Repo! Thank you for opening an issue!   \\xa0    \\n \\n \\n \\u200b\\t\\t\\xa0 \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 ‚ó¶\\xa0 \\n\\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 \\n \\n \\n         \\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Run checks on the whole repo & submit a bunch of PRs. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 This creates longer review cycles & exhausts reviewers energy & time. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 It may also conflict with ongoing changes from other contributors. \\n\\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Insert only blank lines, make a closing bracket drop to the next line, change a word \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0to a synonym without obvious reason, or add trailing space that's not an  for the very end of text files. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Introduce arbitrary changes \"just to change things\" . \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0  \\n \\n \\n \\n  \\xa0  \\xa0  If you decide to help out with other  , you have our     üôåüèΩ. \\nAnything tagged with   and without   is up for grabs. \\nComment on the issue and we will reserve it for you.      Hi     --  Thanks for filing this issue! Indeed, the   for this exercise point to RegEx as a possible solution.  But they also cover the use of   methods and additional strategies like using   to take care of tabulation. I am not opposed to putting together a    file for this exercise that nudges students in the direction of a RegEx, and maybe gives them some links to investigate what the   module (as well as   and  ) can do for them.  Hints for   exercises under V3 are a bit new-ish, so I am not sure how they will display on the site yet, but you can look over the spec  .  I have on my list to test   out for   exercises  -- so I'd be delighted to collaborate on a PR with you, if you are up for it.   I think - for the reasons you linked to - that I would stop short of doing an   or other commenting in the stub file, since it's quite possible to get a working solution   regex.  Maybe that solution won't be the \"most efficient\" or \"elegant\" feeling solution -- ( ).  We just don't want to give students the impression that there is only one \"right way\" to approach the problem, since that closes off their exploration and learning. Instruction detail, stub comments, and hinting have been coming up a lot lately in discussion both here in Git Hub ( ), and in our Slack channel.  It's a complicated topic.   On one hand, we don't want to chase away students with overly-frustrating or obscure or impossibly hard programming problems.  That's not productive.  On the other -- we   want to provide both a good problem-solving challenge and an opportunity to engage with mentors and others around approaches and strategies.  Drilling on syntax or data structures only gets you so far.  Hence the divide between   exercises and   exercises. We've even thought that maybe we need a third \"style\" of exercise that bridges all the detail of the   exercise and the vagueness of the   exercises.  Would love your thoughts on if that might be needed, and what that might look like.     Soooo.   :  Would love to collaborate or review a   PR for this exercise, if you're up for it.   I think the variety of working solutions is what makes this exercise an interesting one. I'm trying to think of a way to structure a   that would acknowledge that while also giving people hints on the different ways to solve it. Once I figured out that I could use regex, the solution came together quickly. But for beginning programmers, being introduced to Regular Expressions and Counters may feel overwhelming and discouraging that they suddenly have huge things they feel like they \"have\" to learn for the solution. Maybe something like this: \\nIf you're a beginner, check out strip() and replace(). Also remember the work you did earlier on dictionaries (with a link to previous problems). \\nIf you're feeling adventurous, check out regex and counters While there are certainly elegant ways to  , there are also elegant solutions which  . This exercise can certainly be used as a place to practice regex. However, unless the exercise is specifically intended as a regex exercise, I'd be cautious of pushing regex as the \"better\" solution. While regexes certainly have their place, just because they   be used doesn't mean they   be used. Xkcd immortalizes this concept in   as well as several other regex themed comics.  - Agreed. Especially for those who aren't familiar with regex, it may feel like more of a mass of confusion rather than a helpful hint. Instead of tagging solutions as \"beginner\" or \"advanced\", they could be tagged as... something that I can't think of right now. Essentially a way of saying there are several different ways to solve this and they are all good learning experiences. If you need a hint, here's one. If you've already solved it, try this other way.    and I fully agree: And to your point above,    -- I might even remove terms like \"beginner\" from the hints text.  Because maybe it's less \"beginner\" vs \"advanced\", and more choosing to use   tools or   tools over importing/using modules like   or  .  All are good learning experiences, and the   are about letting someone know what the \"paths\" or \"options\" are. Are there examples of other   files that provide suggestions for additional options? \\nIf you think this would be a helpful file, I will browse through the other solutions to come up with some ideas  -- I am so sorry!      My intention was not to have you close this -- It just fell through the cracks.  Are you still interested (provided I can find examples)?  If so, I will reopen and attach some. Going to reopen this as a test-drive of   files for practice exercises.  Assigning it to myself."
      },
      {
        "issue_serial": "/exercism/python/issues/2849",
        "issue_name": "[Track UI] Unknown \"En\" Concept shown as Mastered",
        "issue_label": "",
        "issue_content": "\\n          Not sure if this is a Python specific thing or an exercism thing.\\nOn this https://exercism.org/tracks/python - I'm seeing this:\\n\\nProblem is, there is no \"En\" Concept as far as I can see. And looking at the tracks page, only the Ba(sic) is all-completed (I assume that's what \"mastered\" means).\\n      ",
        "issue_comment": "Not sure if this is a Python specific thing or an exercism thing. On this   - I'm seeing this: \\n Problem is, there is no \"En\" Concept as far as I can see. And looking at the tracks page, only the Ba(sic) is all-completed (I assume that's what \"mastered\" means).  \\xa0  Hi! üëãüèΩ    Welcome to the Exercism Python Repo! Thank you for opening an issue!   \\xa0    \\n \\n \\n \\u200b\\t\\t\\xa0 \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 ‚ó¶\\xa0 \\n\\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 \\n \\n \\n         \\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Run checks on the whole repo & submit a bunch of PRs. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 This creates longer review cycles & exhausts reviewers energy & time. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 It may also conflict with ongoing changes from other contributors. \\n\\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Insert only blank lines, make a closing bracket drop to the next line, change a word \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0to a synonym without obvious reason, or add trailing space that's not an  for the very end of text files. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Introduce arbitrary changes \"just to change things\" . \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0  \\n \\n \\n \\n  \\xa0  \\xa0  If you decide to help out with other  , you have our     üôåüèΩ. \\nAnything tagged with   and without   is up for grabs. \\nComment on the issue and we will reserve it for you.      The Python repo is used for Python documentation, concepts, exercises, etc. I suspect you want to post that issue to the exercism/exercism repo.  I think you can move this, it is likely in the wrong one repository as   noted above.  What is your Exercism username?    Whether it is in the wrong repository is something I'll dig into. It   not be. Thanks   - Did you by chance complete either   or  ?  Those are the two (currently) according to our   that are connected to the   concept.....which I am taking a wild guess might map to  .  was live briefly, and then we set it back to  , but if in that time you completed it and  , the site may still be reading it as completed and counting toward the \"mastered\" count.   -- snips from   below: \\n Although there might be something going on with how that category is being calculated in addition to just the practices field.  In my account, I show  ] ( ) as mastered, but I have yet to complete the last two associated practice exercises: and the concept tree: Note also that my \"Mastered\" does not show   ( ), although the tree shows I've completed all but one exercise there. Follow-on to say that in my account   ( ) and   ( ) also show as \"Mastered\", but we don't currently have concepts live for either - and looking at which exercises are tagged to practice  , I have yet to complete several of them. Thanks for the detailed analysis  . We'll take a look.  I've checked in the database, and your concepts are: Does that make sense for you? Yes.  I've completed the related practice exercises.  However, none of them have live concept exercises. \\n \\n \\n \\n \\n So three observations -- \\n Serious confusion as to what   means vs  .  One appears to be for  , the other for  , but I don't think that's really explained or indicated anywhere - or anywhere obvious. \\n There are no tooltips/hovers on either categories   two-letter abbreviations ( ), so no easy way to tell what the abbreviation relates to.  If you click on either box in the UI, you are taken to the concept tree, which implies that both are connected to completing concept exercises and the practice exercises linked to them.  But with Pythons tree incomplete, many exercises aren't represented there. \\n The re-use of two letter abbreviations to represent unrelated concepts is really confusing.  Example is   being used for  ,   and (possibly?)  . \\n We could use Hashes to generate the background. For example, though they all would use the first two letters, then backgrounds of each might be: \\n \\n \\n \\n Not sure how to nicely show the images here.  But these are created by the  . I vote for the hover, or tooltips as well, but this can be nice quick indicator once you are familiar with the letters with their background.  -- do these explanations make sense?  Can I close this issue?   -- is this something we should transfer, or close?  Feels to me like a by-product of the fact that Python has prerequisites and practices defined that are not (yet) directly linked to live concepts/concept exercises. But there is also some confusing UI things ( ). Serious confusion as to what mastered means vs learned. One appears to be for concept, the other for practices, but I don't think that's really explained or indicated anywhere - or anywhere obvious. I think this is a valid remark and the cause of most of the confusion, right? But there is also some confusing UI things (that I'm sure have already been logged -- I just can't find them). This definitely warrants a separate issue. Feel free to open a new open if you can't find the older issue, we'll find the older one at some point."
      },
      {
        "issue_serial": "/exercism/python/issues/2848",
        "issue_name": "[CI]:  Consider/Discuss Tools for Verifying Fenced Code in Markdown Documents",
        "issue_label": "discussion ",
        "issue_content": "\\n          This came up in discussing PR #2838, so opening an issue here for longer discussion/evaluation.\\nWe currently \"hand validate\" example python code used in introduction.md, about.md, and instruction.md and similar documents.  This leads to errors where certain code will not work in the REPL, or syntax or other errors get made and published.  As we scale up exercises, this doesn't feel like a sustainable solution, hence this issue to propose, evaluate, and track possible tools and strategies for verifying code , and (possibly) adding that verification to the track CI.\\nBelow are three applicable libraries, but I'd warmly welcome more.  Of the three below, pmdoctest feels like the nicest solution, and I've run the comparisons concept exercise through it with reasonable results.  But I'd like to see if there are other strategies/libraries out there.\\ndoctest - this is the old-school original, but doesn't really work well in markdown fences.\\nmkcodes - have not tried this yet.\\npmdoctest - reasonably good, but requires some weird quirks with code fence language names and or excess >>>  in code fences to make parsing work.\\n      ",
        "issue_comment": "This came up in discussing PR  , so opening an issue here for longer discussion/evaluation. We currently \"hand validate\" example python code used in  ,  , and   and similar documents.  This leads to errors where certain code will not work in the REPL, or syntax or other errors get made and published.  As we scale up exercises, this doesn't feel like a sustainable solution, hence this issue to propose, evaluate, and track possible tools and strategies for verifying code , and (possibly) adding that verification to the track CI. Below are three applicable libraries, but I'd warmly welcome more.  Of the three below,   feels like the nicest solution, and I've run the   concept exercise through it with reasonable results.  But I'd like to see if there are other strategies/libraries out there.  - this is the old-school original, but doesn't really work well in markdown fences. \\n  - have not tried this yet. \\n  - reasonably good, but requires some weird quirks with code fence language names and or excess    in code fences to make parsing work.  \\xa0  Hi! üëãüèΩ    Welcome to the Exercism Python Repo! Thank you for opening an issue!   \\xa0    \\n \\n \\n \\u200b\\t\\t\\xa0 \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 ‚ó¶\\xa0 \\n\\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 \\n \\n \\n         \\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Run checks on the whole repo & submit a bunch of PRs. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 This creates longer review cycles & exhausts reviewers energy & time. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 It may also conflict with ongoing changes from other contributors. \\n\\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Insert only blank lines, make a closing bracket drop to the next line, change a word \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0to a synonym without obvious reason, or add trailing space that's not an  for the very end of text files. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Introduce arbitrary changes \"just to change things\" . \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0  \\n \\n \\n \\n  \\xa0  \\xa0  If you decide to help out with other  , you have our     üôåüèΩ. \\nAnything tagged with   and without   is up for grabs. \\nComment on the issue and we will reserve it for you.     "
      },
      {
        "issue_serial": "/exercism/python/issues/2821",
        "issue_name": "[Bank Account] Threading Tests Incorrectly Passing on Website, Correctly Failing Locally",
        "issue_label": "bug ",
        "issue_content": "\n          The bank account problem is meant to be \"hard\" with the difficulty coming from the need to lock the account during threading.\nI created a solution that passed all of the other tests and completely ignored the threading part (there was no code at all for that). On my local PC it passed all tests except the threading one, exactly as expected.\nExcept when I copy/pasted it to exercism and ran the tests there, all of the tests passed and I could submit my solution.\n(Edit: Also the Intro blurb for Bank Account says the solution needs to handle \"threading/processes\" depending on what the language is. Given Python supports both of these but the code is only using Threading, this should probably be changed to just threading).\n      ",
        "issue_comment": "The bank account problem is meant to be \"hard\" with the difficulty coming from the need to lock the account during threading. I created a solution that passed all of the other tests and completely ignored the threading part (there was no code at all for that). On my local PC it passed all tests except the threading one, exactly as expected. Except when I copy/pasted it to exercism and ran the tests there,   of the tests passed and I could submit my solution. (Edit: Also the Intro blurb for Bank Account says the solution needs to handle \"threading/processes\" depending on what the language is. Given Python supports both of these but the code is only using Threading, this should probably be changed to just threading).  \\xa0  Hi! üëãüèΩ    Welcome to the Exercism Python Repo! Thank you for opening an issue!   \\xa0    \\n \\n \\n \\u200b\\t\\t\\xa0 \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 ‚ó¶\\xa0 \\n\\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 \\n \\n \\n         \\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Run checks on the whole repo & submit a bunch of PRs. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 This creates longer review cycles & exhausts reviewers energy & time. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 It may also conflict with ongoing changes from other contributors. \\n\\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Insert only blank lines, make a closing bracket drop to the next line, change a word \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0to a synonym without obvious reason, or add trailing space that's not an  for the very end of text files. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Introduce arbitrary changes \"just to change things\" . \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0  \\n \\n \\n \\n  \\xa0  \\xa0  If you decide to help out with other  , you have our     üôåüèΩ. \\nAnything tagged with   and without   is up for grabs. \\nComment on the issue and we will reserve it for you.      Hi  , Thanks for logging this issue! \\nThe   is that this works \"as expected\" on a local environment, but does   behave \"as expected\" within Docker ( ).  Current working suspicion is that Docker is limiting the number of threads, thereby short circuiting the behavior needed to   a locking issue via  , with the side effect that the tests always succeed when the solution is tested via  . This one is tricky, and I have been thinking of soliciting help from folx with more experience in threading/processing within Docker to rework it.  Here are some details from a Slack discussion around this from a couple of months ago:   .  Screengrab below, if you cannot access Slack: Happy to hear your thoughts on how to go about fixing this one. As for the directions -- those are pulled from  , so changes would need to be proposed there, or we would need to work out Python-specific language for an addendum that pointed students toward using Threading. I had a friend complete the Bank Account one, and like mine, they made no attempt to do the locking thing. Their solution was broadly similar to mine. For them,   tests passed in their local environment(!), but the concurrency test correctly failed when the code was copy/pasted to exercism. So the exact opposite behaviour to what I was getting. We found similar issues when we were testing/investigating.  I could get a pass or a fail on my Mac by reducing thread count as noted in the Slack thread -- but only under some other OS load.  Pass/Fail wasn't exactly reliable.    had more reliable luck using Windows.  The website seemed more reliably bad/incorrect -- although 1 out of 4 would fail \"as expected\", with the other three passing. So definitely a case for someone enthusiastic about multithreading in Python to dig into.      This exercise might need a bit of a re-think testing-wise.  LMK if you'd like to take it on.  "
      },
      {
        "issue_serial": "/exercism/python/issues/2786",
        "issue_name": "[High Scores]:  Improve Test Cases / Exercise  for Mutability Discussions",
        "issue_label": "discussion ",
        "issue_content": "\n          I just did this exercise in php and python and I think that the Python version would require some improvement. I would like to discuss if it makes sense and eventually contribute via PR.\nexplanations\nWhen you jump in the exercise, the explanation are very small. the user faces 4 functions and without looking at the test I would have never understood what the last were about (https://github.com/exercism/python/blob/main/exercises/practice/high-scores/high_scores.py).\ndef latest(scores):\n    pass\n\ndef personal_best(scores):\n    pass\n\ndef personal_top_three(scores):\n    pass\n\ndef latest_after_top_three(scores):\n    pass\n\ndef scores_after_top_three(scores):\n    pass\nIn some exercises there is a complete description of the tasks and in other the function objective is described in the docstring (or bot). Would it make sens to add this for this exercise?\nlatest_after_top_three and scores_after_top_three\nI think these 2 functions are perfectly useless in Python. I actually validated the tests (\n  \n    \n      python/exercises/practice/high-scores/high_scores_test.py\n    \n    \n         Line 50\n      in\n      79515ff\n    \n  \n  \n    \n\n        \n          \n           def test_latest_score_after_personal_top_scores(self): \n        \n    \n  \n\n) with the following:\ndef latest_after_top_three(scores):\n    return latest(scores)\n\ndef scores_after_top_three(scores):\n    return scores\nFrom what I did in php I think that these function reflect the C like behavior where passing scores by reference in the latest or personal-top-three function could have altered the initial scores list.\nSo instead of having these functions, I think it would make more sense to test the scores variable after running personnal_top_three.\nlet me know what you think and more importantly let me know if I'lm wrong.\nPS: As mentioned at the top of the issue I'm happy to contribute\n      ",
        "issue_comment": "I just did this exercise in php and python and I think that the Python version would require some improvement. I would like to discuss if it makes sense and eventually contribute via PR. explanations When you jump in the exercise, the explanation are very small. the user faces 4 functions and without looking at the test I would have never understood what the last were about ( ). In some exercises there is a complete description of the tasks and in other the function objective is described in the docstring (or bot). Would it make sens to add this for this exercise?  and  I think these 2 functions are perfectly useless in Python. I actually validated the tests ( From what I did in php I think that these function reflect the C like behavior where passing   by reference in the latest or personal-top-three function could have altered the initial   list. So instead of having these functions, I think it would make more sense to test the   variable after running  . let me know what you think and more importantly let me know if I'lm wrong. PS: As mentioned at the top of the issue I'm happy to contribute  \\xa0  Hi! üëãüèΩ    Welcome to the Exercism Python Repo! Thank you for opening an issue!   \\xa0    \\n \\n \\n \\u200b\\t\\t\\xa0 \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 ‚ó¶\\xa0 \\n\\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 \\n \\n \\n         \\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Run checks on the whole repo & submit a bunch of PRs. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 This creates longer review cycles & exhausts reviewers energy & time. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 It may also conflict with ongoing changes from other contributors. \\n\\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Insert only blank lines, make a closing bracket drop to the next line, change a word \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0to a synonym without obvious reason, or add trailing space that's not an  for the very end of text files. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Introduce arbitrary changes \"just to change things\" . \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0  \\n \\n \\n \\n  \\xa0  \\xa0  If you decide to help out with other  , you have our     üôåüèΩ. \\nAnything tagged with   and without   is up for grabs. \\nComment on the issue and we will reserve it for you.      Hi   üëãüèΩ Thanks for filing this issue.  I think you bring up some valid points, some of them addressable, and some of them not addressable.  Bear with me, there is a bit to unpack here: When you jump in the exercise, the explanation are very small. the user faces 4 functions and without looking at the test I would have never understood what the last were about. This is \"by design\".  For Practice exercises, we give very minimal stubs.  The 'ethos' behind this is that it is \"test driven development\".  You   be looking at the tests to get a feel for what is expected. In some exercises there is a complete description of the tasks and in other the function objective is described in the docstring (or bot). Would it make sense to add this for this exercise? You are most likely seeing a difference between   exercises (these are the ones linked from the main \"nodes\" of the site   and   exercises (everything else).  are meant to zero in on one set of closely related Python Language concepts.  They have fairly particular solutions, and very detailed instructions and stub files.  The   for these exercises are hidden on the site, and are not intended to be referred to or read by the student prior to solving the problem -- hence the detailed stubs and task sets.  are much looser, and focus more on a problem that practices multiple techniques in the language and/or algorithms or design decisions.  For those problems,   is less directed, problem descriptions are less detailed ( ) and the test files are   to be looked at as part of the problem-solving process. Due to these differences in intent/process, we have not added detailed stubs nor type hinting to practice exercise files, and are not likely to do so.  We don't want to over-specify implementation, and we expect that students will (mostly) engage with mentors to talk through different design decisions and approaches. I think these 2 functions are perfectly useless in Python. I actually validated the tests. I agree with you.  As this exercise is currently implemented in Python ( ), these two functions make very little sense, and it would be easiest if we skipped both the functions and the associated tests all together, and left the discussion of mutability to a mentoring session. Python track tests for practice exercises are atuo-generated based on specifications from the   repo.  Descriptions and data for these exercises are shared across tracks, and so are declarative and rather non-specific.  Tracks can (and do) deviate -- but they have to do so through instruction and test appends -- OR -- the proposed change has to be accepted by 3 maintainers in problem-specifications and rolled out cross-track. So this isn't a matter of \"simply\" editing the test files or test cases -- for Python, we will need to edit: \\n \\n \\n \\n \\n So I am not against changing things.  In fact, I think this exercise might be better in its original version, where we asked students to make a class with various methods to track  , and pointed them in a direction where mutability had to be dealt with.  But any changes will require the work above. So I see several \"paths\" to addressing this issue: \\n \\n \\n \\n \\n Happy to discuss all of this further.  Also happy to have you PR the work.  But at this time, my vote would be for options 1 or 2 for expediency, and then a longer discussion about re-working the exercise. Hope that all makes sense -- and thank you for reading all this! woaw, that's a complex and very specific process. But that's great ! Thanks for enlightening me on the difference between Concept exercises and Practice exercises that's more clear now and I think forcing us to do some TDD is a good thing. On my issue, and as the process require a lot more work than I expected, I'll see how much time I can dedicate to it but I'll be glad to see what's the worklfow to participate in exercism. I'll keep you updated this WE On my issue, and as the process require a lot more work than I expected, I'll see how much time I can dedicate to it but I'll be glad to see what's the worklfow to participate in exercism. Just to be clear:  This complexity is for an existing   exercise and amending or changing the exercise or the tests. \\nThe process looks different for   exercises, and for  , or for small bug fixes or typos.  So there are other places to contribute to exercism and to the Python track that have a much less complicated workflow.     \\xa0 Feel free to hit us up ( ) if you are looking for other, and less involved ways of contributing.  -- Just checking in here.   I went ahead and backed out the mutability test cases and regenerated the test files in PR  .   This way, there is no need for effectively \"empty\" or \"useless\" functions in the exercise. But I am going to leave this issue open in case you'd like to PR additional test cases for Python that would get at discussing mutability issues.  Or if you would like to work on converting this exercise to one that uses a  . Just let I or   know -- we'd be happy to help you with test case appends, or any other questions you have. I think this exercise could be super useful for mutability, unfortunately, I'm swamped in webinars for work and preparation is so much time-consuming.... Thanks a lot for your PR and I agree we should leave it open, at some point I'll have time to breath and work a PR for this exercice!"
      },
      {
        "issue_serial": "/exercism/python/issues/2745",
        "issue_name": "[Pytest Tooling] Eliminate spurious Pytest warnings about unregistered marks",
        "issue_label": "bug ",
        "issue_content": "\n          When running the test suites for a Python exercise in a local environment, Pytest generates a set of warnings because each of the tests is annotated (decorated) with @pytest.mark.task. Because task isn't registered, the Pytest output includes lines such as\ndicts_test.py:50\n  /Users/xyz/Exercism/python/inventory-management/dicts_test.py:50: PytestUnknownMarkWarning: Unknown pytest.mark.task - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/mark.html\n    @pytest.mark.task(taskno=4)\n\nThis output is noisy and of little value to the developer.\nWould it be reasonable to add a pytest.ini or pyproject.toml file as described in the link above to each of the exercises?\n      ",
        "issue_comment": "When running the test suites for a Python exercise in a local environment, Pytest generates a set of warnings because each of the tests is annotated (decorated) with  . Because   isn't  , the Pytest output includes lines such as This output is noisy and of little value to the developer. Would it be reasonable to add a   or   file as described in the link above to each of the exercises? Taking a second look, there is the appropriate   file in this repo; however, it's not being copied into the individual exercise packages. Hi  , Thanks for logging this issue.  The warnings should vanish if you place the   file in the root of the exercise folder (e.g. under  .  You shouldn't need a copy in the individual exercise folders.  We're investigating why it isn't currently downloading with the exercises. Additionally, you can run pytest with   or use the   env var to get the warnings to disappear. Flagging this as a bug, since we haven't (yet) figured out how to get this to download with the CLI. After discussing this with  , the ultimate resolution will be to place our   file in  , so that it can be dowloaded via the CLI. However, that download behavior is not yet supported, so in the interim, we will have setup notes/instructions for students to download the file from the repo to copy into their root   folder, or have them create  an   file in that location. via PR  , made a copy of the   file in  .  Testing docs have been updated.  Once the file is downloadable via CLI, we can close this issue. Linking closed issue  , as the documentation is still not ideal around this issue.  Will be opening separate issues for updating documentation to make it clearer what needs to happen for students to set this up properly."
      },
      {
        "issue_serial": "/exercism/python/issues/2714",
        "issue_name": "[Practice Exercise Leveling]: Reassess \"Difficulty Level\" of Practice Exercises",
        "issue_label": "discussion smolder",
        "issue_content": "\\n          We've come to the stage where we'd like to re-examine and re-asses the stated difficulty level of our practice exercises.  Some exercises marked \"easy\" (e.g. Palindrome Products) feel as though they are much more difficult than others in the \"easy\" category.\\nBelow is a table with links to exercises, example solutions, and \"starred\" community solutions.  It's sorted in ascending difficulty from 1 (\"easy\") --> 8 (\"hard\"), and then alphabetical by exercise name within that.  The scale actually goes to 10, but there aren't any exercises (yet) that difficult.\\nplease note:  The following exercises are deprecated.  But if you've started or completed them, they will still show in the web UI for you:\\n\\nDeprecated Exercises\\n\\naccumulate\\nbinary\\nerror-handling\\nhexadecimal\\nnucleotide-count\\noctal\\nparallel-letter-frequency\\npoint-mutations\\npascals-triangle\\nproverb\\nstrain\\ntrinary\\n\\n\\n\\nFor easier \"voting\" or organizing, I've also put the information in a public Google Sheet  -- editing that markdown table is a no-op.\\nIt would be great if we could review these, and get some good takes on appropriate ordering -- based on mentoring experiences and working through the exercises.  Once we get to some sort of consensus, we can change the difficulty level of exercises where needed.\\nAnyone interested should put their \"ranking\" or \"rating\" comments in a personal column in the google sheet -- so we can eventually sort and see where we stand.  I've put in a few placeholder columns.  Feel free to add columns as needed -- and you can also sort, but please keep in mind that others will likely want to interact as well.  üòÑ\\nIf you are doing anything that significantly re-arranges things, just make a copy of the google sheet within the same file.\\nMany thanks in advance for all your time and effort!\\n\\n\\n\\n\\nExercise\\nDifficulty Level\\nExample & Community Solutions\\n\\n\\n\\n\\nHello World\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nAnagram\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nArmstrong Numbers\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nAtbash Cipher\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nBeer Song\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nBinary Search\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nBob\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nCollatz Conjecture\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nDiamond\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nDifference of Squares\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nEtl\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nFlatten Array\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nGigasecond\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nGrains\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nHigh Scores\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nHouse\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nISBN Verifier\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nLeap\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nList Ops\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nMatching Brackets\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nNth Prime\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nPangram\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nPerfect Numbers\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nPhone Number\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nPig Latin\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nPrime Factors\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nPythagorean Triplet\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nQueen Attack\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nResistor Color\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nResistor Color Duo\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nReverse String\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nRna Transcription\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nSay\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nSeries\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nSublist\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nSum Of Multiples\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nTriangle\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nTwo Fer\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nWordy\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nYacht\\nüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nCrypto Square\\nüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nDarts\\nüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nHamming\\nüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nMatrix\\nüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nMinesweeper\\nüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nPalindrome Products\\nüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nRaindrops\\nüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nRobot Name\\nüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nRobot Simulator\\nüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nRoman Numerals\\nüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nRotational Cipher\\nüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nRun Length Encoding\\nüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nSecret Handshake\\nüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nSieve\\nüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nSpace Age\\nüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nSpiral Matrix\\nüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nTranspose\\nüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nAcronym\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nAllergies\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nCircular Buffer\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nConnect\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nDiffie Hellman\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nDnD Character\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nGrade School\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nIsogram\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nKindergarten Garden\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nOCR Numbers\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nPoker\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nProtein Translation\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nRail Fence Cipher\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nRectangles\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nSaddle Points\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nScrabble Score\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nSimple Cipher\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nSimple Linked List\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nTree Building\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nTwelve Days\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nVariable Length Quantity\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nWord Count\\nüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nAll Your Base\\nüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nChange\\nüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nClock\\nüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nComplex Numbers\\nüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nFood Chain\\nüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nGo Counting\\nüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nGrep\\nüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nLargest Series Product\\nüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nLinked List\\nüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nLuhn\\nüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nMarkdown\\nüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nMeetup\\nüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nScale Generator\\nüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nAffine Cipher\\nüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nBinary Search Tree\\nüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nBook Store\\nüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nBowling\\nüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nCustom Set\\nüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nDot Dsl\\nüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nForth\\nüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nHangman\\nüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nKnapsack\\nüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nLedger\\nüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nRational Numbers\\nüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nTournament\\nüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nTwo Bucket\\nüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nZebra Puzzle\\nüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nAlphametics\\nüîπüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nReact\\nüîπüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nWord Search\\nüîπüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nZipper\\nüîπüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nDominoes\\nüîπüîπüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nPaasio\\nüîπüîπüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nSatellite\\nüîπüîπüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nSgf Parsing\\nüîπüîπüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nBank Account\\nüîπüîπüîπüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nPov\\nüîπüîπüîπüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\nRest Api\\nüîπüîπüîπüîπüîπüîπüîπüîπ\\nexample.py  |  by most ‚≠ê \\n\\n\\n\\n      ",
        "issue_comment": "We've come to the stage where we'd like to re-examine and re-asses the stated difficulty level of our practice exercises.  Some exercises marked \"easy\" (  Palindrome Products) feel as though they are much more difficult than others in the \"easy\" category. Below is a table with links to exercises, example solutions, and \"starred\" community solutions.  It's sorted in ascending difficulty from   (\"easy\") -->   (\"hard\"), and then alphabetical by exercise name within that.  The scale actually goes to 10, but there aren't any exercises (yet) that difficult. :  The following exercises are deprecated.  But if you've started or completed them, they will still show in the web UI for you: \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n For easier \"voting\" or organizing, I've also put the information in a public    --  . It would be   if we could review these, and get some good takes on appropriate ordering -- based on mentoring experiences and working through the exercises.  Once we get to some sort of consensus, we can change the difficulty level of exercises where needed. Anyone interested should put their \"ranking\" or \"rating\" comments in a   -- so we can eventually sort and see where we stand.  I've put in a few placeholder columns.  Feel free to add columns as needed -- and you can also sort, but please keep in mind that others will likely want to interact as well.   If you are doing anything that significantly re-arranges things, just make a copy of the google sheet within the same file. Many thanks in advance for all your time and effort! I'd like to suggest that \"Complex Numbers\" is definitely not \"Medium\". I mean it might be if you have that level of algebra, but I'd suggest that most people don't. Heck I don't even really understand the first sentence of the instructions! I appreciate difficulty is subjective, but I would also suggest this opportunity be used to add a few more difficulty levels. 3 isn't really granular enough. 5 might work better. \"Very Easy\" and \"Very Hard\" maybe?  to   point -- the levels are from 1-10, though nothing on the Python track has yet to reach difficulty 10.  It is one of the reasons we have this \"leveling\" bug open:  we have far too many exercises that are in the 1-4 range, and not enough at the other levels.  "
      },
      {
        "issue_serial": "/exercism/python/issues/2703",
        "issue_name": "[New Exercises] using sys.argv",
        "issue_label": "discussion smolder",
        "issue_content": "\\n          People coming from a GUI-only background will have a lot of fun getting used to the command-line. IMHO it would be a good idea to have them practice. I'd be happy to contribute one or more of my super-simple exercises:\\nhttps://code-maven.com/slides/python/exercise-rectangle-argv\\nhttps://code-maven.com/slides/python/exercise-calculator-argv\\nThis might require the understanding of lists, though one could explain how to use sys.argv and forward reference to list saying \"more detailed explanation will follow\".\\n      ",
        "issue_comment": "People coming from a GUI-only background will have a lot of fun getting used to the command-line. IMHO it would be a good idea to have them practice. I'd be happy to contribute one or more of my super-simple exercises: \\n This might require the understanding of lists, though one could explain how to use   and forward reference to list saying \"more detailed explanation will follow\".  \\xa0  Hi! üëãüèΩ    Welcome to the Exercism Python Repo! Thank you for opening an issue!   \\xa0    \\n \\n \\n \\u200b\\t\\t\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 -\\xa0If you'd also like to make a PR to   the issue after discussing it, \\n\\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 \\n \\n \\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Please    run checks on the whole repo & submit a bunch of PRs. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 This creates longer review cycles & exhausts reviewers energy & time. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 It may also conflict with ongoing changes from other contributors. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 For anything complicated or ambiguous,    --  we will likely welcome a PR from you. \\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Please keep in mind that inserting only blank lines, making a closing bracket drop to the next line, changing a \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0word to a synonym without obvious reason, adding trailing space that's not a  for the very end of text files, \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0and other \"changes just to change things\"  are   considered helpful, and will likely be closed by reviewers.  \\xa0  If you decide to help out with other  , you have our     üôåüèΩ. \\nAnything tagged with   and without   is up for grabs. \\nComment on the issue and we will reserve it for you.           \\xa0 Please keep in mind  . \\n  would be way down the concept tree, so dependancies wouldn't be an issue.  And I do think this might be an interesting concept exercise to add.  Writing tests for it could be rather involved, but an interesting problem to solve. However, if the purpose of this would be to get someone used to the command line (not Python), then I would recommend that they do some exercises on the   track. If we're talking the real-world use of Python for configuration scripts and other command-line mini-tools, then yes -- a concept exercise on the   module in general could be good.  But I think we'd need to really have a discussion around what that looked like.  We'd also need to figure out how we'd emulate different files systems/trees to cover all scenarios ( ).  Given that tests would run in docker (  -- specifically  ), it could be difficult to test for anything that wasn't dependent on that file system -- which sets up the student for trouble if they aren't using the same setup when coding. Feels like a better exercise might be one using   or   -- which would focus students on writing/thinking through accepting arguments from the command line, but not worrying about OS-specific implementations or parsing.   -- your thoughts on this?   I am not sure I understand why would writing tests be difficult? After having one or two exercises with plain   I'd also think there could be exercises with  . .  Please note the section where it says that the path names are  .  This is not about us testing a linux script.  This would be about us testing that the   has correctly written code that parses command line arguments.....using   OS. So, if you look at the official   for the  , it says it's  . So for a website with over 750.000 students, it will be quite dangerous to make tests for any OS and that is running on just linux. So, I agree with   on that we might want to have a look at  , which is in a production standpoint much better to use than  . So,   anything from the   library is really hard to guarantee to have accurate test results for all students on all platforms. I do think it can be important for a student to know how to write a proper  , but we might want to put more than a one simple   in a single exercise, especially so far down the concept tree. Given the plethora of higher level and more modern tools for handling commands and flags, e.g. click, would teaching argparse be the most value for time? The advantage I see with   is that it is (somewhat) higher level, and yet still included in the standard lib. But I agree that click (and possibly  ) are superior.  The issue with those is that they are third-party libs.  And we could very well include them and make exercises about them....but we should also thoroughly cover the used and useful parts of the standard lib first.  And no:  I am not advocating for a concept exercise on       . That being said -- there are some third-party libs that are just ... really standard.  Numpy and its relatives come to mind, as  does   and  .  So, it is well worth a thought or two.  But we do still have 20+ more basic exercises to get through, so this wouldn't pop to the top of the list for a while yet. I think as a concept one first needs to understand that the user can put values on the command line that appear as a   in a variable called   and all the other, higher-level, modules are just processing that list. As I read the python documentation, it seems to indicate that the content of   is system-dependent. The rest of values are not. They are just the values that were on the command line. I think the exercises should focus on that part of the list,  BTW in some other languages, the corresponding variable does not contain the name of program. It only contains the parameters. For example   in Perl contains "
      },
      {
        "issue_serial": "/exercism/python/issues/2698",
        "issue_name": "[CI]:  Consider More Detailed JinJa2 Template Linting and Checking",
        "issue_label": "discussion smolder",
        "issue_content": "\n          After doing numerous JinJa2 template PRs and test file regeneration (and getting caught by a nasty indentation bug), it feels like we could benefit from setting up some linting rules and checks for JinJa2 templates that are a bit more detailed and custom.  Right now, we check that the files will produce test files that can be linted by Black, but we don't really do much additional validation.\nMarking this as a discussion, since I haven't formed many more thoughts that that around this issue.  But I anticipate both more contributors and more changes to templates going forward, so thought I'd make a note here of what I have found so far:\ncurlylint\nJinjalint\n      ",
        "issue_comment": "After doing numerous JinJa2 template PRs and test file regeneration ( ), it feels like we could benefit from setting up some linting rules and checks for JinJa2 templates that are a bit more detailed and custom.  Right now, we check that the files will produce test files that can be linted by Black, but we don't   do much additional validation. Marking this as a discussion, since I haven't formed many more thoughts that that around this issue.  But I anticipate both more contributors and more changes to templates going forward, so thought I'd make a note here of what I have found so far: \\n  \\xa0  Hi! üëãüèΩ    Welcome to the Exercism Python Repo! Thank you for opening an issue!   \\xa0    \\n \\n \\n \\u200b\\t\\t\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 -\\xa0If you'd also like to make a PR to   the issue after discussing it, \\n\\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 \\n \\n \\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Please    run checks on the whole repo & submit a bunch of PRs. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 This creates longer review cycles & exhausts reviewers energy & time. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 It may also conflict with ongoing changes from other contributors. \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0 \\xa0\\xa0\\xa0\\xa0 For anything complicated or ambiguous,    --  we will likely welcome a PR from you. \\u200b\\t\\t\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0   Please keep in mind that inserting only blank lines, making a closing bracket drop to the next line, changing a word \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0to a synonym without obvious reason, adding trailing space that's not a  for the very end of text files, \\n\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0and other \"changes just to change things\"  are   considered helpful, and will likely be closed by reviewers.  \\xa0  If you decide to help out with other  , you have our     üôåüèΩ. \\nAnything tagged with   and without   is up for grabs. \\nComment on the issue and we will reserve it for you.           \\xa0 Please keep in mind  . \\n"
      },
      {
        "issue_serial": "/exercism/python/issues/2680",
        "issue_name": "[CONTRIBUTING]:  Update Configlet Instructions for New Sync Command",
        "issue_label": "maintainer action requiredmaintainer chore ",
        "issue_content": "\n          After PR #366 in the Configlet repo is merged, we need to update the \"Generating Practice Exercise Documents\" section of our CONTRIBUTING file to reflect the new way to sync/generate Practice Exercise documents.\n      ",
        "issue_comment": "After   in the Configlet repo is merged, we need to update the \"Generating Practice Exercise Documents\" section of our CONTRIBUTING file to reflect the new way to sync/generate Practice Exercise documents. Hi  , \nI do not think this is the right place for promotion of Discord servers. Please refrain from promoting any further. \nThank you, and have a nice day."
      },
      {
        "issue_serial": "/exercism/python/issues/2656",
        "issue_name": "[Supported Language Versions] Possible Move to Python >= 3.10 for Tooling and Exercises",
        "issue_label": "discussion on hold ‚úãüèΩ",
        "issue_content": "\n          Hi,\nusing match case syntax from python 3.10 raises errors and causes solution to fail.\nPlease, bump python version.\n      ",
        "issue_comment": "Hi, using   syntax from python 3.10 raises errors and causes solution to fail. Please, bump python version.   -- Bumping the version would be  a hard no at this time.  Python   is still brand-new.  We would have to upgrade all of our CI and tooling, as well as review multiple exercises and test files.  That is neither practical nor possible.  We're sorry, but you will have to practice   and other   goodies locally for now.  Python   support is (at minimum) 6 months or more away. I see. That is understandable. If a new installation of python is done, then at least on Windows, it is installed in version 3.10. I can imagine, thanks to the mess in python virtual managemenet tooling, that this could be a little unpleasant for new commers. What about   , as a temp solution, make a file check, that catches 3.10 syntax and gives a user a warning, that he should not use this version. It could be triggered by  , so that invalid python never reaches servers. It could either control the source code for syntax if no venv is present, or just take a look at venv what version is used. It would be somewhat better then throwing a syntax error. Hi  That's interesting.  I was unaware the \"default\" now for Windows was Python  .   That certainly sets them up for a lot of issues in the next few months.  Especially if they are using any scientific or data libraries.  Or any databases like Postgres.  There are also bound to be bugs in the Python language itself, so that feels like a bad idea. In any case, it shouldn't cause issues here on exercism unless a student were to   that the Python runtime ( ) or our tests ( ) didn't understand -- like you did with  . For a little more on the logic of why we're not on the bleeding edge, see this write up from  As for adjusting our CLI -- yes -- that would be a good idea.  The CLI   is in the process of being re-vamped for V3.  I think they may be re-working it in NIM.  Currently it's written in Go-lang. So you may want to raise an issue there about detecting and warning when there are version incompatibilities for the programming languages that exercism supports. I understand last october was not the time to upgrade to 3.10. However, perhaps now is the time? Can I help? By the way: I feel like this issue should be reopened and the label   removed, as at present it gives the impression this wil   be fixed ‚Äì which I do not think is the intention.    - I wouldn't expect a discussion on 3.10 before June, or possibly later.  There is just too much other work for the track and the tooling.  It's far more important that we get content, tests, and analysis in place for the track than it is we support the \"latest\" version of the language.  And given that the Python 3.10.2 was expedited because 3.10 had some unfortunate bugs...well...things need to settle a bit. If you would like to help, the best way to do so at this time is to create or improve track exercises, tests, and concepts -- or mentor. As for the   -- while it is fair to bring up the issue, it is not fair to imply that we'll be starting discussions or work on it on it any time soon.  So in re-opening this, I will be tagging it   and  ."
      },
      {
        "issue_serial": "/exercism/python/issues/2624",
        "issue_name": "[General: Slow Testing Exercises] Exercises that have Slow Running Tests that Time Out in the UI",
        "issue_label": "",
        "issue_content": "\\n          This is an open issue for Exercises that have reasonable solutions that \"time out\" under test in the UI.\\nTo be clear -- this is not for exercises that time out due to inefficient code, but ones that reasonably pass in in the runner locally or in docker, but take too long in the UI once the containers are spun up and configured.\\nFor now, we need to flag these as \"slow\", so that they don't run on the website and unnecessarily take up resources.\\nPlease add any additional exercises you think fit this criteria.  Thanks!\\n\\n Palindrome Products\\n Pythagorean Triplet\\n\\n      ",
        "issue_comment": "This is an open issue for Exercises that have reasonable solutions that \"time out\" under test in the UI. To be clear -- this is not for exercises that time out due to inefficient code, but ones that reasonably pass in in the runner locally or in docker, but take too long in the UI once the containers are spun up and configured. For now, we need to flag these as \"slow\", so that they don't run on the website and unnecessarily take up resources. Please add any additional exercises you think fit this criteria.  Thanks! As talked about in a previous Slack discussion, we should add notes to these exercises to the effect: : your solution must complete in under 10s for the tests to pass on the online editor and exercism website. Link to issues that also deal with this problem:    &  .  As suggested in the Elixir issue, since PyTest (our runner) supports a skip, we could perhaps turn off the data intensive tests, rather than the whole exercise, and add an append to the exercise to describe to the student what do to to run those \"heavy\" tests. IIRC, the tests for these exercises are auto-generated, so we may or may not need to play with   and/or the   template associated with them.  We'll cross that bridge once we have a set to look at.   Link to the docs that cover  \\nLink to "
      },
      {
        "issue_serial": "/exercism/python/issues/2586",
        "issue_name": "[New Exercise Idea]: Maybe functor",
        "issue_label": "discussion new exercise ",
        "issue_content": "\n          I don't know if this is too much Functional Programming for Python, but I wonder if a basic exercise to construct a Maybe functor (not monad) would be a welcome addition? I would be happy to have a go at writing this.\n      ",
        "issue_comment": "I don't know if this is too much Functional Programming for Python, but I wonder if a basic exercise to construct a Maybe functor (not monad) would be a welcome addition? I would be happy to have a go at writing this. HI   üëãüèΩ I did have to google        \\nBut I don't think a   would be \"too much\" functional programming for Python!      And I'd love you to \"have a go\". Would this be a practice exercise, or a concept exercise? If it is a concept exercise, we'll probably want to discuss it in a bit more detail, and I might want to enlist your help thinking through the chunking and progression of our \"functional\" exercises and the prerequisites. Right now, we have really big chunks:   ,  ,  ,  ,  ,  , and  .  Which is not optimal.  We'd probably want to break those down and take care to map functional language and techniques ( ,  ,  ,   etc) to the \"pythonic\" equivalent ( ,  ,  ,  , etc).   And yes, I am being a bit hand-wavy at the moment. If it is a practice exercise, we have a bit more flexibility, although we will (eventually) have to do the concept breakdown and functional ---> python mapping anyways. Let me know - and happy to have you as a contributor!   So, I guess it would be a practice exercise, since functors etc. aren't really central to learning Python. What do you think? Is that the correct criteria? Well... ( ) I don't know if the distinction should be that strict.  Python is   - and functional-style programming is very very popular. Of course, Python is   a functional language, but that doesn't mean that you cannot use functional constructs or style -- and indeed, there are many places where you can do so, and where it helps simplify or clarify code.  But in order to do it  , it takes knowing what tools Python gives you, and where you need to adapt, based on the underlying object model.  And there are places where you might need to make different choices for performance or other limits.  So it may very well be central to learning Python.   We'd want to be careful about terms and tools.  But ... that might be worth exploring on a \"functional python\" section/branch of the concept tree...... But you can also do a practice exercise.  I do not want to sign you up for work you don't want to do!  And also?  This does not have to happen all at once.  This can be a longer-term plan or feature.      We are in early days with the concept exercises, clearly. Ok. I think I should go away and read those contributing docs and then get back to you. Thanks   for your guidance. :) But also I would like to encourage you to work on some exercise that would test if one could implement functions that could handle weird edge cases like empty lists, strings or Nones. It would improve \"Error Handling\" syllabus."
      },
      {
        "issue_serial": "/exercism/python/issues/2379",
        "issue_name": "[Improve Practice Exercise] : Re-Implement [React] to use Functional Programming Paradigms",
        "issue_label": "discussion improve exercise smolder",
        "issue_content": "\\n          This is a placeholder issue (so that we don't forget our discussion) - and it is a bit hand-wavey on the details.  More notes to be added as we get into the work.\\nThe current implementation of React instructions | tests | example solution is OOP-focused and class based.  The current prerequisite list for the exercise is:\\n\\n\"basics\"\\n\"conditionals\"\\n\"comparisons\"\\n\"classes\"\\n\"class-customization\"\\n\"class-inheritance\"\\n\"descriptors\"\\n\"iteration\"\\n\"lists\"\\n\"list-methods\"\\n\"list-comprehensions\"\\n\"loops\"\\n\"raising-and-handling-errors\"\\n\"sequences\"\\n\"sets\"\\n\\nSince we have an abundance of OOP / class focused practice exercises (binary-search-tree,  go-counting, tree-building, meetup, complex-numbers, simple-cipher, allergies, phone-number, robot-name, clock, luhn, grade-school, kindergarten-garden, and matrix among others), but very few to none that really focus on functional programming paradigms (decorators, higher-order functions, functional-tools, functools, lambdas, et. al), we're going to re-write this particular exercise to be \"functional\" as opposed to \"OOP\".\\n      ",
        "issue_comment": "This is a placeholder issue (so that we don't forget our discussion) - and it is a bit hand-wavey on the details.  More notes to be added as we get into the work. The current implementation of     |   |   is OOP-focused and   based.  The current prerequisite list for the exercise is: \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Since we have an abundance of OOP /   focused practice exercises ( ), but very few to none that   focus on functional programming paradigms ( ,  ,  ,  ,  , et. al), we're going to re-write this particular exercise to be \"functional\" as opposed to \"OOP\"."
      },
      {
        "issue_serial": "/exercism/python/issues/2370",
        "issue_name": "[New Concept Exercise] : context-manager customization",
        "issue_label": "help wantednew exercise x:action/createx:knowledge/advancedx:module/concept-exercisex:size/large",
        "issue_content": "\\n          This issue describes how to implement  the  context-manager customization concept exercise for the python track.\\nGetting started\\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\\n\\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\\nWhat are those Weird Task Tags about?\\nBuilding Language Tracks: An Overview\\nWhat are Concepts?\\nConcept Exercise Specifications\\nConcept Specifications\\nExercism Formatting and Style Guide\\nExercism Markdown Specification\\nReputation\\n\\nGoal\\nThis concept exercise is meant to teach how to customize context- managers  (the machinery behind the  with keyword)  in Python.\\nLearning objectives\\n\\nReview what the with keyword is and what it does in Python\\n\\ncontext-handling & scope\\nsetup and teardown processes\\nmemory and resource allocation\\n\\n\\nUnderstand different context-manager Types and their uses\\nGet familiar with some of the  utilities & decorators in contextlib, and how they're used to customize a context-manager\\n\\n@contextlib.contextmanager\\ncontextlib.closing()\\ncontextlib.nullcontext()\\ncontextlib.suppress\\nconextlib.redirect_stdout()\\ncontextlib.redirect_stderr()\\nclass contextlib.ContextDecorator\\n\\n\\nUnderstand how customized context-managers are used with the with statement\\nImplement some of the most common use cases for managing / customizing management of resources with the with keyword (maybe some of the recipes listed in the docs?)\\n\\nfile opening/closing/processing\\ndatabase connectivity\\nerror handling\\nlogging\\ntesting\\n\\n\\n\\nOut of scope\\nWhile many of the below topics could be considered prerequisites or necessary building blocks for this exercise, we've marked them as \"out of scope\".  This means that we'd like you to focus instruction and examples  primarily on the topic of this concept (context managers and customization), and save any specific instruction or custom use of the topics below for exercises that focus on those concepts in detail.  For example:  @contextmanager requires a generator to act as a factory.  But this exercise should not teach the making of or customization of a generator, since generators have their own exercise.  The same goes for raising and handling errors, or using assert for testing.  The overall goal should be to use just enough to explain/instruct the student in the context-manager customization concept.  If you have additional questions, please reach out to one of the maintainers.\\n\\nasync versions of context-managers (we are leaving async-io and async off our concept list right now due to their complexity)\\nclasses  & class customization\\nclass-inheritance\\ncomprehensions\\ncomprehensions in lambdas\\ncoroutiens\\ndecorators\\nerror-handling\\nraising errors\\nfunctions and higher-order functions\\nfunctools and related map(), filter() and functools.reduce()\\ngenerators\\nlambdas\\nusing an assignment expression or \"walrus\" operator (:=)\\nenums\\ntesting and assert\\n\\nConcepts\\n\\nwith\\ncontext-managers\\ncontextlib\\n\\nPrerequisites\\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\\n\\nbasics\\nbools\\nclasses\\nclass customization\\nclass-inheritance\\ncomparisons\\nrich-comparisons\\ndecorators\\ndicts\\ndict-methods\\nraising-and-handling-errors\\nfunctions\\nfunctional tools\\ngenerators\\nhigher-order-functions\\niteration\\nlists\\nlist-methods\\nloops\\nnumbers\\nsequences\\nsets\\nstrings\\nstring-methods\\ntesting\\ntuples\\nwith-statement\\n\\nResources to refer to\\n\\nPython Docs: Compound Statements\\nPython Docs:  With Statement Context Managers\\nPython Docs: With Statement\\n\\nPython Docs: Reading and Writing Files\\n\\n\\nPython Docs:  Context Manager Types\\nPython Docs: contextlib\\nPython Module of the Week: contextlib\\neveryday.codes: Python Context Managers\\nPython Morsels:  Context-managers\\nDan Bader: Context Managers and the with statement in Python\\nSiv Scripts:  A Gentle Introduction to Context Managers\\nZeomag: The Truth about Context managers in Python\\nAbhinav Gupta:  Go Antipatterns - With* Context Managers\\nPEP 0343: The with Statement\\nPEP 0343:  Examples\\n\\n\\n\\nHints\\nFor more information on writing hints see hints\\n\\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\\n\\n\\n\\nlinks.json\\nFor more information, see concept links file\\n\\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\\n\\n\\n\\nConcept Description\\nPlease see the following for more details on these files:  concepts & concept exercises\\n\\n\\nConcept about.md\\n\\n\\nConcept file/issue: context-manager-customization directory with stubbed files -- Content is TBD and should be completed as part of this exercise creation. Decorator concept write-ups and associated files can be included in the PR for this issue, or as a separate PR linked to this issue.\\nFor more information, see Concept about.md\\n\\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\\n\\n\\n\\nConcept introduction.md\\nFor more information, see Concept introduction.md\\n\\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\\n\\n\\n\\nExercise introduction.md\\nFor more information, see Exercise introduction.md\\n\\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\\n\\n\\n\\nTest-runner\\nNo changes required to the Python Test Runner at this time.\\nRepresenter\\nNo changes required to the Python Representer at this time.\\nAnalyzer\\nNo changes required to the Python Analyzer at this time.\\nExercise Metadata - Track\\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of this Python repo.\\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\\n\\nExercise UUID :  a59b4983-29b3-4519-bb86-eb3de45c89b0\\nconcepts should be filled in from the Concepts section in this issue\\nprerequisites should be filled in from the Prerequisites section in this issue\\n\\nExercise Metadata Files Under  .meta/config.json\\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\\n\\n\\n.meta/config.json - see this link for the fields and formatting of this file.\\n\\n\\n.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\\n\\n\\nImplementation Notes\\n\\n\\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.  We run all our examplar.py files through PyLint, but do not require module docstrings.  We do require function docstrings similar to PEP257.  See this concept exercise exemplar.py for an example.\\n\\n\\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\\n\\n\\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\\n\\nAll asserts should contain a \"user friendly\" failure message (these will display on the webiste).\\nWe use a PyTest custom mark to link test cases to exercise task numbers.\\nWe also use unittest.subtest to parameterize test input where/when needed.\\nHere is an example testfile that shows all three of these in action.\\n\\n\\n\\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\\n\\n\\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\\n\\n\\nHelp\\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\\n      ",
        "issue_comment": "This issue describes how to implement  the    concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Goal This concept exercise is meant to teach how to customize    ( )  in Python. Learning objectives \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Out of scope While many of the below topics could be considered prerequisites or necessary building blocks for this exercise, we've marked them as \"out of scope\".  This means that we'd like you to focus instruction and examples  primarily on the topic of   concept ( ), and save any specific instruction or custom use of the topics below for exercises that focus on those concepts in detail.  For example:    requires a   to act as a factory.  But this exercise should not teach the making of or customization of a  , since   have their own exercise.  The same goes for   and   errors, or using   for testing.  The overall goal should be to use   to explain/instruct the student in the   customization concept.  If you have additional questions, please reach out to one of the maintainers. \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Concepts \\n \\n \\n \\n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Resources to refer to \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Hints For more information on writing hints see  \\n \\n \\n For more information, see  \\n \\n \\n \\n Concept Description Please see the following for more details on these files:    &  \\n Concept  \\n :   --   and should be completed as part of this exercise creation. Decorator concept write-ups and associated files can be included in the PR for this issue, or as a separate PR linked to this issue. For more information, see  \\n \\n \\n Concept  For more information, see  \\n \\n \\n Exercise  For more information, see  \\n \\n \\n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the  . You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \\n \\n \\n \\n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  \\n  - see   for the fields and formatting of this file. \\n  - see   for the formatting of this file.  Please use the  ,  , ,   and ,    sections  from this issue. \\n Implementation Notes \\n Code in the   file should    We run all our   files through PyLint, but do not require module docstrings.  We   require function docstrings similar to  .  See   for an example. \\n Please   comprehensions, generator expressions, or other syntax not previously covered.  Please also follow   guidelines. \\n In General, tests should be written using   and the test file should be named  . \\n \\n \\n \\n \\n While we do use   as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature. \\n Our markdown and JSON files are checked against   .  We recommend   and running it prior to submitting your PR  to avoid any CI errors. \\n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. The   link in getting started is broken at the moment. URL:   - Thanks for the head's up.      These are fixed in this now, and we'll update the other issues as we get time."
      },
      {
        "issue_serial": "/exercism/python/issues/2369",
        "issue_name": "[New Concept Exercise] : with statement",
        "issue_label": "help wantednew exercise x:action/createx:knowledge/advancedx:module/concept-exercisex:size/large",
        "issue_content": "\\n          This issue describes how to implement  the  with concept exercise for the python track.\\nGetting started\\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\\n\\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\\nWhat are those Weird Task Tags about?\\nBuilding Language Tracks: An Overview\\nWhat are Concepts?\\nConcept Exercise Specifications\\nConcept Specifications\\nExercism Formatting and Style Guide\\nExercism Markdown Specification\\nReputation\\n\\nGoal\\nThis concept exercise is meant to teach an understanding/use of the with keyword and  general context-handling  in Python.\\nLearning objectives\\n\\nWhat the with keyword is and what it does in Python\\n\\ncontext-handling & scope\\nsetup and teardown processes\\nmemory and resource allocation\\n\\n\\nHow to use the with keyword\\nMost common use cases for managing resources with the with keyword\\n\\nfile opening/closing/processing\\ndatabase connectivity\\nerror handling\\nlogging\\ntesting\\nthread management (threading.Lock())\\n\\n\\nGotchas and drawbacks of using with\\n\\nOut of scope\\n\\nclasses  & class customization\\nclass-inheritance\\ncomprehensions\\ncomprehensions in lambdas\\ncoroutiens\\ndecorators\\nerror-handling beyond examples (error handling will have its own detailed exercise)\\nraising errors beyond examples (error raising will have its own detailed exercise)\\nfunctions and higher-order functions  beyond what might be needed to work with with\\nfunctools and related map(), filter() and functools.reduce()\\ngenerators beyond what might be needed to work with with (they have their own exercise )\\nlambdas\\nusing an assignment expression or \"walrus\" operator (:=)\\nenums\\ntesting and assert (these will have their own detailed exercise)\\nThe csv module (this will get its own exercise)\\n\\nConcepts\\n\\nwith statement\\ncontext-management\\ncompound statements\\n\\nPrerequisites\\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\\n\\nbasics\\nbools\\ncomparisons\\ndicts\\ndict-methods\\nfunctions\\nfunctional-tools\\ngenerators\\nhigher-order-functions\\niteration\\nlists\\nlist-methods\\nloops\\nnumbers\\nsequences\\nsets\\nstrings\\nstring-methods\\ntuples\\n\\nResources to refer to\\n\\nPython Docs: Compound Statements\\nPython Docs:  With Statement Context Managers\\nPython Docs: With Statement\\n\\nPython Docs: Reading and Writing Files\\n\\n\\nPython Docs:  Context Manager Types\\nDan Bader: Context Managers and the with statement in Python\\nSiv Scripts:  A Gentle Introduction to Context Managers\\nZeomag: The Truth about Context managers in Python\\nTrey Hunner: The Many Flavors of mock.patch -- section on context handlers\\nPEP 0343: The with Statement\\nPEP 0343:  Examples\\n\\n\\n\\nHints\\nFor more information on writing hints see hints\\n\\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\\n\\n\\n\\nlinks.json\\nFor more information, see concept links file\\n\\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\\n\\n\\n\\nConcept Description\\nPlease see the following for more details on these files:  concepts & concept exercises\\n\\n\\nConcept about.md\\nConcept file/issue: There is currently no issue or files for the concept.  They are TBD.\\nFor more information, see Concept about.md\\n\\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\\n\\n\\n\\nConcept introduction.md\\nFor more information, see Concept introduction.md\\n\\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\\n\\n\\n\\nExercise introduction.md\\nFor more information, see Exercise introduction.md\\n\\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\\n\\n\\n\\nTest-runner\\nNo changes required to the Python Test Runner at this time.\\nRepresenter\\nNo changes required to the Python Representer at this time.\\nAnalyzer\\nNo changes required to the Python Analyzer at this time.\\nExercise Metadata - Track\\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of the Python repo.\\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\\n\\nExercise UUID :  2009369e-5c74-40ac-b3f7-a9cd5716285c\\nconcepts should be filled in from the Concepts section in this issue\\nprerequisites should be filled in from the Prerequisites section in this issue\\n\\nExercise Metadata Files Under  .meta/config.json\\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\\n\\n.meta/config.json - see this link for the fields and formatting of this file.\\n.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\\n\\nImplementation Notes\\n\\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.\\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\\n\\nHelp\\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\\n      ",
        "issue_comment": "This issue describes how to implement  the    concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n \n \n \n \n \n Goal This concept exercise is meant to teach an understanding/use of the   keyword and  general    in Python. Learning objectives \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Out of scope \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Concepts \n \n \n \n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Resources to refer to \n \n \n \n \n \n \n \n \n \n \n \n \n \n Hints For more information on writing hints see  \n \n \n For more information, see  \n \n \n \n Concept Description Please see the following for more details on these files:    &  \n Concept  : There is currently no issue or files for the concept.   For more information, see  \n \n \n Concept  For more information, see  \n \n \n Exercise  For more information, see  \n \n \n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the root of the Python repo. You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \n \n \n \n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  \n \n \n Implementation Notes \n \n \n \n \n \n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "issue_serial": "/exercism/python/issues/2368",
        "issue_name": "[New Concept Exercise] : itertools",
        "issue_label": "help wantednew exercise x:action/createx:knowledge/advancedx:module/concept-exercisex:size/large",
        "issue_content": "\\n          This issue describes how to implement  the  itertools concept exercise for the python track.\\nGetting started\\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\\n\\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\\nWhat are those Weird Task Tags about?\\nBuilding Language Tracks: An Overview\\nWhat are Concepts?\\nConcept Exercise Specifications\\nConcept Specifications\\nExercism Formatting and Style Guide\\nExercism Markdown Specification\\nReputation\\n\\nGoal\\nThis concept exercise is meant to teach an understanding/creation/use of the itertools module  in Python.\\nLearning objectives\\nLearn more about iteration tools the Python Standard Library provides through the itertools module.\\nBuild and understanding of and use the following functions  from the module, as well as practicing some of the recipes included :\\n\\nAt least one of the infinite itertators count(),cycle(),, or repeat()\\naccumulate()\\nproduct()\\nchain() & chain.from_iterable()\\ngroupby()\\nislice()\\nzip_longest() and the zip() built-in\\npermutations()\\ncombinations()\\n\\nOut of scope\\n\\nclasses  & class customization beyond the use of the itertools  methods.\\nclass-inheritance beyond what is needed to customize iteration using itertools\\ncomprehensions beyond what is needed to work with itertools\\ncomprehensions in lambdas\\ncoroutines\\ndecorators beyond what is needed to work with itertools\\nfunctions and higher-order functions  beyond what might be needed to work with itertools\\nfunctools and related map(), filter() and functools.reduce()(they have their own exercise which is a prerequisite to this one)\\ngenerators beyond what might be needed to work with itertools (they have their own exercise which is a prerequisite to this one)\\nlambdas  beyond what might be needed to work with itertools\\nusing an assignment expression or \"walrus\" operator (:=)\\nclass decorators\\nenums\\n\\nConcepts\\n\\niteration\\niterators\\nitertools\\n\\nPrerequisites\\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\\n\\nbasics\\nbooleans\\ncomparisons\\nrich-comparisons\\ndicts\\ndict-methods\\nfunctions\\nfunctional tools\\ngenerators\\nhigher-order functions\\nIdentity methods is and is not\\niteration\\nlists\\nlist-methods\\nloops\\nnumbers\\nsequences\\nsets\\nstrings\\nstring-methods\\ntuples\\n\\nResources to refer to\\n\\nPython Docs: iterator definition | Python Docs: iterator types\\n\\nPython Functional Programming HOWTO: Iterators\\nTrey Hunner: The Iterator Protocol: How for Loops Work in Python\\nDan Bader: Python Iterators - A Step-by-Step Introduction\\nPython Docs: sequence\\n\\n\\nPython Docs: itertools module\\nPython Docs:itertools Recipes\\nPython Module of the Week: itertools\\nFlorian Dahlitz:  Python Introduction to Itertools\\nReal Python: Itertools in Python 3, By Example\\nPython Docs: eumulating container types\\n\\nTrey Hunner: How to make an iterator in Python\\nPython Patterns Guide: Gang of Four iterator Pattern\\n\\n\\n\\n\\n\\nHints\\nFor more information on writing hints see hints\\n\\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\\n\\n\\n\\nlinks.json\\nFor more information, see concept links file\\n\\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\\n\\n\\n\\nConcept Description\\nPlease see the following for more details on these files:  concepts & concept exercises\\n\\n\\nConcept about.md\\nConcept file/issue: There is currently no issue or files for the concept.  They are TBD.\\nFor more information, see Concept about.md\\n\\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\\n\\n\\n\\nConcept introduction.md\\nFor more information, see Concept introduction.md\\n\\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\\n\\n\\n\\nExercise introduction.md\\nFor more information, see Exercise introduction.md\\n\\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\\n\\n\\n\\nTest-runner\\nNo changes required to the Python Test Runner at this time.\\nRepresenter\\nNo changes required to the Python Representer at this time.\\nAnalyzer\\nNo changes required to the Python Analyzer at this time.\\nExercise Metadata - Track\\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of the Python repo.\\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\\n\\nExercise UUID :  c4620b29-0db0-4541-8cfe-7048fab27f7f\\nconcepts should be filled in from the Concepts section in this issue\\nprerequisites should be filled in from the Prerequisites section in this issue\\n\\nExercise Metadata Files Under  .meta/config.json\\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\\n\\n.meta/config.json - see this link for the fields and formatting of this file.\\n.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\\n\\nImplementation Notes\\n\\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.\\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\\n\\nHelp\\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\\n      ",
        "issue_comment": "This issue describes how to implement  the    concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n \n \n \n \n \n Goal This concept exercise is meant to teach an understanding/creation/use of the   module  in Python. Learning objectives Learn more about   tools the Python Standard Library provides through the   module. Build and understanding of and use the following functions  from the module, as well as practicing some of the   included : \n \n \n \n \n \n \n \n \n \n Out of scope \n \n \n \n \n \n \n \n \n \n \n \n \n \n Concepts \n \n \n \n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Resources to refer to \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Hints For more information on writing hints see  \n \n \n For more information, see  \n \n \n \n Concept Description Please see the following for more details on these files:    &  \n Concept  : There is currently no issue or files for the concept.   For more information, see  \n \n \n Concept  For more information, see  \n \n \n Exercise  For more information, see  \n \n \n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the root of the Python repo. You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \n \n \n \n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  \n \n \n Implementation Notes \n \n \n \n \n \n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "issue_serial": "/exercism/python/issues/2367",
        "issue_name": "[New Concept Exercise] : iterators",
        "issue_label": "help wantednew exercise x:action/createx:knowledge/advancedx:module/concept-exercisex:size/large",
        "issue_content": "\\n          This issue describes how to implement  the  iterators concept exercise for the python track.\\nGetting started\\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\\n\\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\\nWhat are those Weird Task Tags about?\\nBuilding Language Tracks: An Overview\\nWhat are Concepts?\\nConcept Exercise Specifications\\nConcept Specifications\\nExercism Formatting and Style Guide\\nExercism Markdown Specification\\nReputation\\n\\nGoal\\nThis concept exercise is meant to teach an understanding/creation/use of iterators  in Python.\\nLearning objectives\\nLearn more about how looping / iteration and the iterator protocol work in Python, and the options available for creating & customizing iterators.\\n\\nHow loops in Python implement the iterator protocol\\niteration  \"under the covers\"\\nHow iterables are defined\\nUnderstand and use the built-in iter() to return an iterator\\nCreate/use one or more custom iterators via defining a class\\nUnderstand how class -created iterators relate to generators, and the pros and cons of each approach\\n\\nOut of scope\\n\\nclasses  & class customization beyond the use of the iterator dunder methods and iterator protocol\\nclass-inheritance beyond what is needed to customize iteration for a container type or other class\\ncomprehensions\\ncomprehensions in lambdas\\ncoroutines\\ndecorators\\nfunctools and related map(), filter() and functools.reduce()\\ngenerators in-depth as a specific form of iterators (these have their own exercise)\\nhigher-order functions\\nlambdas\\nusing an assignment expression or \"walrus\" operator (:=)\\nclass decorators\\nenums\\n\\nConcepts\\n\\nloops\\niteration\\niterators & iterator types\\niterator protocol\\niterables\\nenumeration\\n\\nPrerequisites\\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\\n\\nbasics\\nbooleans\\nclasses\\ncomparisons\\nrich-comparisons\\ndecorators\\ndescriptors\\ndicts\\ndict-methods\\nfunctions\\nhigher-order-functions\\nlists\\nlist-methods\\nnumbers\\nsequences\\nsets\\nstrings\\nstring-methods\\ntuples\\n\\nResources to refer to\\n\\nPython Docs: iterator definition | Python Docs: iterator types\\n\\nPython Docs: iterable\\nPython Tutorial: iterators | Python Functional Programming HOWTO: Iterators\\nPython Docs: sequence\\nPython Docs: the for statement\\nTrey Hunner: The Iterator Protocol: How for Loops Work in Python\\nDan Bader: Python Iterators - A Step-by-Step Introduction\\n\\n\\niter()\\nPython Docs: eumulating container types\\n\\nTrey Hunner: How to make an iterator in Python\\nPython Patterns Guide: Gang of Four iterator Pattern\\n\\n\\nPython Docs C-API: Iterator Protocol\\nPython Docs C-API: Iterator Objects\\n\\n\\n\\nHints\\nFor more information on writing hints see hints\\n\\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\\n\\n\\n\\nlinks.json\\nFor more information, see concept links file\\n\\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\\n\\n\\n\\nConcept Description\\nPlease see the following for more details on these files:  concepts & concept exercises\\n\\n\\nConcept about.md\\nConcept file/issue: There is currently no issue or files for the concept.  They are TBD.\\nFor more information, see Concept about.md\\n\\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\\n\\n\\n\\nConcept introduction.md\\nFor more information, see Concept introduction.md\\n\\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\\n\\n\\n\\nExercise introduction.md\\nFor more information, see Exercise introduction.md\\n\\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\\n\\n\\n\\nTest-runner\\nNo changes required to the Python Test Runner at this time.\\nRepresenter\\nNo changes required to the Python Representer at this time.\\nAnalyzer\\nNo changes required to the Python Analyzer at this time.\\nExercise Metadata - Track\\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of the Python repo.\\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\\n\\nExercise UUID :  087e3eec-33f4-4b7e-8335-a5ee9ddda9f3\\nconcepts should be filled in from the Concepts section in this issue\\nprerequisites should be filled in from the Prerequisites section in this issue\\n\\nExercise Metadata Files Under  .meta/config.json\\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\\n\\n.meta/config.json - see this link for the fields and formatting of this file.\\n.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\\n\\nImplementation Notes\\n\\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.\\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\\n\\nHelp\\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\\n      ",
        "issue_comment": "This issue describes how to implement  the    concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n \n \n \n \n \n Goal This concept exercise is meant to teach an understanding/creation/use of    in Python. Learning objectives Learn more about how   /   and the   work in Python, and the options available for creating & customizing  . \n \n \n \n \n \n \n Out of scope \n \n \n \n \n \n \n \n \n \n \n \n \n \n Concepts \n \n \n \n \n \n \n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Resources to refer to \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Hints For more information on writing hints see  \n \n \n For more information, see  \n \n \n \n Concept Description Please see the following for more details on these files:    &  \n Concept  : There is currently no issue or files for the concept.   For more information, see  \n \n \n Concept  For more information, see  \n \n \n Exercise  For more information, see  \n \n \n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the root of the Python repo. You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \n \n \n \n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  \n \n \n Implementation Notes \n \n \n \n \n \n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "issue_serial": "/exercism/python/issues/2366",
        "issue_name": "[New Concept Exercise] : functools",
        "issue_label": "claimed new exercise x:action/createx:knowledge/intermediatex:module/concept-exercisex:size/largex:status/claimed",
        "issue_content": "\\n          This issue describes how to implement  the  functools concept exercise for the python track.\\nGetting started\\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\\n\\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\\nWhat are those Weird Task Tags about?\\nBuilding Language Tracks: An Overview\\nWhat are Concepts?\\nConcept Exercise Specifications\\nConcept Specifications\\nExercism Formatting and Style Guide\\nExercism Markdown Specification\\nReputation\\n\\nGoal\\nThis concept exercise is meant to teach an understanding/use of functools (e.g,  the functools module)  in Python.\\nLearning objectives\\nLearn more about the functional tools the Python Standard Library provides through the functools module.\\nBuild and understanding of and use the following methods and decorators from the module:\\n\\nfunctools.partial()\\n\\npartial.func\\npartial.args\\npartial.keywords\\n\\n\\nfunctools.update_wrapper()\\nfunctools.cache()\\n@functools.cached_property() (this seems better in class_customization)\\n@functools.lru_cache()\\n@functools.total_ordering (this method seems more appropriate in the rich comparisons exercise)\\n@functools.singledispatch\\n\\n@<function>.register()\\n\\n\\n@functools.wraps()\\nclass functools.partialmethod()\\nclass functools.singledispatchmethod()\\n\\nOut of scope\\n\\nclasses  & class customization beyond the direct use of the class methods in this module.\\ncomprehensions\\ncomprehensions in lambdas\\ndecorators (these have their own exercise.  See issue #2356 )\\nmap(), filter() or functools.reduce() in a comprehension\\nfunctools.reduce()(this was already covered with map() and filter())\\ngenerators\\nusing an assignment expression or \"walrus\" operator (:=) in a lambda\\nclass decorators beyond the ones described in this module.\\nenums\\n\\nConcepts\\n\\nfunctional tools in python\\nfunctools module\\ngeneric functions\\ndecorators\\nhigher-order functions\\npartial objects in python/partial evaluation in python\\nsingle dispatch\\n\\nPrerequisites\\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\\n\\nbasics\\nbools\\nclasses\\nclass-customization\\nclass-components\\ncomparisons\\nrich-comparisons\\ndecorators\\ndescriptors\\ndicts\\ndict-methods\\nfunctions\\nfunction-arguments\\nhigher-order-functions\\niteration\\nlists\\nlist-methods\\nnumbers\\nsequences\\nsets\\nstrings\\nstring-methods\\ntuples\\n\\nResources to refer to\\n\\nPython Docs: Defining Functions\\nPython Docs: functional programming HOWTO\\nPython Docs: functools module\\nPthon Module of the Week:  functools - Tools for Maniputlating Fuctions\\nFlorian Dahlitz: Introduction to Python's Functools Module\\nPyDanny: Python Partials are Fun!\\nComposing Programs: Higher-Order Functions\\nTrey Hunner:  Ist it a Class or a Function?  It's a callable!\\nbuilt-ins: Python Docs\\n\\nmap() & filter()\\nany() & all()\\nmin() & max()\\nsum()\\n\\n\\nReal Python: Functional Programming in Python: When and How to Use it\\n\\n\\n\\nHints\\nFor more information on writing hints see hints\\n\\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\\n\\n\\n\\nlinks.json\\nFor more information, see concept links file\\n\\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\\n\\n\\n\\nConcept Description\\nPlease see the following for more details on these files:  concepts & concept exercises\\n\\n\\nConcept about.md\\nConcept file/issue: There is currently no issue or files for the concept.  They are TBD.\\nFor more information, see Concept about.md\\n\\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\\n\\n\\n\\nConcept introduction.md\\nFor more information, see Concept introduction.md\\n\\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\\n\\n\\n\\nExercise introduction.md\\nFor more information, see Exercise introduction.md\\n\\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\\n\\n\\n\\nTest-runner\\nNo changes required to the Python Test Runner at this time.\\nRepresenter\\nNo changes required to the Python Representer at this time.\\nAnalyzer\\nNo changes required to the Python Analyzer at this time.\\nExercise Metadata - Track\\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of the Python repo.\\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\\n\\nExercise UUID :  276fabf5-e7eb-4736-b0fe-a73e02428606\\nconcepts should be filled in from the Concepts section in this issue\\nprerequisites should be filled in from the Prerequisites section in this issue\\n\\nExercise Metadata Files Under  .meta/config.json\\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\\n\\n.meta/config.json - see this link for the fields and formatting of this file.\\n.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\\n\\nImplementation Notes\\n\\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.\\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\\n\\nHelp\\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\\n      ",
        "issue_comment": "This issue describes how to implement  the    concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Goal This concept exercise is meant to teach an understanding/use of   (e.g,  the  )  in Python. Learning objectives Learn more about the functional tools the Python Standard Library provides through the   module. \\nBuild and understanding of and use the following methods and decorators from the module: \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Out of scope \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Concepts \\n \\n \\n \\n \\n \\n \\n \\n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Resources to refer to \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Hints For more information on writing hints see  \\n \\n \\n For more information, see  \\n \\n \\n \\n Concept Description Please see the following for more details on these files:    &  \\n Concept  : There is currently no issue or files for the concept.   For more information, see  \\n \\n \\n Concept  For more information, see  \\n \\n \\n Exercise  For more information, see  \\n \\n \\n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the root of the Python repo. You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \\n \\n \\n \\n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  \\n \\n \\n Implementation Notes \\n \\n \\n \\n \\n \\n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. Hey, I just want to work on this . But I am a newbee to open source. So, may I try to built it? Hi   üëãüèΩ We're delighted you'd like to take this on!   I'll assign this issue to you and remove the [help wanted] tag. And don't worry -- we're happy to help you through the process.  You can always ask questions here ( ), and we have loads of documents that outline what's required.  Make sure to go over those spec docs carefully.      But at the same time, don't get intimidated - it if you take the tasks one at a time and work at a steady pace, the whole thing will come together nicely. Additionally, I am happy to write up the concept docs ( ) and provide feedback or collaborate with you prior to you submitting a PR for formal review. Just ping with questions - and have fun exploring and writing!        Thanks , I will let you know when I need some help. Hey, I want to know that I have to write about these concepts. functional tools in python \\nfunctools module \\ngeneric functions \\ndecorators \\nhigher-order functions \\npartial objects in python/partial evaluation in python \\nsingle dispatch hey anyone is here. Yes.  I saw this \"Hey, \" message when it got posted.  It was, to me, a declaration, and so no request of action was recognized. So, what can we help you with   ?   -- My sincere apologies!  I have been really swamped with work, and this slipped through the cracks.   , we do need to write about those concepts.  But if you'd like, I can do the concept write-up, and you can focus on the exercise itself.  Just let me know how you'd like to proceed. Here is   of what a concept write-up looks like.  There is a longer   document, and a shorter \"summary\" with the  .  There is also a   document for learning links for students to explore for a deeper understanding. By contrast,   of the related concept exercise.  Note that there is an introduction -- but it can be pulled from the concept docs if you don't want to do a custom one. We try to focus the concept docs on the topics that the exercise also covers.  The   is available before a student completes the concept exercise, and the   displays after.  The about often also covers additional details and applications of the concepts, and maybe some thought-provoking points or topics. Beyond that, it's helpful to go through the links at the top of this issue for specifications, requirements, and other how-tos.  I believe they're fairly up to date. Let me know if you have additional questions or issues.  I won't have time before this weekend, but can work on a concept writeup draft then, if you don't want to write one. Best, No problem    ,I would like to help in writing concept. hey I have wrote the introduction part of the concept , please let me know if some improvements required."
      },
      {
        "issue_serial": "/exercism/python/issues/2365",
        "issue_name": "[New Concept Exercise] : descriptors",
        "issue_label": "help wantednew exercise x:action/createx:knowledge/advancedx:module/concept-exercisex:size/large",
        "issue_content": "\n          This issue describes how to implement the descriptors concept exercise for the python track.\nGetting started\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\n\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\nWhat are those Weird Task Tags about?\nBuilding Language Tracks: An Overview\nWhat are Concepts?\nConcept Exercise Specifications\nConcept Specifications\nExercism Formatting and Style Guide\nExercism Markdown Specification\nReputation\n\nGoal\nThis concept exercise is meant to teach an understanding/creation/use of descriptors  in Python.\nLearning objectives\n\nmore fully understand the uses (and possible abuses) of classes in Python\nmore fully understand the options available for class customization in Python through descriptors\n\nwhat the descriptor protocol** is**\nwhat the descriptor protocol does for class & object members, properties, and  attributes\nhow descriptors are used to simplify APIs for end-users in frameworks and libraries\nhow descriptors relate to @classmethod @staticmethod and @property  (they're decorators that make descriptors)\nhow descriptors relate to private variables, name mangling  and attribute access\ndata descriptors\nnon-data descriptors\n\n\n\nOut of scope\n\ncomprehensions\ngenerators\ncoroutines\nusing a class as a decorator\ntype annotaions\n\nConcepts\n\nclasses\nclass attributes\nclass members\ndescriptors\n\nPrerequisites\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\n\nbasics\nbooleans\nclasses\nclass-customization\nclass-composition\nclass-inheritance\ncomparisons\ndecorators\ndicts\niteration\nlists\nnumbers\nsequences\nsets\nstrings\ntuples\n\nResources to refer to\n\nPython Docs: Descriptor HowTo Guide\nReal Python: Python Descriptors: An Introduction\nDeepsource:  Demystifying Python's Descriptor Protocol\nThe Mouse vs Python: What are descriptors?\nIBM Developer: Introduction to Python Descriptors\nclasses (Python tutorial)\nReal Python: Object-Oriented Programming in Python 3\n\n\n\nHints\nFor more information on writing hints see hints\n\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\n\n\n\nlinks.json\nFor more information, see concept links file\n\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\n\n\n\nConcept Description\nPlease see the following for more details on these files:  concepts & concept exercises\n\n\nConcept about.md\nConcept file/issue: There is currently no issue or files for the concept.  They are TBD.\nFor more information, see Concept about.md\n\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\n\n\n\nConcept introduction.md\nFor more information, see Concept introduction.md\n\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\n\n\n\nExercise introduction.md\nFor more information, see Exercise introduction.md\n\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\n\n\n\nTest-runner\nNo changes required to the Python Test Runner at this time.\nRepresenter\nNo changes required to the Python Representer at this time.\nAnalyzer\nNo changes required to the Python Analyzer at this time.\nExercise Metadata - Track\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of the Python repo.\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\n\nExercise UUID : f40befa4-3c76-4c4c-ad4a-7681944f4d6f\nconcepts should be filled in from the Concepts section in this issue\nprerequisites should be filled in from the Prerequisites section in this issue\n\nExercise Metadata Files Under  .meta/config.json\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\n\n.meta/config.json - see this link for the fields and formatting of this file.\n-.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\n\nImplementation Notes\n\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\n\nHelp\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\n      ",
        "issue_comment": "This issue describes how to implement the   concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n \n \n \n \n \n Goal This concept exercise is meant to teach an understanding/creation/use of    in Python. Learning objectives \n \n \n \n \n \n \n \n \n \n \n Out of scope \n \n \n \n \n \n Concepts \n \n \n \n \n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Resources to refer to \n \n \n \n \n \n \n \n \n Hints For more information on writing hints see  \n \n \n For more information, see  \n \n \n \n Concept Description Please see the following for more details on these files:    &  \n Concept  : There is currently no issue or files for the concept.   For more information, see  \n \n \n Concept  For more information, see  \n \n \n Exercise  For more information, see  \n \n \n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the root of the Python repo. You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \n \n \n \n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  \n \n Implementation Notes \n \n \n \n \n \n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "issue_serial": "/exercism/python/issues/2361",
        "issue_name": "[New Concept Exercise] : dataclasses and namedtuples",
        "issue_label": "help wantednew exercise x:action/createx:knowledge/advancedx:module/concept-exercisex:size/large",
        "issue_content": "\n          This issue describes how to implement the dataclasses and namedtuples concept exercise for the python track.\nGetting started\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\n\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\nWhat are those Weird Task Tags about?\nBuilding Language Tracks: An Overview\nWhat are Concepts?\nConcept Exercise Specifications\nConcept Specifications\nExercism Formatting and Style Guide\nExercism Markdown Specification\nReputation\n\nGoal\nThis concept exercise is meant to teach an understanding/creation/use of dataclasses and namedtuples in Python.\nLearning objectives\n\nmore fully understand the uses (and possible abuses) of classes in Python\nunderstand/create/use dataclasses and the @dataclass decorator\nlearn some additional methods from the dataclass module\n\ndataclasses.fields\ndataclasses.asdict & dataclasses.astuple\ndataclasses.replace\ndefault factory functions\n\n\nlearn an immutable alternative to dataclasses -- collections.namedtuple\n\npros and cons of each method for creating data-focused classes\n\n\n\nOut of scope\n\nclass-inheritance, multiple-inheritance, __super()__, class mixins\nclass-composition  -- (beyond the composition needed for the decorators in this exercise)\ncomprehensions\ndecorators outside of @dataclass\ngenerators\ncoroutines\ndescriptors (these will get their own exercise)\nusing a class as a decorator, beyond the methods made available for dataclasses\ntype annotaions, beyond what is used in dataclasses\ncollections module, outside of collections.namedtuple (the rest will get their own exercise)\n\nConcepts\n\nclasses\nclass attributes\nclass members\ndataclasses, @dataclass\ndecorators\ncollections.namedtuples()\n\nPrerequisites\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\n\nbasics\nbooleans\nclasses\nclass-customization\ncomparisons\ndecorators\ndicts\niteration\nlists\nnumbers\nsequences\nsets\nstrings\ntuples\n\nResources to refer to\n\nclasses (Python tutorial)\nPython Docs: dataclasses\nPython Docs: collections.namedtuple()\nPEP 0557\nPEP 0526\nReal Python: Data Classes in Python 3.7+ (Guide)\nDan Bader: Writing Clean Python with Namedtuples\nTrey Hunner: Easier Classes - Python Classes without All the Cruft\nSO:  What are data classes and how are they different?\nDataClass vs NamedTuple vs Object: A Battle of Performance in Python -- warning, this is a subscription service, so not great for links.json\nReal Python: Object-Oriented Programming in Python 3\n\n\n\nHints\nFor more information on writing hints see hints\n\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\n\n\n\nlinks.json\nFor more information, see concept links file\n\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\n\n\n\nConcept Description\nPlease see the following for more details on these files:  concepts & concept exercises\n\n\nConcept about.md\nConcept file/issue: There is currently no issue or files for the concept.  They are TBD.\nFor more information, see Concept about.md\n\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\n\n\n\nConcept introduction.md\nFor more information, see Concept introduction.md\n\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\n\n\n\nExercise introduction.md\nFor more information, see Exercise introduction.md\n\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\n\n\n\nTest-runner\nNo changes required to the Python Test Runner at this time.\nRepresenter\nNo changes required to the Python Representer at this time.\nAnalyzer\nNo changes required to the Python Analyzer at this time.\nExercise Metadata - Track\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of the Python repo.\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\n\nExercise UUID : 807b22ac-cc2c-43ea-b342-c5250227004a\nconcepts should be filled in from the Concepts section in this issue\nprerequisites should be filled in from the Prerequisites section in this issue\n\nExercise Metadata Files Under  .meta/config.json\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\n\n.meta/config.json - see this link for the fields and formatting of this file.\n-.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\n\nImplementation Notes\n\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\n\nHelp\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\n      ",
        "issue_comment": "This issue describes how to implement the   and   concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Goal This concept exercise is meant to teach an understanding/creation/use of   and   in Python. Learning objectives \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Out of scope \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Concepts \\n \\n \\n \\n \\n \\n \\n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Resources to refer to \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Hints For more information on writing hints see  \\n \\n \\n For more information, see  \\n \\n \\n \\n Concept Description Please see the following for more details on these files:    &  \\n Concept  : There is currently no issue or files for the concept.   For more information, see  \\n \\n \\n Concept  For more information, see  \\n \\n \\n Exercise  For more information, see  \\n \\n \\n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the root of the Python repo. You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \\n \\n \\n \\n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  \\n \\n Implementation Notes \\n \\n \\n \\n \\n \\n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. These are things I use daily at work   I might be able to contribute one way or another. First idea. \\nI would teach the named tuple concept using   instead of  . They are essentially the same things, but the typing out of a   is much closer to that of a   decorated class. It is also much easier to read than objects created using  . Sure you can do some nice tricks with   for creating some fun and wild dynamic classes defined in runtime using some configuration file, but that is much less needed in the professional world compared to clearly typed out classes in source files. I love dynamic things, but creating readable and maintainable software usually trumps the fun of creating \"magical\" dynamic classes. So for the sake of teaching the concept and preparing people for a professional environment I would teach the subject using  . Just my two cents to the jar. Hi   üëãüèΩ I would teach the named tuple concept using typing.NamedTuple instead of collections.namedtuple(). They are essentially the same things, but the typing out of a NamedTuple is much closer to that of a   decorated class. It is also much easier to read than objects created using collections.namedtuple(). Because type hinting and type aliasing are both \"newer\" and   in Python ( ), I think that those things need to be in their own \"branch\" of the concept tree, and far enough down that a student understands that these are  . They have their uses and abuses -- and it is not a requirement that they be used, and they should not be used everywhere.  Contrary to popular belief, they are in no way a requirement of \"professional\" python programming.  They   a very useful tool in some contexts, and terrible in others. So if anything, I think I'd    , and go over the differences or rationales behind why all three types appear in Python.  Conversely, I might chuck mention of   altogether, and focus in on why   evolved in the first place.  Analogous to   original rationale (very small snips below). But the idea of the exercise here (for me) was to build on what I'd consider the \"basic\" and \"intermediate\" data structures -- including classes -- and demonstrate that Python gives you multiple   of container -- each with their own rationale or properties.  Not discuss mutability, immutability, nor any dynamic programming. I see where you are coming from. And I agree in the benefit of introducing both versions of a \"named tuple\" to a student. But yeah, not necessarily all in the same concept exercise where Data Classes are being introduced. I think the amount of information needed to ingest with Data Classes alone is quite sufficient in itself. So if all three were to be covered in the concept tree I would give them all their own concept exercises. Start off with one of them, say Data Classes, and unlock the next exercises after completing that and have them build upon the things learnt from the Data Classes exercise. Or start off with one of the named tuples and build from there, doesn't really matter that much in what order you start IMO."
      },
      {
        "issue_serial": "/exercism/python/issues/2360",
        "issue_name": "[New Concept Exercise] : unpacking and multiple assignment",
        "issue_label": "help wantednew exercise x:action/createx:knowledge/advancedx:module/concept-exercisex:size/large",
        "issue_content": "\\n          This issue describes how to implement  the  unpacking concept exercise for the python track.\\nGetting started\\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\\n\\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\\nWhat are those Weird Task Tags about?\\nBuilding Language Tracks: An Overview\\nWhat are Concepts?\\nConcept Exercise Specifications\\nConcept Specifications\\nExercism Formatting and Style Guide\\nExercism Markdown Specification\\nReputation\\n\\nGoal\\nThis concept exercise is meant to teach an understanding/use of unpacking and the * (splat) and ** (double splat) operators  in Python.\\nLearning objectives\\n\\nUnderstand/use unpacking through the use of * and ** prefix operators in various scenarios\\n\\n* and ** as prefixes ..... not to be confused with * (multiply) and ** (exponentiation) as infix, or mathematical operators\\nwhat happens in the process of \"unpacking\" - form, ordering, and iteration\\nuse in arguments to functions\\nuse in argument capture for functions (aka passing an arbitrary number of arguments -- *args * & **kwargs)\\nuse to define keyword only arugments\\nuse in iterable (mainly tuple and list) unpacking and packing\\nuse in dict unpacking and packing\\n\\n\\nUnderstand/use unpacking via multiple assignment\\n\\nusing multiple assignment  in place of indexing\\nusing multiple assigment + *  in place of slicing\\nusing \"list-like\" syntax & \"tuple-like\" syntax\\n\\n\\nDifferences between straight  multiple assignment and * & **\\nDeep unpacking\\n\\nOut of scope\\n\\nclasses\\ncomprehensions\\ncomprehensions in lambdas\\nmap(), filter() or functools.reduce() in a comprehension\\nfunctools beyond functools.reduce()(this will get its own exercise)\\ngenerators\\nusing an assignment expression or \"walrus\" operator (:=) alone or in a lambda\\n\\nConcepts\\n\\nunpacking\\nunpacking generalizations\\nmultiple assignment\\n\\nPrerequisites\\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\\n\\nbasics\\nbools\\ncomparisons\\ndicts\\ndict-methods\\nfunctions\\nfunction-arguments\\nhigher-order-functions\\nfunctional tools\\nIdentity methods is and is not\\niteration\\nlists\\nlist-methods\\nnumbers\\nsequences\\nsets\\nstrings\\nstring-methods\\ntuples\\n\\nResources to refer to\\n\\nTrey Hunner: Asterisks in Python - what they are and how to use them\\nTrey Hunner: Multiple assignment and tuple unpacking improve Python code readability\\nDan Bader: Python Nested Unpacking\\nPEP 3132:  Extended Iterable Unpacking\\nPEP 0448: Additional Unpacking Generalizations\\nPython Tutorial:  Arbitrary Argument Lists & Python Tutorial: Unpacking Argument Lists\\nPython Docs: Expression Lists\\nPython Docs: Defining Functions\\nbuilt-ins: Python Docs\\n\\n\\n\\nHints\\nFor more information on writing hints see hints\\n\\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\\n\\n\\n\\nlinks.json\\nFor more information, see concept links file\\n\\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\\n\\n\\n\\nConcept Description\\nPlease see the following for more details on these files:  concepts & concept exercises\\n\\n\\nConcept about.md\\nConcept file/issue: There is currently no issue or files for the concept.  They are TBD.\\nFor more information, see Concept about.md\\n\\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\\n\\n\\n\\nConcept introduction.md\\nFor more information, see Concept introduction.md\\n\\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\\n\\n\\n\\nExercise introduction.md\\nFor more information, see Exercise introduction.md\\n\\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\\n\\n\\n\\nTest-runner\\nNo changes required to the Python Test Runner at this time.\\nRepresenter\\nNo changes required to the Python Representer at this time.\\nAnalyzer\\nNo changes required to the Python Analyzer at this time.\\nExercise Metadata - Track\\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of the Python repo.\\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\\n\\nExercise UUID : a0d00a86-9eaa-487f-9114-e604263ccd96\\nconcepts should be filled in from the Concepts section in this issue\\nprerequisites should be filled in from the Prerequisites section in this issue\\n\\nExercise Metadata Files Under  .meta/config.json\\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\\n\\n.meta/config.json - see this link for the fields and formatting of this file.\\n.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\\n\\nImplementation Notes\\n\\n\\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.\\n\\n\\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\\n\\n\\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\\n\\n\\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\\n\\n\\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\\n\\n\\nHelp\\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\\n      ",
        "issue_comment": "This issue describes how to implement  the    concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n \n \n \n \n \n Goal This concept exercise is meant to teach an understanding/use of   and the   (splat) and   (double splat) operators  in Python. Learning objectives \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Out of scope \n \n \n \n \n \n \n \n Concepts \n \n \n \n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Resources to refer to \n \n \n \n \n \n \n \n \n \n \n Hints For more information on writing hints see  \n \n \n For more information, see  \n \n \n \n Concept Description Please see the following for more details on these files:    &  \n Concept  : There is currently no issue or files for the concept.   For more information, see  \n \n \n Concept  For more information, see  \n \n \n Exercise  For more information, see  \n \n \n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the root of the Python repo. You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \n \n \n \n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  \n \n \n Implementation Notes \n Code in the   file should  \n Please   comprehensions, generator expressions, or other syntax not previously covered.  Please also follow   guidelines. \n In General, tests should be written using   and the test file should be named  . \n While we do use   as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature. \n Our markdown and JSON files are checked against   .  We recommend   and running it prior to submitting your PR  to avoid any CI errors. \n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel."
      },
      {
        "issue_serial": "/exercism/python/issues/2359",
        "issue_name": "[New Concept Exercise] : functional-tools",
        "issue_label": "help wantednew exercise x:action/createx:knowledge/advancedx:module/concept-exercisex:size/large",
        "issue_content": "\\n          This issue describes how to implement  the  functional tools concept exercise for the python track.\\nGetting started\\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\\n\\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\\nWhat are those Weird Task Tags about?\\nBuilding Language Tracks: An Overview\\nWhat are Concepts?\\nConcept Exercise Specifications\\nConcept Specifications\\nExercism Formatting and Style Guide\\nExercism Markdown Specification\\nReputation\\n\\nGoal\\nThis concept exercise is meant to teach an understanding/use of functional tools (e.g,  map(), filter(), and functools.reduce()  in Python.\\nLearning objectives\\n\\nUnderstand/use the built-in map() function.\\n\\nconstructing a lambda  or callback function used as the argument.\\ncomparisons to set, dict or list comprehensions\\nwhen and when not to use - considering performance & readability\\n\\n\\nUnderstand/use the built-in filter() function.\\n\\nconstructing a lambda  or callback function used as the argument.\\ncomparisons to set, dict or list comprehensions\\nwhen and when not to use - considering performance & readability\\n\\n\\nUnderstand/use the functools.reduce() function\\n\\nconstructing a lambda  or callback function used as the argument.\\nusing initializer as a \"first call\" or to guard against TypeErrors when the passed iterable is empty.\\ncomparisons to sum(), min(), max(), any(), all(), math.prod() and to intertools.accumulate()\\nwhen and when not to use - considering performance & readability\\n\\n\\n\\nOut of scope\\n\\ncomprehensions\\ncomprehensions in lambdas\\nmap(), filter() or functools.reduce() in a comprehension\\nfunctools beyond functools.reduce()(this will get its own exercise)\\ngenerators\\nusing an assignment expression or \"walrus\" operator (:=) in a lambda\\n\\nConcepts\\n\\nfunctional tools in python\\nbuilt-ins\\n\\nany() & all()\\nsum()\\nmin() & max()\\nmap()\\nfilter()\\n\\n\\nfunctools.reduce()\\nitertools.accumulate()\\n\\nPrerequisites\\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\\n\\nbasics\\nbools\\ncomparisons\\ndicts\\ndict-methods\\nfunctions\\nfunction-arguments\\nhigher-order-functions\\niteration\\nlists\\nlist-methods\\nnumbers\\nsequences\\nsets\\nstrings\\nstring-methods\\ntuples\\n\\nResources to refer to\\n\\nPython Docs: Defining Functions\\nPython Docs Tutorial: Lambda Expressions\\nFunctions as Objects in Python\\nComposing Programs: Higher-Order Functions\\nLearn by Example:  Python Lambda Function\\nbuilt-ins: Python Docs\\n\\nmap() & filter()\\nany() & all()\\nmin() & max()\\nsum()\\n\\n\\nitertools.accumulate()\\nfunctools.reduce()\\nReal Python: Functional Programming in Python: When and How to Use it\\nReal Python : Python's map(): Processing Iterables Without a Loop\\nReal Python: Python's reduce(): From Functional to Pythonic Style\\nPthon Docs:  Functional Programming HOWTO\\n\\n\\n\\nHints\\nFor more information on writing hints see hints\\n\\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\\n\\n\\n\\nlinks.json\\nFor more information, see concept links file\\n\\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\\n\\n\\n\\nConcept Description\\nPlease see the following for more details on these files:  concepts & concept exercises\\n\\n\\nConcept about.md\\nConcept file/issue: There is currently no issue or files for the concept.  They are TBD.\\nFor more information, see Concept about.md\\n\\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\\n\\n\\n\\nConcept introduction.md\\nFor more information, see Concept introduction.md\\n\\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\\n\\n\\n\\nExercise introduction.md\\nFor more information, see Exercise introduction.md\\n\\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\\n\\n\\n\\nTest-runner\\nNo changes required to the Python Test Runner at this time.\\nRepresenter\\nNo changes required to the Python Representer at this time.\\nAnalyzer\\nNo changes required to the Python Analyzer at this time.\\nExercise Metadata - Track\\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of the Python repo.\\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\\n\\nExercise UUID : e3ad3c65-e038-46ab-a157-e3d4be638272\\nconcepts should be filled in from the Concepts section in this issue\\nprerequisites should be filled in from the Prerequisites section in this issue\\n\\nExercise Metadata Files Under  .meta/config.json\\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\\n\\n.meta/config.json - see this link for the fields and formatting of this file.\\n.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\\n\\nImplementation Notes\\n\\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.\\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\\n\\nHelp\\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\\n      ",
        "issue_comment": "This issue describes how to implement  the    concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n \n \n \n \n \n Goal This concept exercise is meant to teach an understanding/use of   (e.g,     in Python. Learning objectives \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Out of scope \n \n \n \n \n \n \n Concepts \n \n \n \n \n \n \n \n \n \n \n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Resources to refer to \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Hints For more information on writing hints see  \n \n \n For more information, see  \n \n \n \n Concept Description Please see the following for more details on these files:    &  \n Concept  : There is currently no issue or files for the concept.   For more information, see  \n \n \n Concept  For more information, see  \n \n \n Exercise  For more information, see  \n \n \n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the root of the Python repo. You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \n \n \n \n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  \n \n \n Implementation Notes \n \n \n \n \n \n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "issue_serial": "/exercism/python/issues/2357",
        "issue_name": "[New Concept Exercise] : anonymous-functions (lambdas)",
        "issue_label": "new exercise x:action/createx:knowledge/advancedx:module/concept-exercisex:size/largex:status/claimed",
        "issue_content": "\\n          This issue describes how to implement the anonymous-functions (lambdas) concept exercise for the python track.\\nGetting started\\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\\n\\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\\nWhat are those Weird Task Tags about?\\nBuilding Language Tracks: An Overview\\nWhat are Concepts?\\nConcept Exercise Specifications\\nConcept Specifications\\nExercism Formatting and Style Guide\\nExercism Markdown Specification\\nReputation\\n\\nGoal\\nThis concept exercise is meant to teach an understanding/creation/use of lambda or anonymous functions  in python.\\nLearning objectives\\n\\nUnderstand what an anonymous function is, and how to create one\\n\\nThe syntax of creating a  lambda\\nUsing different function argument flavors with lambda\\n\\n\\nUnderstand the differences between lambdas and Pythons \"regular\" functions\\nUnderstand what problems are solved by using a lambda\\nThe pitfalls of lambdas, and when to avoid them\\nUsing lambdas as key functions in other situations such as sort() ,  sorted(), min(),  and max()\\nApplying arguments to a lambda via IIFE (immediately invoked function expression)\\nAnti-patterns when using lambdas\\n\\nOut of scope\\n\\ncomprehensions\\ncomprehensions in lambdas\\nusing a decorator on a lambda\\nfunctools (this will get its own exercise)\\ngenerators\\nmap(), filter(), and reduce() (these will get their own exercise)\\nusing an assignment expression or \"walrus\" operator (:=) in a lambda\\n\\nConcepts\\n\\nanonymous-functions\\nlambdas\\nfunctions,\\nhigher-order functions\\nfunctions as arguments\\nfunctions as returns\\nnested funcitons\\n\\nPrerequisites\\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\\n\\nbasics\\nbooleans\\ncomparisons\\ndicts\\ndict-methods\\nfunctions\\nfunction-arguments\\nhigher-order functions\\niteration\\nlists\\nlist-methods\\nnumbers\\nsequences\\nsets\\nstrings\\nstring-methods\\ntuples\\n\\nResources to refer to\\n\\nPython Docs: Defining Functions\\nPython Docs Tutorial: Lambda Expressions\\nFunctions as Objects in Python\\nComposing Programs: Higher-Order Functions\\nLearn by Example:  Python Lambda Function\\nReal Python: How to Use Python Lambda Fuctions\\nTrey Hunner: Overusing Lambda expressions in Python\\n\\n\\n\\nHints\\nFor more information on writing hints see hints\\n\\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\\n\\n\\n\\nlinks.json\\nFor more information, see concept links file\\n\\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\\n\\n\\n\\n\\nConcept Description\\nPlease see the following for more details on these files:  concepts & concept exercises\\n\\n\\nConcept about.md\\nConcept file/issue: anonymous-functions directory with stubbed files -- Content is TBD and should be completed as part of this exercise creation.  Anonymous-functions concept write-ups and associated files can be included in the PR for this issue, or as a separate PR linked to this issue.\\nFor more information, see Concept about.md\\n\\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\\n\\n\\n\\nConcept introduction.md\\nFor more information, see Concept introduction.md\\n\\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\\n\\n\\n\\nExercise introduction.md\\nFor more information, see Exercise introduction.md\\n\\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\\n\\n\\n\\n  \\nTest-runner\\nNo changes required to the Python Test Runner at this time.\\nRepresenter\\nNo changes required to the Python Representer at this time.\\nAnalyzer\\nNo changes required to the Python Analyzer at this time.\\n\\nExercise Metadata - Track\\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of this Python repo.\\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\\n\\nExercise UUID : 1e636fd3-6143-484e-a4fc-0ed6157fdfa1\\nconcepts should be filled in from the Concepts section in this issue\\nprerequisites should be filled in from the Prerequisites section in this issue\\n\\n\\nExercise Metadata Files Under  .meta/config.json\\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\\n\\n\\n.meta/config.json - see this link for the fields and formatting of this file.\\n\\n\\n.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\\n\\n\\n  \\nImplementation Notes\\n\\n\\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.  We run all our examplar.py files through PyLint, but do not require module docstrings.  We do require function docstrings similar to PEP257.  See this concept exercise exemplar.py for an example.\\n\\n\\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\\n\\n\\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\\n\\nAll asserts should contain a \"user friendly\" failure message (these will display on the website).\\nWe use a PyTest custom mark to link test cases to exercise task numbers.\\nWe also use unittest.subtest to parameterize test input where/when needed.\\nHere is an example testfile that shows all three of these in action.\\n\\n\\n\\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\\n\\n\\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\\n\\n\\n\\nHelp\\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\\n      ",
        "issue_comment": "This issue describes how to implement the   (lambdas) concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n \n \n \n \n \n Goal This concept exercise is meant to teach an understanding/creation/use of   or    in python. Learning objectives \n \n \n \n \n \n \n \n \n \n \n Out of scope \n \n \n \n \n \n \n \n Concepts \n \n \n \n \n \n \n \n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Resources to refer to \n \n \n \n \n \n \n \n \n Hints For more information on writing hints see  \n \n \n For more information, see  \n \n \n \n Concept Description Please see the following for more details on these files:    &  \n Concept  :   --   and should be completed as part of this exercise creation.    concept write-ups and associated files can be included in the PR for this issue, or as a separate PR linked to this issue. For more information, see  \n \n \n Concept  For more information, see  \n \n \n Exercise  For more information, see  \n \n \n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the  . You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \n \n \n \n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  \n  - see   for the fields and formatting of this file. \n  - see   for the formatting of this file.  Please use the  ,  , ,   and ,    sections  from this issue. \n Implementation Notes \n Code in the   file should    We run all our   files through PyLint, but do not require module docstrings.  We   require function docstrings similar to  .  See   for an example. \n Please   comprehensions, generator expressions, or other syntax not previously covered.  Please also follow   guidelines. \n In General, tests should be written using   and the test file should be named  . \n \n \n \n \n While we do use   as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature. \n Our markdown and JSON files are checked against   .  We recommend   and running it prior to submitting your PR  to avoid any CI errors. \n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel. I'd like to work on this. Thanks! Btw, I noticed we already have an exercise for this:   It's in combination with bit manipulation tho (which should also be taught in Python). So should I use that or make a new one? Hi    -  Happy to have you work on it!    Unfortunately, bit manipulation is not a prerequisite for this exercise, and this is probably not the place to introduce it.  We have an exercise planned, but it's not on our priority list right now.  You are more than welcome to fork the Elixir exercise and adapt it -- but I think we need to leave the bit manipulation out. Also -- be warned:  unlike functional-first programming languages, Python's   are quite limited.  They can only contain code that is computable as a single expression, and be written on a single line.    . It is customary to only use them in very constrained situations -- most often as sort keys, or as arguments to  ,   and  .   They also execute in their own frame, which makes error handling and stack traces more effort, and often slows code execution if you're not careful.  But I'll stop now ... and let you do the write-up!     The documentation links at the top are up-to-date, but the ones in the body are not.  I will update those shortly.  Let me know here ( ) if you have any questions or issues."
      },
      {
        "issue_serial": "/exercism/python/issues/2356",
        "issue_name": "[ New Concept Exercise] : decorators",
        "issue_label": "claimed new exercise x:action/createx:knowledge/advancedx:module/concept-exercisex:size/largex:status/claimed",
        "issue_content": "\\n          This issue describes how to implement the decorators concept exercise for the python track.\\nGetting started\\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\\n\\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\\nWhat are those Weird Task Tags about?\\nBuilding Language Tracks: An Overview\\nWhat are Concepts?\\nConcept Exercise Specifications\\nConcept Specifications\\nExercism Formatting and Style Guide\\nExercism Markdown Specification\\nReputation\\n\\nGoal\\nThis concept exercise is meant to teach an understanding/creation of decorators  in python.\\nLearning objectives\\n\\nReview/understand more details on  higher-order functions  in Python\\n\\nreturning functions from functions\\npassing a function as an argument to another function\\ninner or nested functions\\n\\n\\nUnderstand that the decorator form and the @ symbols are syntatic sugar for making/calling higher-order functions\\nKnow that decorators extend the behavior of an \"inner\", \"wrapped\", or passed  function  without explicitly modifying it.\\nCreate & use simple function decorators\\nCreate & use a more \"complex\" function decorator\\nUse *args and **kwargs to decorate a function with different arguments\\nUnderstand that a decorator is not required to wrap and modify a function, but can simply return it.\\n\\nOut of scope\\n\\ncomprehensions\\nclass decorators\\nclasses as decorators\\nfunctools (this will get its own exercise)\\nfunctools.wraps\\ngenerators\\nlambda, anonymous functions\\nmap(), filter(), and reduce() (these will get their own exercise)\\nnested decorators\\nstateful decorators\\n\\nConcepts\\n\\ndecorators\\nfunctions, higher-order functions\\nfunctions as arguments\\nfunctions as returns\\nnested funcitons\\n*args and **kwargs\\n\\nPrerequisites\\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\\n\\nbasics\\nbools\\ncomparisons\\ndicts\\ndict-methods\\nfunctions\\nfunction-arguments\\nhigher-order-functions\\niteration\\nlists\\nlist-methods\\nnumbers\\nsequences\\nsets\\nstrings\\nstring-methods\\ntuples\\n\\nResources to refer to\\n\\nPython Docs: Defining Functions\\nPython Docs: Term - decorator\\nFunctions as Objects in Python\\nComposing Programs: Higher-Order Functions\\nReal Python: Primer on Python Decorators\\nDan Bader: Python Decorators: A Step-by-Step Introduction\\nLearn by Example: Python Decorators\\nPEP 0318 (Python.org)\\n\\n\\n\\nHints\\nFor more information on writing hints see hints\\n\\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\\n\\n\\n\\nlinks.json\\nFor more information, see concept links file\\n\\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\\n\\n\\n\\nConcept Description\\nPlease see the following for more details on these files:  concepts & concept exercises\\n\\n\\nConcept about.md\\n\\n\\nConcept file/issue: decorators directory with stubbed files -- Content is TBD and should be completed as part of this exercise creation. Decorator concept write-ups and associated files can be included in the PR for this issue, or as a separate PR linked to this issue.\\nFor more information, see Concept about.md\\n\\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\\n\\n\\n\\nConcept introduction.md\\nFor more information, see Concept introduction.md\\n\\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\\n\\n\\n\\nExercise introduction.md\\nFor more information, see Exercise introduction.md\\n\\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\\n\\n\\n\\nTest-runner\\nNo changes required to the Python Test Runner at this time.\\nRepresenter\\nNo changes required to the Python Representer at this time.\\nAnalyzer\\nNo changes required to the Python Analyzer at this time.\\nExercise Metadata - Track\\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of this Python repo.\\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\\n\\nExercise UUID : a9e59661-c687-45fb-93e5-622ed612a060\\nconcepts should be filled in from the Concepts section in this issue\\nprerequisites should be filled in from the Prerequisites section in this issue\\n\\nExercise Metadata Files Under  .meta/config.json\\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\\n\\n.meta/config.json - see this link for the fields and formatting of this file.\\n.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\\n\\nImplementation Notes\\n\\n\\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.  We run all our examplar.py files through PyLint, but do not require module docstrings.  We do require function docstrings similar to PEP257.  See this concept exercise exemplar.py for an example.\\n\\n\\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\\n\\n\\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\\n\\nAll asserts should contain a \"user friendly\" failure message (these will display on the webiste).\\nWe use a PyTest custom mark to link test cases to exercise task numbers.\\nWe also use unittest.subtest to parameterize test input where/when needed.\\nHere is an example testfile that shows all three of these in action.\\n\\n\\n\\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\\n\\n\\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\\n\\n\\nHelp\\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\\n      ",
        "issue_comment": "This issue describes how to implement the   concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Goal This concept exercise is meant to teach an understanding/creation of    in python. Learning objectives \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Out of scope \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Concepts \\n \\n \\n \\n \\n \\n \\n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Resources to refer to \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Hints For more information on writing hints see  \\n \\n \\n For more information, see  \\n \\n \\n \\n Concept Description Please see the following for more details on these files:    &  \\n Concept  \\n :   --   and should be completed as part of this exercise creation. Decorator concept write-ups and associated files can be included in the PR for this issue, or as a separate PR linked to this issue. For more information, see  \\n \\n \\n Concept  For more information, see  \\n \\n \\n Exercise  For more information, see  \\n \\n \\n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the  . You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \\n \\n \\n \\n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  \\n \\n \\n Implementation Notes \\n Code in the   file should    We run all our   files through PyLint, but do not require module docstrings.  We   require function docstrings similar to  .  See   for an example. \\n Please   comprehensions, generator expressions, or other syntax not previously covered.  Please also follow   guidelines. \\n In General, tests should be written using   and the test file should be named  . \\n \\n \\n \\n \\n While we do use   as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature. \\n Our markdown and JSON files are checked against   .  We recommend   and running it prior to submitting your PR  to avoid any CI errors. \\n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel. We may want to consider adding   to this exercise, as it is very helpful in defining decorators.  However, it does introduce the whole    , which may not be what we want to do here. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. Hello, I would like to contribute to exercism, can I try doing this?  üëãüèΩ   ( ) Yes!  It can be        I will flag it as claimed, and you can get to work.  Some of the links in here   be out of date -- I will update them today.  Please don't hesitate to reach out with any questions or issues you might have.  And thank you for taking this on.  Heya  , just checking in on this issue. Haven't heard anything from you for a few days. If you need any help or are stuck on this issue, feel free to contact me by pinging me on Github or Slack! Would also love to know how much you've done. Let me know!   -- someone else has asked if they can work on this issue, so I am un-assigning you.  Please let me know if you want to continue/start work on it, and I can re-assign you.  Thanks!   Hi! I would love to work on this issue! I'm a little confused by what some of the text in the OP means - do I need to write concept and exercise or just exercise? Hi   ! Thanks so much for stepping forward to work on this issue --    Both the   and the concept    itself need to be written.  However, we can deal with that in several ways: \\n \\n \\n \\n Just let us know how you'd like to proceed, and if you have any additional questions. Please also keep in mind that this exercise has prerequisites that are not yet live on the site, so it may not be published right away.  If you're looking to get something in front of users more quickly, we do have an exercise on   that needs a re-work, as well as exercises on   and  .  Just let us know.   Hi! I think I will do both! If I don't write good explanations etc. that is what the review process is for! What do you think is easier to do first? I guess writing exercise first so then explanations can lead a bit from that? Note: \\nI might not get much done over the next few weeks due to school! After that Christmas holidays give me loooooooooads of time :-)   And yes -- as you have probably seen, the review process can be lengthy.  But it can also be very collaborative and fun --   and all of them could be improved.  In fact, we're going back over all of our concept exercises over the holidays and seeing where we can make them better.      This is a personal thing.  I myself usually do the concept   first.  It gives me a chance to read up on all the details, go through a bunch of links ( ), and practice a bunch of things in preparation for writing the exercise.  Once I have an  , I summarize it for the concept  , and usually paraphrase it, shorten it, or add specific code examples to it for the    . Usually, in the process of \"researching\" for the concept  , a story or problem comes to me for the exercise.  But it also depends on the concept.  Many early concepts are harder, because you cannot use code or techniques that haven't been introduced as part of the exercise prerequisites.  But   are far enough \"down the tree\", that you can use most common techniques in your problem setup or solution.  We also have a   -- so there may be an exercise from  ,  ,  ,   ,  , or another language that could be ported or adapted for use here. No worries there!  I am one of the world's slowest writers ... so even when I am working on an exercise, it takes me several weeks!  Just give us (myself or   ) a ping if you get stuck, want to discuss things via chat or call, or if you decided you'd rather work on something else.  And good luck with any pending papers or tests!   Hi, so could I confirm that this is what I should fill in: python/config.json - add in exercise \\nconcept/about.md - add a detailed explanation of decorators \\nconcept/introduction.md - give some basic info about decorators \\nconcept/links.json - provide links for further reading \\nconcept/.meta/config.json - add blurb and myself as an author The exercise files I have got a little confused about, so could someone summarise that for me so I understand! Heya  , \\nWe have documentation linked in the   header. This should probably tell you what you need to know. You could also watch   if that's more your style :). If you really need help, just message me on slack ( ). \\nHave a nice day / evening!  Hi! I had read that, but I was probably quite tired so didn't learn too much from it! Will review now that I have been refreshed after a good sleep! Just to note, the what is the weird tasks tag link above points to a non-existent page. It points to /building/tasks, while the page on the docs points to /building/product/tasks! Hi again! Is there a recommended max line length in the source markdown files?  -- Thanks for the head's up!  We keep re-organizing docs on the site, and then forgetting to update issues.   . Nope!  But we strongly recommend the  , which can feel really confusing at first.  The docs are parsed and then re-formatted for the web site, so the EOL at the end of each sentence is stripped, but having each sentence on its own line greatly helps with tracking edits and readability of source. You will still want to do line breaks for paragraphs by using two spaces + a [return] followed by a blank line. Same goes for separating code blocks.  Here's an example: Which would render like: This is the first sentence of the paragraph. This is the second sentence of the paragraph. Here is the final sentence of the paragraph. Here is the start of the second paragraph. And here is the follow-on text. But   and I are also happy to help review things as you go along.  You can either ping us in Slack -- or submit an in-progress PR that is flagged as   with a message for feedback.   For some examples of how the various pieces of a concept exercise are put together (and what a concept   looks like VS a concept  ) check out these concept exercises:  &  \\n  &  \\n  &  \\n  &  Also -- because of the prerequisites and flags for setting an exercise live -- it is probably best if   or I do the edits to the track  .  We'll do it as a last step when we finalize your PR.  "
      },
      {
        "issue_serial": "/exercism/python/issues/2355",
        "issue_name": "[New Concept Exercise] : higher-order functions",
        "issue_label": "help wantednew exercise x:action/createx:knowledge/advancedx:module/concept-exercisex:size/large",
        "issue_content": "\n          This issue describes how to implement the higher-order functions concept exercise for the python track.\nGetting started\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\n\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\nWhat are those Weird Task Tags about?\nBuilding Language Tracks: An Overview\nWhat are Concepts?\nConcept Exercise Specifications\nConcept Specifications\nExercism Formatting and Style Guide\nExercism Markdown Specification\nReputation\n\nGoal\nThis concept exercise is meant to teach a deeper understanding/use of higher-order functions  in python.\nLearning objectives\n\nUnderstand and create higher-order functions  in Python\nCreate functions used as arguments to other functions\nCreate functions that return  functions\nLearn about currying\nUnderstand and create  closures  -- where an inner function has access to a variable from it's enclosing scope (the outer function) that has completed its execution.\nUnderstand and use simple recursion-- where a function calls itself as an argument.\n\nOut of scope\n\ncomprehensions\ndecorators (these will have their own exercise)\nfunctools (this will get its own exercise)\nfunctools.wraps\ngenerators\nlambda, anonymous functions\nmap(), filter(), and reduce() (these will get their own exercise)\n\nConcepts\n\nclosures\ncurrying\nfunctions, higher-order functions\nfunctions as arguments\nfunctions as returns\nrecursion\n\nPrerequisites\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\n\nbasics\nbooleans\ncomparisons\ndicts\ndict-methods\nfunctions\nfunction-arguments\niteration\nlists\nlist-methods\nnumbers\nsequences\nsets\nstrings\nstring-methods\ntuples\n\nResources to refer to\n\nPython Docs: Python Scopes and Namespaces\nPython Docs: Defining Functions\nDan Bader:  Python s Functions are First-Class\nFunctions as Objects in Python\nComposing Programs: Higher-Order Functions\nTobias Kohn: Closures in Python\nzetcode: Python Closures\nSagnick:  Python is the Haskell you Never Knew You Had: Currying\nOreilly:  Associating Parameters with a Function (Currying)\nReal Python:  Thinking Recursively in Python\nTrain Your Brain to Think Recursively\n\n\n\nHints\nFor more information on writing hints see hints\n\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\n\n\n\nlinks.json\nFor more information, see concept links file\n\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\n\n\n\nConcept Description\nPlease see the following for more details on these files:  concepts & concept exercises\n\n\nConcept about.md\nConcept file/issue: There is currently no issue or files for the concept.  They are TBD.\nFor more information, see Concept about.md\n\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\n\n\n\nConcept introduction.md\nFor more information, see Concept introduction.md\n\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\n\n\n\nExercise introduction.md\nFor more information, see Exercise introduction.md\n\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\n\n\n\nTest-runner\nNo changes required to the Python Test Runner at this time.\nRepresenter\nNo changes required to the Python Representer at this time.\nAnalyzer\nNo changes required to the Python Analyzer at this time.\nExercise Metadata - Track\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of the Python repo.\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\n\nExercise UUID : 37e7b0bd-6d70-415f-806b-cda91173c7c8\nconcepts should be filled in from the Concepts section in this issue\nprerequisites should be filled in from the Prerequisites section in this issue\n\nExercise Metadata Files Under  .meta/config.json\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\n\n.meta/config.json - see this link for the fields and formatting of this file.\n.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\n\nImplementation Notes\n\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\n\nHelp\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\n      ",
        "issue_comment": "This issue describes how to implement the   concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n \n \n \n \n \n Goal This concept exercise is meant to teach a deeper understanding/use of    in python. Learning objectives \n \n \n \n \n \n \n Out of scope \n \n \n \n \n \n \n \n Concepts \n \n \n \n \n \n \n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Resources to refer to \n \n \n \n \n \n \n \n \n \n \n \n \n Hints For more information on writing hints see  \n \n \n For more information, see  \n \n \n \n Concept Description Please see the following for more details on these files:    &  \n Concept  : There is currently no issue or files for the concept.   For more information, see  \n \n \n Concept  For more information, see  \n \n \n Exercise  For more information, see  \n \n \n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the root of the Python repo. You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \n \n \n \n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  \n \n \n Implementation Notes \n \n \n \n \n \n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "issue_serial": "/exercism/python/issues/2354",
        "issue_name": "[New Concept Exercise] : function-arguments",
        "issue_label": "claimed new exercise on hold ‚úãüèΩx:action/createx:knowledge/advancedx:module/concept-exercisex:size/largex:status/claimed",
        "issue_content": "\n          This issue describes how to implement the function-arguments concept exercise for the python track.\nGetting started\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\n\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\nWhat are those Weird Task Tags about?\nBuilding Language Tracks: An Overview\nWhat are Concepts?\nConcept Exercise Specifications\nConcept Specifications\nExercism Formatting and Style Guide\nExercism Markdown Specification\nReputation\n\nGoal\nThis concept exercise is meant to teach a deeper understanding/use of function-arguments  in python.\nLearning objectives\n\n\nGet familiar with and use all the various parameter flavors (function-arguments) available when creating functions\n\npositional parameters\nnamed parameters(AKA keyword parameters)\ndefault parameters\narbitrary parameters (AKA *args and **kwargs)\ndefining position-only parameters, position or keyword parameters, and  keyword-only parameters using / and *\n\n\n\nOut of scope\n\ncomprehensions\nclosures (these will be covered in a different exercise)\ndecorators\nfunctions-as-arguments\nfunctions-as-returns\nfunctools (this will get its own exercise)\nfunctools.wraps\ngenerators\nlambda, anonymous functions\nrecursion\n\nConcepts\n\nfunctions\nfunction arguments\nfunction parameters\n\nPrerequisites\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\n\nbasics\nbooleans\ncomparisons\ndicts\ndict-methods\nfunctions\niteration\nlists\nlist-methods\nnumbers\nsequences\nsets\nstrings\nstring-methods\ntuples\n\nResources to refer to\n\nPython Docs: Naming and Binding\nPython Docs: Python Scopes and Namespaces\nPython Docs: Defining Functions\nDigital Ocean Blog: How to Define Functions in Python 3\nFunction definitions (Python Library Reference)\nDan Bader:  Python s Functions are First-Class\nReal Python:  Python Scope & the LEGB Rule\nPython Datamodel: Types\n\n\n\nHints\nFor more information on writing hints see hints\n\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\n\n\n\nlinks.json\nFor more information, see concept links file\n\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\n\n\n\nConcept Description\nPlease see the following for more details on these files:  concepts & concept exercises\n\n\nConcept about.md\nConcept file/issue: There is currently no issue or files for the concept.  They are TBD.\nFor more information, see Concept about.md\n\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\n\n\n\nConcept introduction.md\nFor more information, see Concept introduction.md\n\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\n\n\n\nExercise introduction.md\nFor more information, see Exercise introduction.md\n\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\n\n\n\nTest-runner\nNo changes required to the Python Test Runner at this time.\nRepresenter\nNo changes required to the Python Representer at this time.\nAnalyzer\nNo changes required to the Python Analyzer at this time.\nExercise Metadata - Track\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of the Python repo.\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\n\nExercise UUID : a13c953e-fb07-4953-addc-c7925f7a3dea\nconcepts should be filled in from the Concepts section in this issue\nprerequisites should be filled in from the Prerequisites section in this issue\n\nExercise Metadata Files Under  .meta/config.json\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\n\n.meta/config.json - see this link for the fields and formatting of this file.\n.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\n\nImplementation Notes\n\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\n\nHelp\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\n      ",
        "issue_comment": "This issue describes how to implement the   concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Goal This concept exercise is meant to teach a deeper understanding/use of    in python. Learning objectives \\n Get familiar with and use all the various parameter flavors ( ) available when creating  \\n \\n \\n \\n \\n \\n \\n Out of scope \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Concepts \\n \\n \\n \\n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Resources to refer to \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Hints For more information on writing hints see  \\n \\n \\n For more information, see  \\n \\n \\n \\n Concept Description Please see the following for more details on these files:    &  \\n Concept  : There is currently no issue or files for the concept.   For more information, see  \\n \\n \\n Concept  For more information, see  \\n \\n \\n Exercise  For more information, see  \\n \\n \\n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the root of the Python repo. You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \\n \\n \\n \\n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  \\n \\n \\n Implementation Notes \\n \\n \\n \\n \\n \\n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.  I want to work on this issue, but if I do work on it, this would be my first contribution here, and I'm not really sure about how to build those exercises, I understood the   and   part though. Hi   üëãüèΩ   Don't worry about it being your first contribution, or not knowing how to \"build\" an exercise -- I and the other maintainers and volunteers for the Python track are more than happy to help you through the process.  I will assign this issue to you and remove the help wanted label. \\n  -- I will be back with some links and examples for you ( ).  I'm happy to answer any questions you might have about the process - and can even collaborate with you in your repo or mine prior to PR-ing here, if that is more comfortable for you. Additionally, if you are on our Exercism Slack, I am happy to also chat and collaborate there. Alright, I'll try to find some ideas for the exercise too, once something hits me, I'll start working on it. If coming up with a story seems intimidating, we do have a   of stories that have been used for exercises across language tracks.  If any of those look interesting to you, you can adapt one of them to this exercise.   One thought would be to also go back over the  , and see if any of those stories/problems could be extended or adapted for using as a   exercise.  No need to reinvent the wheel. An example might be  , which is from the list above, but is also an extension of   -- which is the current Python   concept exercise. So -- for links/detail: This is a   - which is intended to focus the student on a small set of topics or concepts from Python.  So, generally, we assume the student knows how to program -- just not in Python -- but only has the bits of Python knowledge that have already been covered in the exercise prerequisites. So for  , you have a healthy amount of tools you can use in the   file, and can assume for the exercise.  But you'd want to stay away from things like  ,  ,  , or regex. Exercises should be as engaging as we can make them, given the topic -- but also not too long.  A seasoned programmer shouldn't need more than 5-15 minutes to solve one. Here are some examples of exercises and concept write-ups from both Python and other language tracks.  At each link, you can see how the exercise/concept is organized, and what the different documents look like.  :  ,    &   \\n :     &   &  \\n :   ,   &  And as a reminder: \\n \\n \\n \\n And please reach out with any questions or issues.  üëãüèΩ \\nI took a little inspiration from the   exercise and was able to come up with this   exercise, where the learners would create different functions to make the cake, bake it, and the calculate it's price. The   function can take in parameters like ingredients and amount of ingredients, so we can implement the   /   method here. The   function can take parameters like temperature, time, weight where we can implement default/named parameters. The   function can take paramters like the flavor and weight where we can implement any other concept that's been left out like positional parameters. Please have a look, and let me know if I can make any changes to make it better. I love it!  We could name it     .  And have pricing that is based on number of ingredients or types ... \\nThere are so many parameter variants, I'm sure we can find cake permutations for all of them.   One quick idea:  we could use     with default arguments for a \"base\" cake, then use   with \"price markups\" for additional ingredients/layers for pricing....   Would you like to open a draft PR with maybe some functions or instructions stubbed out - and we can start building from there?  Whichever entry point feels good for you to start on.  Also happy to collaborate in a private repo with you, if that feels better. I can also provide empty files and exercise/concept directories as a starting place -- if that helps things. Just let me know what you need.  I think you are definitely headed in the right direction!    Yes, I would start working on the fork, and open a pr once I'm done with the basic structure of exercise. But first I want to know about the flow of exercise, like as far as I know each exercise is divided into tasks, I want to know about the alignment of tasks based on concepts, like keeping the first task   and   may not be a good idea, or I'm wrong? I would like to know about how you want the exercise tasks to be aligned. Meanwhile I would start working with writing the code.  Ah!  Yes -- good questions.   So - for this, I think the general \"attack\" would be to build from the most familiar to the least familiar/most complicated: \\n \\n \\n \\n \\n \\n And once the core use cases have been covered,  the \"weird\" or \"strange\" cases: \\n \\n \\n And usually, each topic is a task, so here maybe we'd do each topic/task as a function that needs to be written?  And maybe one of the later functions might be a combination of all the different parameters that then needs to be annotated with the   and  ??  Whatever works with the story without seeming too contrived.  I would think no more than 7-8 functions tops -- less if you can manage it, since these aren't meant to be really long exercises. We also want to be careful to not introduce anything that's not in this exercise itself, or in the prerequisite exercises. And generally, I would introduce the topics in the same order as the exercise has them when I'm writing the concept documents ( ). I typically write the instructions, hints, and tests last, since I  often need working code and examples to really fill in detail for them. Does that sound good?  Let me know.   We are assuming that a given student is   new to programming.  But that they  .  We are also assuming that the student has worked through the previous exercises in the syllabus tree. So a student will have had experience with   -- and may or may not have had some exposure to   and  .  They will in all likelihood not be familiar at all with   and   or the rest of the weirdness. All that being said - we do want code examples in the support documents that are clear and easily pasted into the REPL, so students can play with them. You can review structure and layout of files here:    and  Got it, I'll start working on it right away and make a PR soon, thank you :) Just wanted to let you know, it would take some more time for me to finish this, I have some exams next month so I need to study. Thanks for the note  .    We'll keep you assigned to this issue, and you can work on it as you have time."
      },
      {
        "issue_serial": "/exercism/python/issues/2353",
        "issue_name": "[New Concept Exercise] : functions",
        "issue_label": "claimed new exercise x:action/createx:knowledge/advancedx:module/concept-exercisex:size/largex:status/claimed",
        "issue_content": "\\n          This issue describes how to implement the functions concept exercise for the python track.\\nGetting started\\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\\n\\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\\nWhat are those Weird Task Tags about?\\nBuilding Language Tracks: An Overview\\nWhat are Concepts?\\nConcept Exercise Specifications\\nConcept Specifications\\nExercism Formatting and Style Guide\\nExercism Markdown Specification\\nReputation\\n\\nGoal\\nThis concept exercise is meant to teach a deeper understanding/use of functions  in python. It should also generally explain how Python treats/views functions (as callable objects).\\nLearning objectives\\n\\nUnderstand more about  Python scopes and namespaces\\n\\nunderstand the difference between the global and nonlocal keywords and when to use them\\n\\n\\nGet familiar with the special attributes of Python functions\\nGet familiar with best practices when using return, and the difference between explicit and implicit return\\nUnderstand what is meant by \"functions are first class objects in Python\".\\n\\nunderstand that functions are objects in Python, and that they have types\\nunderstand that functions can be assigned to variables, used in expressions,  and stored in various data structures such as dicts or lists\\ncreate functons that are assigned to variables, used in expressions, and stored in different data structures.\\nunderstand and create functions that are/can be nested inside one another\\n\\n\\nUnderstand that Python considers a function a form of  callable object.\\nUnderstand that a user-defined function object is created by a function definition.\\n\\nOut of scope\\n\\narbitrary parameters\\n*args & **kwargs\\ncomprehensions\\nclosures (these will be covered in a different exercise)\\ndecorators\\ndefault parameters\\nfunctions-as-arguments\\nfunctions-as-returns\\nfunctools (this will get its own exercise)\\nfunctools.wraps\\ngenerators\\nkeyword-only arguments\\nlambda, anonymous functions\\nnamed parameters\\n/ and * for requiring parameter types\\nrecursion\\n\\nConcepts\\n\\ncallable objects\\nfirst-class functions\\nglobal\\nnested functions\\nnonlocal\\nreturn, implicit return, explicit return\\nscope\\nspecial function attributes\\n\\nPrerequisites\\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\\n\\nbasics\\nbools\\ncomparisons\\ndicts\\ndict-methods\\niteration\\nlists\\nlist-methods\\nnumbers\\nsequences\\nsets\\nstrings\\nstring-methods\\ntuples\\n\\nResources to refer to\\n\\nPython Docs: Naming and Binding\\nPython Docs: Python Scopes and Namespaces\\nPython Docs: Defining Functions\\nFunction definitions (Python Library Reference)\\nDan Bader:  Python s Functions are First-Class\\nReal Python:  Python Scope & the LEGB Rule\\nStack Overflow: Short Description of Python's Scoping Rules?\\nReal Python: Python Inner Functions: What are they Good For?\\nStack Abuse: How to Use global and nonlocal variables in Python\\nThe nonlocal Statement (Python Docs)\\nThe global Statement (Python Docs)\\nReal Python: The Python return Statement: Usage and Best Practices\\nCalls (Python Library Reference)\\nIs it a Class or a Function?  It's a Callable! (Trey Hunner)\\nCallables in Python (Vimal A.R Blog)\\nFunctions as Objects in Python -- this is a subscription-based medium blog, so not good for hints or links\\nPython Datamodel: Types\\n\\n\\n\\nHints\\nFor more information on writing hints see hints\\n\\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\\n\\n\\n\\nHints\\nFor more information on writing hints see hints\\n\\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\\n\\n\\n\\nlinks.json\\nFor more information, see concept links file\\n\\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\\n\\n\\n\\nConcept Description\\nPlease see the following for more details on these files:  concepts & concept exercises\\n\\n\\nConcept about.md\\n\\n\\nConcept file/issue: functions directory with stubbed files -- Content is TBD and should be completed as part of this exercise creation. Function concept write-ups and associated files can be included in the PR for this issue, or as a separate PR linked to this issue.\\nFor more information, see Concept about.md\\n\\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\\n\\n\\n\\nConcept introduction.md\\nFor more information, see Concept introduction.md\\n\\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\\n\\n\\n\\nExercise introduction.md\\nFor more information, see Exercise introduction.md\\n\\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\\n\\n\\n\\nTest-runner\\nNo changes required to the Python Test Runner at this time.\\nRepresenter\\nNo changes required to the Python Representer at this time.\\nAnalyzer\\nNo changes required to the Python Analyzer at this time.\\nExercise Metadata - Track\\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of the Python repo.\\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\\n\\nExercise UUID : 9f38f70d-48f4-4934-ae6e-d8277ede8edc\\nconcepts should be filled in from the Concepts section in this issue\\nprerequisites should be filled in from the Prerequisites section in this issue\\n\\nExercise Metadata Files Under  .meta/config.json\\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\\n*-.meta/config.json - see this link for the fields and formatting of this file.\\n\\n.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\\n\\nImplementation Notes\\n\\n\\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.  We run all our examplar.py files through PyLint, but do not require module docstrings.  We do require function docstrings similar to PEP257.  See this concept exercise exemplar.py for an example.\\n\\n\\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\\n\\n\\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\\n\\nAll asserts should contain a \"user friendly\" failure message (these will display on the webiste).\\nWe use a PyTest custom mark to link test cases to exercise task numbers.\\nWe also use unittest.subtest to parameterize test input where/when needed.\\nHere is an example testfile that shows all three of these in action.\\n\\n\\n\\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\\n\\n\\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\\n\\n\\nHelp\\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\\n      ",
        "issue_comment": "This issue describes how to implement the   concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n \n \n \n \n \n Goal This concept exercise is meant to teach a deeper understanding/use of    in python. It should also generally explain how Python treats/views functions ( ). Learning objectives \n \n \n \n \n \n \n \n \n \n \n \n \n \n Out of scope \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Concepts \n \n \n \n \n \n \n \n \n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Resources to refer to \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Hints For more information on writing hints see  \n \n \n Hints For more information on writing hints see  \n \n \n For more information, see  \n \n \n \n Concept Description Please see the following for more details on these files:    &  \n Concept  \n :   --   and should be completed as part of this exercise creation. Function concept write-ups and associated files can be included in the PR for this issue, or as a separate PR linked to this issue. For more information, see  \n \n \n Concept  For more information, see  \n \n \n Exercise  For more information, see  \n \n \n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the root of the Python repo. You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \n \n \n \n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  *-  - see   for the fields and formatting of this file. \n \n Implementation Notes \n Code in the   file should    We run all our   files through PyLint, but do not require module docstrings.  We   require function docstrings similar to  .  See   for an example. \n Please   comprehensions, generator expressions, or other syntax not previously covered.  Please also follow   guidelines. \n In General, tests should be written using   and the test file should be named  . \n \n \n \n \n While we do use   as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature. \n Our markdown and JSON files are checked against   .  We recommend   and running it prior to submitting your PR  to avoid any CI errors. \n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. Hello  , let me know if I can work on this.   YES!  And many thanks for stepping up and taking it on!     the links at the top for documentation should all be up-to-date, but the links down below in the detail are old, and need updating.  I will do that here shortly.  Please ( ) let me know if you have any questions or issues or need help. Also - gentle reminder to make sure you update and pull in all changes from upstream before getting a start.  I recommend rebasing   after doing a  , so that any introduced changes are inserted in order.  And -- depending on how you want to organize, you can do one PR for the   (functions) and one for the concept  .  But that's up to you.   Heya  , \nhow's it going with this concept exercise? Haven't heard anything in a few days, so I'm just checking in! Do you need me to look at some drafts of the exercise for you? Or do you have any questions? Feel free to ping me here, or submit a draft PR that we can look at and ping me there. You can also always ping me on slack! Good luck and happy coding!  Hello  , \nactually, I'm in the middle of my examinations. I'll be working on this just after that. \nI'll open a draft PR with my first edit only.. Cool, focus on your exams first ofcourse! Goodluck. Tag me in your draft PR when you make it. :) Hello,  ,  \nWhile   is under review, I need some suggestions for the real world example for this exercise. \nI initially thought of something as  , which will just calculate the simple and compound interest, but in this it wasn't possible to show reusability ."
      },
      {
        "issue_serial": "/exercism/python/issues/2352",
        "issue_name": "[New Concept Exercise] : class-composition",
        "issue_label": "help wantednew exercise x:action/createx:knowledge/advancedx:module/concept-exercisex:size/large",
        "issue_content": "\\n          This issue describes how to implement the class-composition concept exercise for the python track.\\nGetting started\\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\\n\\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\\nWhat are those Weird Task Tags about?\\nBuilding Language Tracks: An Overview\\nWhat are Concepts?\\nConcept Exercise Specifications\\nConcept Specifications\\nExercism Formatting and Style Guide\\nExercism Markdown Specification\\nReputation\\n\\nGoal\\nThis concept exercise is meant to teach an understanding/use of class-composition  in Python.\\nLearning objectives\\n\\nmore fully understand the uses (and possible abuses) of classes  in Python\\nunderstand what composition is vs inheritance in classes\\nlearn a bit about the pros and cons of using composition in classes\\nlearn about the \"Composition over inheritance\" principle\\nlearn a bit about dependency injection / inversion of control as a composition design pattern\\n\\nOut of scope\\n\\nmetaclasses\\ndataclasses\\ndecorators outside of @property, @staticmethod, and @classmethod (the student should already be exposed to these in the prerequisite exercise)\\ngenerators\\ncoroutines\\ndescriptors (these will get their own exercise)\\nusing a class as a decorator\\nperformance considerations\\n\\nConcepts\\n\\nclasses\\ncomposition in OOP\\nencapsulation in OOP\\ninheritance in OOP\\ndependency injection\\n\\nPrerequisites\\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\\n\\nbasics\\nbooleans\\nclasses\\nclass-customization\\nclass-inheritance\\ncomparisons\\ndecorators\\ndicts\\nfunctions\\nhigher-order functions\\niteration\\nlists\\nnumbers\\nsequences\\nsets\\nstrings\\ntuples\\n\\nResources to refer to\\n\\nclasses (Python tutorial)\\nReal Python: Object-Oriented Programming in Python 3\\nReal Python: Inheritance and Composition: A Python OOP Guide\\nWhat is Composition (OOP in Python)\\nWhat is Composition -- good explanation, but it uses Java\\nInheritance, Composition, and Aggregation in Python\\nThe Composition over Inheritance Principle\\nPythonic Dependency Injection: A Practical Guide\\nMethod Delegation in Python\\nPython Data Model - Python Docs\\nStack Overflow: Composition and Aggregation in Python\\n\\n\\n\\nHints\\nFor more information on writing hints see hints\\n\\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\\n\\n\\n\\nlinks.json\\nFor more information, see concept links file\\n\\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\\n\\n\\n\\nConcept Description\\nPlease see the following for more details on these files:  concepts & concept exercises\\n\\n\\nConcept about.md\\nConcept file/issue: There is currently no issue or files for the concept.  They are TBD.\\nFor more information, see Concept about.md\\n\\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\\n\\n\\n\\nConcept introduction.md\\nFor more information, see Concept introduction.md\\n\\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\\n\\n\\n\\nExercise introduction.md\\nFor more information, see Exercise introduction.md\\n\\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\\n\\n\\n\\nTest-runner\\nNo changes required to the Python Test Runner at this time.\\nRepresenter\\nNo changes required to the Python Representer at this time.\\nAnalyzer\\nNo changes required to the Python Analyzer at this time.\\nExercise Metadata - Track\\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of the Python repo.\\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\\n\\nExercise UUID : 99088a03-cf0c-41d9-bd98-173459cc1475\\nconcepts should be filled in from the Concepts section in this issue\\nprerequisites should be filled in from the Prerequisites section in this issue\\n\\nExercise Metadata Files Under  .meta/config.json\\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\\n\\n.meta/config.json - see this link for the fields and formatting of this file.\\n.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\\n\\nImplementation Notes\\n\\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.\\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\\n\\nHelp\\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\\n      ",
        "issue_comment": "This issue describes how to implement the   concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n \n \n \n \n \n Goal This concept exercise is meant to teach an understanding/use of    in Python. Learning objectives \n \n \n \n \n \n Out of scope \n \n \n \n \n \n \n \n \n Concepts \n \n \n \n \n \n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Resources to refer to \n \n \n \n \n \n \n \n \n \n \n \n \n Hints For more information on writing hints see  \n \n \n For more information, see  \n \n \n \n Concept Description Please see the following for more details on these files:    &  \n Concept  : There is currently no issue or files for the concept.   For more information, see  \n \n \n Concept  For more information, see  \n \n \n Exercise  For more information, see  \n \n \n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the root of the Python repo. You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \n \n \n \n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  \n \n \n Implementation Notes \n \n \n \n \n \n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "issue_serial": "/exercism/python/issues/2351",
        "issue_name": "[New Concept Exercise] : class-inheritance",
        "issue_label": "help wantednew exercise x:action/createx:knowledge/advancedx:module/concept-exercisex:size/large",
        "issue_content": "\n          This issue describes how to implement the class-inheritance concept exercise for the python track.\nGetting started\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\n\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\nWhat are those Weird Task Tags about?\nBuilding Language Tracks: An Overview\nWhat are Concepts?\nConcept Exercise Specifications\nConcept Specifications\nExercism Formatting and Style Guide\nExercism Markdown Specification\nReputation\n\nGoal\nThis concept exercise is meant to teach an understanding/use of class-inheritance  in Python.\nLearning objectives\n\nmore fully understand the uses (and possible abuses) of classes  in Python\nunderstanding and use of single inheritance in Python\nunderstanding and use of multiple inheritance in Python\n\nthe diamond inheritance problem\nPythons MRO (method resolution order)\npros and cos of mixins () to isolate multiple inheritance issues\n\n\nwhen and when not to use __super__() to call a parent class constructor\n\nOut of scope\n\nclass-composition as an explicit topic (it is ok to use limited composition as needed in example code)\ndataclasses\ndecorators outside of @property, @staticmethod, and @classmethod (the student should already be exposed to these in the prerequisite exercise)\ngenerators\ncoroutines\ndescriptors (these will get their own exercise)\nusing a class as a decorator\nperformance considerations\n\nConcepts\n\nclasses\ninheritance in OOP\nsingle inheritance\nmultiple inheritance\nminxins\n__super__()\n\nPrerequisites\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\n\nbasics\nbooleans\nclasses\nclass-customization\ncomparisons\ndecorators\ndicts\nfunctions\nhigher-order-functions\niteration\nlists\nnumbers\nsequences\nsets\nstrings\ntuples\n\nResources to refer to\n\nclasses (Python tutorial)\nReal Python: Object-Oriented Programming in Python 3\nReal Python: Inheritance and Composition: A Python OOP Guide\nTowards DataScience: Understand Inheritance in Python -- (this is not a good resource for hints or links, since it requires an account signup)\n\nLiskov substitution principle\n\n\nMultiple Inheritance in Python\nMultiple Inheritance is Hard (Ned Batchelder)\nPython.org: MRO in Python 2.3+\nDig into Python super() and MRO\nMultiple inheritance and mixin classes in Python\nMaking Python classes more modular using mixins\nWrite composable, reusable Python classes using Mixinsl)\nMixins in Python and Ruby Compared\nPython Data Model - Python Docs\n\n\n\nHints\nFor more information on writing hints see hints\n\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\n\n\n\nConcept Description\nConcept file/issue:  #2972\n\n\nExercise introduction.md\nFor more information, see Exercise introduction.md\n\nThis should closely relate to or summarize/paraphrase  the concept introduction document, but add enough additional information and examples  for the student to complete the tasks outlined in this concept exercise.\n\n\n\nTest-runner\nNo changes required to the Python Test Runner at this time.\nRepresenter\nNo changes required to the Python Representer at this time.\nAnalyzer\nNo changes required to the Python Analyzer at this time.\nExercise Metadata - Track\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of the Python repo.\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\n\nExercise UUID : df9adab4-d428-4774-bfd1-54fefe8c9ae7\nconcepts should be filled in from the Concepts section in this issue\nprerequisites should be filled in from the Prerequisites section in this issue\n\nExercise Metadata Files Under  .meta/config.json\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\n\n.meta/config.json - see this link for the fields and formatting of this file.\n.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\n\nImplementation Notes\n\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\n\nHelp\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\n      ",
        "issue_comment": "This issue describes how to implement the   concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n \n \n \n \n \n Goal This concept exercise is meant to teach an understanding/use of    in Python. Learning objectives \n \n \n \n \n \n \n \n \n Out of scope \n \n \n \n \n \n \n \n \n Concepts \n \n \n \n \n \n \n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Resources to refer to \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Hints For more information on writing hints see  \n \n \n Concept Description :   \n Exercise  For more information, see  \n \n \n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the root of the Python repo. You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \n \n \n \n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  \n \n \n Implementation Notes \n \n \n \n \n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. Currently being worked on in issue  ."
      },
      {
        "issue_serial": "/exercism/python/issues/2350",
        "issue_name": "[New Concept Exercise] : class-customization",
        "issue_label": "help wantednew exercise x:action/createx:knowledge/advancedx:module/concept-exercisex:size/large",
        "issue_content": "\\n          This issue describes how to implement the class-customization concept exercise for the python track.\\nGetting started\\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\\n\\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\\nWhat are those Weird Task Tags about?\\nBuilding Language Tracks: An Overview\\nWhat are Concepts?\\nConcept Exercise Specifications\\nConcept Specifications\\nExercism Formatting and Style Guide\\nExercism Markdown Specification\\nReputation\\n\\nGoal\\nThis concept exercise is meant to teach an understanding/use of class-customization  in Python.\\nLearning objectives\\n\\n\\nmore fully understand the uses (and possible abuses) of classes in Python\\n\\n\\nunderstanding of class members\\n\\n\\nunderstand some of the options that can be used to adapt a class for purposes beyond simple object creation, including:\\n\\nusing @staticmethod to provide namespaced functionality without  object instantiation.\\nusing  @classmethod to provide functionality that modifies class  attributes shared across  class instances\\nusing __repr__() and __str__() to provide human-readable and understandable class descriptions.\\n\\n\\n\\nusing property() and @property  to make getters and setters for the methods of a class\\n\\nusing property() and @property to \"compose\" or \"calculate\" and return instance attributes.\\nusing property() and @property to \"protect\" an attribute from mutation.\\n\\n\\n\\nusing functools.cached_property() to calculate a property via a method, and the cache it for future calls to the property.\\n\\n\\nPythons version of \"non-public\" methods and \"private variables\" (AKA Name mangling)\\n\\n\\nOut of scope\\n\\nclass-inheritance, multiple-inheritance, __super()__, class mixins\\nclass-composition  -- (beyond the composition needed for the decorators in this exercise)\\ndataclasses\\ndecorators outside of @property, @staticmethod, and @classmethod (the student should already be exposed to the function version of these in a prerequisite)\\ngenerators\\ncoroutines\\ndescriptors (these will get their own exercise)\\nusing a class as a decorator\\nperformance considerations\\n\\nConcepts\\n\\nclasses\\nclass attributes\\nclass members\\nclass methods, @classmethod\\nstatic methods, @staticmethod\\ndecorators\\ngetters & setters (through the use of property() and @property)\\ninstance attributes\\ninstance methods\\nnon-public methods, private variables, and name-mangling\\n\\nPrerequisites\\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\\n\\nbasics\\nbooleans\\nclasses\\ncomparisons\\ndecorators\\ndicts\\nfunctions\\nhigher-order-functions\\niteration\\nlists\\nnumbers\\nsequences\\nsets\\nstrings\\ntuples\\n\\nResources to refer to\\n\\nclasses (Python tutorial)\\nprivate variables (Python tutorial)\\nPython Data Model - Python Docs\\nclass property() - (Python Docs)\\nReal Python:  Python's Instance, Class, and Static Methods Demystified\\nReal Python: Object-Oriented Programming in Python 3\\n\\n\\n\\nHints\\nFor more information on writing hints see hints\\n\\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\\n\\n\\n\\nlinks.json\\nFor more information, see concept links file\\n\\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\\n\\n\\n\\nConcept Description\\nPlease see the following for more details on these files:  concepts & concept exercises\\n\\n\\nConcept about.md\\nConcept file/issue: There is currently no issue or files for the concept.  They are TBD.\\nFor more information, see Concept about.md\\n\\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\\n\\n\\n\\nConcept introduction.md\\nFor more information, see Concept introduction.md\\n\\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\\n\\n\\n\\nExercise introduction.md\\nFor more information, see Exercise introduction.md\\n\\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\\n\\n\\n\\nTest-runner\\nNo changes required to the Python Test Runner at this time.\\nRepresenter\\nNo changes required to the Python Representer at this time.\\nAnalyzer\\nNo changes required to the Python Analyzer at this time.\\nExercise Metadata - Track\\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of the Python repo.\\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\\n\\nExercise UUID : 79af6c54-c826-4971-833f-2039dd6982bc\\nconcepts should be filled in from the Concepts section in this issue\\nprerequisites should be filled in from the Prerequisites section in this issue\\n\\nExercise Metadata Files Under  .meta/config.json\\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\\n\\n.meta/config.json - see this link for the fields and formatting of this file.\\n.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\\n\\nImplementation Notes\\n\\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.\\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\\n\\nHelp\\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\\n      ",
        "issue_comment": "This issue describes how to implement the   concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Goal This concept exercise is meant to teach an understanding/use of    in Python. Learning objectives \\n more fully understand the uses ( ) of   in Python \\n understanding of  \\n understand some of the options that can be used to adapt a   for purposes beyond simple   creation, including: \\n \\n \\n \\n \\n using   and    to make getters and setters for the methods of a  \\n \\n \\n \\n using   to calculate a property via a  , and the cache it for future calls to the property. \\n Pythons version of \"non-public\" methods and \"private variables\" (AKA  ) \\n Out of scope \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Concepts \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n \\n Resources to refer to \\n \\n \\n \\n \\n \\n \\n \\n Hints For more information on writing hints see  \\n \\n \\n For more information, see  \\n \\n \\n \\n Concept Description Please see the following for more details on these files:    &  \\n Concept  : There is currently no issue or files for the concept.   For more information, see  \\n \\n \\n Concept  For more information, see  \\n \\n \\n Exercise  For more information, see  \\n \\n \\n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the root of the Python repo. You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \\n \\n \\n \\n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  \\n \\n \\n Implementation Notes \\n \\n \\n \\n \\n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "issue_serial": "/exercism/python/issues/2348",
        "issue_name": "[New Concept Exercise] :  dict-methods",
        "issue_label": "claimed new exercise x:action/createx:knowledge/advancedx:module/concept-exercisex:size/largex:status/claimed",
        "issue_content": "\n          This issue describes how to implement the dict-methods (dictionary methods) concept exercise for the python track.\nGetting started\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\n\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\nWhat are those Weird Task Tags about?\nBuilding Language Tracks: An Overview\nWhat are Concepts?\nConcept Exercise Specifications\nConcept Specifications\nExercism Formatting and Style Guide\nExercism Markdown Specification\nReputation\n\nGoal\nThis concept exercise is meant to teach an understanding/use of useful dict-methods  (methods from the dict - dictionary class) and some additional practice/techniques for working with dicts.\nLearning objectives\nCover useful dict methods and a few techniques for operating on/manipulating dicts.\n\n\ndict methods :\n\nget()\nclear()\npopitem()\nupdate()\nclassmethod fromkeys(iterable[, value])\nPythong 3.9 pipe or union operator (d | other, d |= other) - note: may not be included.  Decision still TBD.\n\n\n\nWorking more with  the dict views items() , keys() or values().  (e.g, by sorting information using sorted() or by swapping keys and values, etc.)\n\n\nKnowing that Dictionaries can be nested, -- e.g. ' a dictionary of dictionaries'.\n\n\nConsiderations when updating() or using union with dictionaries.\n\n\nOut of scope\nPlease take a look at the dicts concept exercise design.md file for dict features  taught thus far.  While those methods can be used for solutions to this exercise, it  isn't necessary to cover them again in detail.  Additionally, the following is out of scope:\n\nDictionary comprehensions\nBuilt-in functions as they relate to this data structure (e.g. len(), or enumerate()\nConsiderations of Mutability\ncopy() vs deepcopy()\nMemory and performance characteristics.\nRelated collections module with Counter() and defaultdict()\n\nConcepts\n\ndicts\ndict-methods\n\nPrerequisites\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\n\nbasics\nbools\nconditionals\ncomparisons\ndicts\nlists\nloops\nnumbers\nstrings\ntuples\n\nResources to refer to\n\nPython docs:  Tutorial - Dictionaries\nPython docs:  Mapping Type dict\nReal Python:  Dicts\nDigital Ocean:  Understanding dictionaries in python 3\nStack Overflow: exchanging keys with values in a dict in Python\nkite:  how to sort a dictionary by key in python\nmedium:  16 Python Dictionary Tips  note: this is a good resource for ideas and writing this exericse, but is a subscription-based service, so not the best for linking to\n\n\n\nHints\nFor more information on writing hints see hints\n\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\n\n\n\nlinks.json\nFor more information, see concept links file\n\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\n\n\n\nConcept Description\nPlease see the following for more details on these files:  concepts & concept exercises\n\n\nConcept about.md\nConcept file/issue: There is a PR pending for this concept that includes about.md, introduction.md, and links.json :   PR 2374.  If the PR has been merged, the files can be found under python/concepts/dict-methods/\nFor more information, see Concept about.md\n\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\n\n\n\nConcept introduction.md\nFor more information, see Concept introduction.md\n\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\n\n\n\nExercise introduction.md\nFor more information, see Exercise introduction.md\n\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\n\n\n\nTest-runner\nNo changes required to the Python Test Runner at this time.\nRepresenter\nNo changes required to the Python Representer at this time.\nAnalyzer\nNo changes required to the Python Analyzer at this time.\nExercise Metadata - Track\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of the Python repo.\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\n\n\nExercise UUID : 1f67781e-07a3-4d00-a49f-59493e7b7f2c\n\n\nconcepts should be filled in from the Concepts section in this issue\n\n\nprerequisites should be filled in from the Prerequisites section in this issue\n\n\nExercise Metadata Files Under  .meta/config.json\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\n\n\n.meta/config.json - see this link for the fields and formatting of this file.\n\n\n.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\n\n\nImplementation Notes\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\nHelp\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\n      ",
        "issue_comment": "This issue describes how to implement the   (dictionary methods) concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n \n \n \n \n \n Goal This concept exercise is meant to teach an understanding/use of useful    (methods from the   - dictionary class) and some additional practice/techniques for working with  . Learning objectives Cover useful   methods and a few techniques for operating on/manipulating  . \n  methods : \n \n \n \n \n \n \n \n Working more with  the   views   ,   or  .  (e.g, by sorting information using   or by swapping   and  , etc.) \n Knowing that Dictionaries can be  ,   ' a dictionary of dictionaries'. \n Considerations when   or using   with dictionaries. \n Out of scope Please take a look at the   concept exercise   for   features  taught thus far.  While those methods can be used for solutions to this exercise, it  isn't necessary to cover them again in detail.  Additionally, the following is out of scope: \n \n \n \n \n \n \n Concepts \n \n \n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \n \n \n \n \n \n \n \n \n \n \n Resources to refer to \n \n \n \n \n \n \n \n \n Hints For more information on writing hints see  \n \n \n For more information, see  \n \n \n \n Concept Description Please see the following for more details on these files:    &  \n Concept  : There is a PR pending for this concept that includes  ,  , and   :    .  If the PR has been merged, the files can be found under  For more information, see  \n \n \n Concept  For more information, see  \n \n \n Exercise  For more information, see  \n \n \n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the root of the Python repo. You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \n  :  \n  should be filled in from the Concepts section in this issue \n  should be filled in from the Prerequisites section in this issue \n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  \n  - see   for the fields and formatting of this file. \n  - see   for the formatting of this file.  Please use the  ,  , ,   and ,    sections  from this issue. \n Implementation Notes Code in the   file should  \nPlease   comprehensions, generator expressions, or other syntax not previously covered.  Please also follow   guidelines. In General, tests should be written using   and the test file should be named  . While we do use   as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature. Our markdown and JSON files are checked against   .  We recommend   and running it prior to submitting your PR  to avoid any CI errors. Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel."
      },
      {
        "issue_serial": "/exercism/python/issues/2310",
        "issue_name": "[CI] Update tooling for v3",
        "issue_label": "",
        "issue_content": "\n          Changed components\n\nExercises are no longer in just one directory (exercises/). They are in either exercises/concept/ or exercises/practice/\nExample solutions will now be under a .meta/ directory:\n\npractice exercise example files will move from the directory itself (two-fer/example.py) to a new .meta/ directory.  Optionally, files can be renamed to proof.py, demo.py, exemplar.py, or stay example.py.\nconcept exercise exemplars are currently located under concept/<exercise-slug>/.meta/exemplar.py (e.gconcept/currency-exchange/.meta/exemplar.py), and will remain there.\n\n\nconfig.json's exercises field is no longer an array of exercises. It is an object with two properties: concept and practice. These each have the same format as the old exercises property.\nExercise READMEs vary by exercise type.\n\npractice exercise READMES follow the conventions listed here\nconcept exercise READMES follow the conventions listed here\n\n\n\nScripts dependent on changes components:\n\n bin/template_status.py\n bin/generate_tests.py\n test/check-exercises.py\n\nObsolete scripts\nThe following scripts are no longer needed:\n\n bin/check-readmes.sh\n bin/check-test-version.py (versions no longer used in problem-specifications)\n\nAmbiguity\n@ErikSchierboom, we have these scripts. Neither are needed for CI, but which (if either) should be kept for contributors/maintainers who need to run the new v3 configlet locally\n\n bin/fetch-configlet\n bin/fetch-canonical_data_syncer\n\n      ",
        "issue_comment": "Changed components \n \n \n \n \n \n \n \n \n \n \n Scripts dependent on changes components: Obsolete scripts The following scripts are no longer needed: Ambiguity , we have these scripts. Neither are needed for CI, but which (if either) should be kept for contributors/maintainers who need to run the new v3 configlet locally Additionally, it might be easier to maintain our CI workflows if we break out ci-workflow.yml into separate workflow files. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. Holding open for a bit.   - apologies for pinging.  Can this be closed, or should I hold it open, but un-assign you?"
      },
      {
        "issue_serial": "/exercism/python/issues/2275",
        "issue_name": "[V2] ImportError while importing test module",
        "issue_label": "maintainer action requiredmaintainer chore ",
        "issue_content": "\\n          Good day. I first offer the obligatory \"I'm not GitHub-savvy\" apology. I did look for an answer as prescribed here, following steps in subheading Opening an Issue. But I have not seen anything. I've seen some fixes on Stack Overflow. But they make no sense to me. Please don't crush me if I'm doing this wrong.\\nI'm working on a new linux install. On my previous installation, I ran pytest successfully many times (28 to be precise). With this new installation, I've run it once successfully on exercise Twelve Days of Christmas. It's giving me this error now:\\n$ /home/dan/.local/bin/pytest meetup_test.py \\n============================= test session starts ==============================\\nplatform linux -- Python 3.8.5, pytest-6.1.2, py-1.9.0, pluggy-0.13.1\\nrootdir: /home/dan/exercism/python/meetup\\ncollected 0 items / 1 error                                                    \\n\\n==================================== ERRORS ====================================\\n_______________________ ERROR collecting meetup_test.py ________________________\\nImportError while importing test module '/home/dan/exercism/python/meetup/meetup_test.py'.\\nHint: make sure your test modules/packages have valid Python names.\\nTraceback:\\n/usr/lib/python3.8/importlib/__init__.py:127: in import_module\\n    return _bootstrap._gcd_import(name[level:], package, level)\\nmeetup_test.py:4: in <module>\\n    from meetup import meetup, MeetupDayException\\nE   ImportError: cannot import name 'MeetupDayException' from 'meetup' (/home/dan/exercism/python/meetup/meetup.py)\\n=========================== short test summary info ============================\\nERROR meetup_test.py\\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\\n=============================== 1 error in 0.09s ===============================\\n$\\n\\nI tried removing the meetup directory and re-downloading from the CLI. I get this error no matter what the contents of meetup.py are. So, I'm guessing that I have some issue either with they way pytest is configured or with my meetup_pytest file.\\nAny assistance greatly appreciated.\\nThank you so much.\\nDan.\\n      ",
        "issue_comment": "Good day. I first offer the obligatory \"I'm not GitHub-savvy\" apology. I   look for an answer as prescribed  , following steps in subheading  . But I have not seen anything. I've seen some fixes on Stack Overflow. But they make no sense to me. Please don't crush me if I'm doing this wrong. I'm working on a new linux install. On my previous installation, I ran pytest successfully many times (28 to be precise). With this new installation, I've run it once successfully on exercise  . It's giving me this error now: I tried removing the meetup directory and re-downloading from the CLI. I get this error no matter what the contents of meetup.py are. So, I'm guessing that I have some issue either with they way pytest is configured or with my meetup_pytest file. Any assistance greatly appreciated. Thank you so much. \\nDan. Please also show us the content of your  . But currently I'd say it is missing a definition for the  . \\\\cc  Hi, Norbert. Thank you for the reply. Here is my code. I see the line you're referring to for the import error. Normally, I fill in the function definitions as provided in the .py file for the exercise. Am I supposed to create a MeetupDayException? Thank you, \\nDan. Hi    Since   is in CET, I'm picking this up.  ( ).   Apologies - the test file for this exercise appears to have been updated since you last worked on/ran it, and it is   expecting you to define a   class. To get around this ( ) you can add the following to the top of your   file, directly below the line that says  , and remove   from the import line, so that the two look like this: That way, you can run and work on any tests that might be failing right now for you.  When I ran your code, it looks as though 7 of the 90 tests have failed -- mostly for   where the day is out of range for the month. To fully pass all the tests without the test file modification, you will need to make a custom   Class by subclassing  .  Something along the lines of this: As you can see, I've made a function that is named   that calls a function called   ( ).  You probably want to be more targeted in the errors you catch/raise -- so you can raise the exception specifically/directly as   or   get caught within your code -- but this was quicker for me to demonstrate. For more detail on how to create/customize and handle errors, take a look at the docs  . Please let us know if this works for you, and if you have any additional questions or issues. Best, \\nBethany OK... I think I get it. I was able to mend my code to get pytest working with both the modifications to the pytest file you suggested and also after adding the MeetupDayException class. And I was able to weed out those ValueErrors too. =) This was very helpful. Thank you so much,   !  this issue may be moved to exercism/python  I would like to leave this open as a reference issue until we've made the changes we talked about. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. Going to comment here since we still have changes that require this to be open.  Removing the [abandoned] tag."
      },
      {
        "issue_serial": "/exercism/python/issues/2287",
        "issue_name": "[New Concept Exercise] : rich comparisons",
        "issue_label": "",
        "issue_content": "\\n          This issue describes how to implement the rich-comparisons concept exercise for the python track.\\nGetting started\\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\\n\\nThe features of v3\\nThe Anatomy of Exercism & The Anatomy of a Language Track\\nConcepts & Concept Exercises\\nExercism Formatting and Style Guide\\nExercism Markdown Specification\\n\\nWatching the following video is also helpful. It is a bit outdated, but is good for describing the general process:\\n\\nThe Anatomy of a Concept Exercise.\\n\\nGoal\\nThis concept exercise is meant to teach an understanding/use of rich comparison methods in python. It should also generally explain how to override the behavior of rich comparison operators and methods.\\nLearning objectives\\n\\nunderstanding (and using the concept) that the == operator calls the dunder method __eq__() on a specific object, and uses that object's implementation for comparison.  Where no implementation is present, the default __eq__() from generic object is used.\\nthe same applies for operators <, <=, !=, >=, > and correspondents dunder methods __lt__, __le__, __ne__, __ge__, __gt__\\noverriding the default implementation of the __eq__() dunder method on a specific object to customize comparison behavior.\\noverriding the default implementations of the __lt__, __le__, __ne__, __ge__, __gt__ dunder methods on a specific object to customize comparison behavior.\\nthe pros and cons of using functools.total_ordering to \"shortcut\" defining all rich comparison methods for a class.\\nreturn the singleton NotImplemented if the called operation is not implemented\\n\\nOut of scope\\n\\nperformance considerations\\n\\nConcepts\\n\\n__eq__, __lt__, __le__, __ne__, __ge__, __gt__ dunder methods\\ncomparison behavior customization\\noperator overload\\ndunder methods override\\n\\nPrerequisites\\nThese are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise.\\n\\nbasics\\nbooleans\\nclasses\\nclass-customization\\nclass-inheritance\\nclass-composition\\ncomparisons\\ndicts\\ndict-methods\\niteration\\nlists\\nlist-methods\\nnumbers\\noperator-overloading\\nsequences\\nsets\\nstrings\\nstring-methods\\ntuples\\n\\nResources to refer to\\n\\nRich comparison (Python language reference)\\nRich comparison on handshake\\nRich comparisons PEP207\\n\\n\\n\\nHints\\nFor more information on writing hints see hints\\n\\nYou can refer to one or more of the resources linked above, or analogous resources from a trusted source.  We prefer using links within the  Python Docs as the primary go-to, but other resources listed above are also good.  Please try to avoid paid or subscription-based links if possible.\\n\\n\\n\\nlinks.json\\nFor more information, see concept links file\\n\\nThe same resources listed in this issue can be used as a starting point for the  concepts/links.json  file, if it doesn't already exist.\\nIf there are particularly good/interesting information sources for this concept that extend or supplement the concept exercise material & the resources already listed -- please add them to the links.json document.\\n\\n\\n\\nConcept Description\\nPlease see the following for more details on these files:  concepts & concept exercises\\n\\n\\nConcept about.md\\nConcept file/issue: There is currently no issue or files for the concept.  They are TBD.\\nFor more information, see Concept about.md\\n\\nThis file provides information about this concept for a student who has completed the corresponding concept exercise.  It is intended as a reference for continued learning.\\n\\n\\n\\nConcept introduction.md\\nFor more information, see Concept introduction.md\\n\\nThis can also be a summary/paraphrase of the  document listed above, and will provide a brief introduction of the concept for a student who has not yet completed the concept exercise.   It should contain a good summation of the concept, but not go into lots of detail.\\n\\n\\n\\nExercise introduction.md\\nFor more information, see Exercise introduction.md\\n\\nThis should also summarize/paraphrase  the above document, but with  enough information and examples  for the student to complete the tasks outlined in this concept exercise.\\n\\n\\n\\nTest-runner\\nNo changes required to the Python Test Runner at this time.\\nRepresenter\\nNo changes required to the Python Representer at this time.\\nAnalyzer\\nNo changes required to the Python Analyzer at this time.\\nExercise Metadata - Track\\nFor more information on concept exercises and formatting for the Python track config.json , please see concept exercise metadata.  The track config.json file can be found in the root of the Python repo.\\nYou can use the below for the exercise UUID.  You can also generate a new  one via exercism configlet, uuidgenerator.net, or any other favorite method.  The UUID must be a valid  V4 UUID.\\n\\nExercise UUID : 0fc646ac-667e-4fc9-bdee-9be7d5431987\\nconcepts should be filled in from the Concepts section in this issue\\nprerequisites should be filled in from the Prerequisites section in this issue\\n\\nExercise Metadata Files Under  .meta/config.json\\nFor more information on exercise  .meta/  files and formatting, see concept exercise metadata files\\n-.meta/config.json - see this link for the fields and formatting of this file.\\n\\n.meta/design.md - see this link for the formatting of this file.  Please use the Goal, Learning Objectives,Concepts, Prerequisites and , Out of Scope  sections  from this issue.\\n\\nImplementation Notes\\nCode in the .meta/examplar.py file should only use syntax & concepts introduced in this exercise or one of its prerequisite exercises.\\nPlease do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\\nIn General, tests should be written using unittest.TestCase and the test file should be named <EXERCISE-NAME>_test.py.\\nWhile we do use PyTest as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature.\\nOur markdown and JSON files are checked against prettier .  We recommend setting prettier up locally and running it prior to submitting your PR  to avoid any CI errors.\\nHelp\\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\\n      ",
        "issue_comment": "This issue describes how to implement the   concept exercise for the python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n \n Watching the following video is also helpful. It is a bit outdated, but is good for describing the general process: \n \n Goal This concept exercise is meant to teach an understanding/use of   methods in python. It should also generally explain how to override the behavior of     and  . Learning objectives \n \n \n \n \n \n \n Out of scope \n \n Concepts \n \n \n \n \n Prerequisites These are the concepts/concept exercises the student needs to complete/understand before solving this concept exercise. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Resources to refer to \n \n \n \n \n Hints For more information on writing hints see  \n \n \n For more information, see  \n \n \n \n Concept Description Please see the following for more details on these files:    &  \n Concept  : There is currently no issue or files for the concept.   For more information, see  \n \n \n Concept  For more information, see  \n \n \n Exercise  For more information, see  \n \n \n Test-runner No changes required to the   at this time. Representer No changes required to the   at this time. Analyzer No changes required to the   at this time. Exercise Metadata - Track For more information on concept exercises and formatting for the Python track   , please see  .  The track   file can be found in the root of the Python repo. You can use the below for the exercise  .  You can also generate a new  one via  ,  , or any other favorite method.  The UUID must be a valid   . \n \n \n \n Exercise Metadata Files Under   For more information on exercise     files and formatting, see  -  - see   for the fields and formatting of this file. \n \n Implementation Notes Code in the   file should  Please   comprehensions, generator expressions, or other syntax not previously covered.  Please also follow   guidelines. In General, tests should be written using   and the test file should be named  . While we do use   as our test runner and for some implementation tests, please check with a maintainer before using  a PyTest test method, fixture,  or feature. Our markdown and JSON files are checked against   .  We recommend   and running it prior to submitting your PR  to avoid any CI errors. Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel. Nicely written!  Thank you so much for logging this,  ! I'd like to work on this one.  -  YAY!  Thank you so much for stepping up.       We look forward to seeing what you come up with!  Please reach out here or in our Slack channel should you have any questions or issues.     -- Please note that the description of this issue has changed, and is now linked to new requirements and documentation.  Since it's been a bit since we've heard from you, I'm going to flag this issue  .  If you are still working/want to work on this issue, please let me know, and I will re-flag it as   for you. This should stay open."
      },
      {
        "issue_serial": "/exercism/python/issues/2214",
        "issue_name": "Tests appear to be running in alphabetical order for Raindrops",
        "issue_label": "discussion maintainer action required",
        "issue_content": "\\n          I tried out a couple of exercises on the Python track today, and noticed with the Raindrops exercise in particular that the tests were requiring me to implement the entire algorithm on the second failure.\\nI'm working in Python 3.8.5.\\nI run the tests with the following command:\\npytest -x raindrops_test.py\\n\\nWith the unchanged stub file in place, I get the following failure:\\n    def test_2_to_the_power_3_does_not_make_a_raindrop_sound_as_3_is_the_exponent_not_the_base(\\n        self\\n    ):\\n>       self.assertEqual(convert(8), \"8\")\\nE       AssertionError: None != '8'\\n\\nThis is a reasonable \"first\" failure, since it's a single number that should be turned into a string.\\nIf I make that pass with a hard-coded return \"8\", then this is the next failure I get:\\n    def test_the_sound_for_105_is_pling_plang_plong_as_it_has_factors_3_5_and_7(self):\\n>       self.assertEqual(convert(105), \"PlingPlangPlong\")\\nE       AssertionError: '8' != 'PlingPlangPlong'\\nE       - 8\\nE       + PlingPlangPlong\\n\\nLooking at the tests, the order that they are defined in is quite nice, in terms of pushing the implementation forward step by step.\\nI tried adding the following declaration after the import unittest statement, to see if this would cause the tests to be run in the order that they are defined:\\nunittest.TestLoader.sortTestMethodsUsing = None\\n\\nThis did not change the order that the tests are run in.\\nIf I sort the tests alphabetically by name, it appears to correspond to the order that I'm seeing when doing the exercise:\\nWhile under normal circumstances I would want tests to be run in random order, in Exercism exercises I think that it would make more sense to run the tests in the order that they are defined.\\nIs there a declaration we can make in order to accomplish this?\\nIf not, then I would propose that we rename tests by adding a numeric prefix to the test name (e.g.\\ndef test_01_the_sound_for_1_is_1(self):\\n\\n      ",
        "issue_comment": "I tried out a couple of exercises on the Python track today, and noticed with the Raindrops exercise in particular that the tests were requiring me to implement the entire algorithm on the second failure. I'm working in Python 3.8.5. I run the tests with the following command: With the unchanged stub file in place, I get the following failure: This is a reasonable \"first\" failure, since it's a single number that should be turned into a string. \\nIf I make that pass with a hard-coded  , then this is the next failure I get: Looking at the tests, the order that they are defined in is quite nice, in terms of pushing the implementation forward step by step. I tried adding the following declaration after the   statement, to see if this would cause the tests to be run in the order that they are defined: This did not change the order that the tests are run in. If I sort the tests alphabetically by name, it appears to correspond to the order that I'm seeing when doing the exercise: While under normal circumstances I would want tests to be run in random order, in Exercism exercises I think that it would make more sense to run the tests in the order that they are defined. Is there a declaration we can make in order to accomplish this? \\nIf not, then I would propose that we rename tests by adding a numeric prefix to the test name (e.g. I did a search, and it looks like there has been some discussion about this previously: \\n \\n \\n  said in  : We didn't do that for a good reason: we simply cannot rely on the canonical-data.json files having taken ordering into account in a manner that makes any sense to this sort of progressive TDD approach. Many tests have been added with no discernible concern for that sort of ordering, and I simply don't see us being able to apply such an ordering to that data, especially since that repo is still locked. My quite take on this is that, while that's true and there are lots of places that the tests may not have been ordered correctly, there are also a significant amount of places where they   been deliberately ordered and where that order greatly improves the learning experience. So there is value to respecting the order, although it will not always be beneficial, and I can't see the downside of not respecting the order. If that is accurate, then the only negative of implementing some solution that respects the order is that (as outlined in   and other places) there's not a particularly clean solution. However, I would argue that an ugly solution is better than not having ordering. So, pending someone willing to do the work, I think this is a change we should make. Piping in to explain: the technical reason we never did this is       imply line order sort, it merely removes entirely any current sort behavior (which is alpha by default)... so instead what you get is an undocumented and undefined order, though in practice in the current source code that‚Äôs the implicit sort order returned by calling   which, annoyingly, is alpha sort. To reliably get line order you need to set the   class attribute to a function that looks up the line number in the source code of the original file via runtime introspection and compares based on that... such a function is non-trivial, involves importing at least the   module, and would need to be added to the template for   generated test file. It‚Äôs also fairly brittle if inheritance is used to cobble together unittest.TestCase instances, though I can‚Äôt think of an example of that in our code base. All of that,   the fact that it just generally seems a bad idea to imply to students that they should expect a fully curated sort order in the real world of Python development, has weighed against this change. Now, yes, another simpler way would be to add to the templates some test name generator logic that would introduce a sorting number (so each test method would be generated as ‚Äútest_0001_some_aspect‚Äù, ‚Äútest_0002_some_other_aspect‚Äù, etc), but we‚Äôd have to ensure zero padding for unknown numbers of tests, and we‚Äôve already got a problem with overlong test names.  Thanks for explaining :) In   you mused about pytest saying: Thus if we give a hard requirement on pytest as the only \"blessed\" test runner then wouldn't we be better off simply re-writing all the templates to generate pytest-style tests anyway, and we'd get the definition order for free in the process? Is there a (good enough) reason not to use pytest as the \"blessed\" runner? I believe many other tracks do have a specific test runner that they advocate (the JS family as an example). It sounds like this would simplify the situation and maybe give us a cleaner solution? But I don't know enough about Python to understand the tradeoffs. Is there a (good enough) reason not to use pytest as the \"blessed\" runner? Reasons not to restrict to single test runner (I don't know if any of them are \"good enough\"): \\n \\n \\n \\n \\n These exercises are supposed to teach the basics, so I think it makes more sense to have just unittest usage explained to avoid the issue of people having to figure out how to install pytest. I don‚Äôt really see the benefit of pytest over unittest here, other than slightly prettier output. If someone is already familiar with another runner, I would think they‚Äôd know how to use it already regardless. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. I am going to re-open this issue.  In light of V3 changes that now depend on   and the test runner interface for V3   having a task number and implementation tests ( ), it no longer makes sense to argue that we are \"only\" using  . We now have dependancies on  , and   is at the heart of the runner that will be used on the V3 Website to run student code -- so we should instruct students to also install the same test runner and configuration on their own machines, so that they can use the same toolset prior to uploading.  is   popular ( ) and is used for most Python projects  ( ) --   has been in maintenance mode for a while,  and no one has stepped forward to continue development.    is also largely in a holding pattern.  There is   - but it is pretty new.  The vast majority of the instruction or tutorials a student might encounter would point them to  , or   + plugins.  See   and   for some examples. Not going to go into ordering atm, but   and   as plugins to PyTest look interesting as options."
      },
      {
        "issue_serial": "/exercism/python/issues/2297",
        "issue_name": "[V3] Would be possible to have all the python exercises including a pytest-bench?",
        "issue_label": "pinned ",
        "issue_content": "\n          This is feedback on the v3 roadmap (#690).\n\nHello,\nI didn't know where to write this.\nWould be possible to have all the python exercises including a pytest-bench or similar in order to have the same functionality as golang track have in v2?\n      ",
        "issue_comment": "This is feedback on the v3 roadmap ( ). Hello, \\nI didn't know where to write this. \\nWould be possible to have all the python exercises including a pytest-bench or similar in order to have the same functionality as golang track have in v2? Hi  \\nIt is great to have input on v3! \\nIf this is feedback on  , perhaps the place to write it would be as a reply on   . \\nIt may be a good also to describe what functionality you are referring to for the \"golang track in v2\". The structure of v3 is quite different in a lot of regards, and a lot of the people working on it may not be familiar with the specifics of a given track from v2 :)  This is the correct way to comment on   - no comments are allowed directly on that issue. Each new issue is effectively a thread (so   for clarity - you've done the right thing, although if you could specify an actual subject in place of  \\xa0- that would be great :)) The structure of v3 is quite different in a lot of regards, and a lot of the people working on it may not be familiar with the specifics of a given track from v2 :) Yes. This. Expanding would be great :)  This Python question slipped through the cracks under the guise of a v3-roadmap question :) I just saw!  Thank you for catching this.  I'll transfer it over, and take a look.     -- while we don't have plans to include benchmark tests for V3  , it is certainly something we've discussed adding to the track.  For  , we are using PyTest for our test runner and have been developing a plug-in for our concept exercises -- so it should be relatively straightforward to do the same for benchmarking if we choose to add that. We'll also be adding some linting and automated feedback for both concept exercises and practice exercises ( ).  For a list of general V3 features, check out  , which is a little outdated -- but should get updated soon. Adding a link to  , so we don't forget.   This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. Bad bot!  This is still active."
      },
      {
        "issue_serial": "/exercism/python/issues/2289",
        "issue_name": "[New Concept Exercise] : imports",
        "issue_label": "on hold ‚úãüèΩ",
        "issue_content": "\\n          This issue describes how to implement the imports concept exercise for the Python track, which should explain how & why it is useful to import names (libraries, modules, classes, functions, etc.) in Python.  We're naming the concept \"imports\" to avoid a file name clash with the import keyword.\\nGetting started\\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\\n\\nThe features of v3.\\nRationale for v3.\\nWhat are concept exercise and how they are structured?\\n\\nPlease also watch the following video:\\n\\nThe Anatomy of a Concept Exercise.\\n\\nGoal\\nThis concept exercise should convey a basic understanding and usage of import and import from in a Python program.  Additionally, the student should learn how to employ the as keyword for aliasing  (re-naming) in animport context.\\nLearning objectives\\n\\nUse the import keyword to import an entire Python library or module for use in a program\\nuse the as keyword to refer to an imported module by some other (aliased) name\\nuse the from keyword to import only specific classes/functions/names from a library or module\\nuse the  as keyword with the from keyword to alias or re-name the specific classes/functions/names imported from a library or module.\\nbe aware of import conventions as outlined in PEP8\\n\\nOut of scope\\n\\nThe importlib module, and the customization of import behavior.\\n\\nConcepts\\n\\nimport statement\\nimport from statement\\nimport ... as statement\\n\\nPrerequisites\\n\\nbasics\\n\\nResources to refer to\\n\\nimport (python docs)\\nyawpitchroll blog: import (The 35 words you need to Python)\\nyawpitchroll blog: as (The 35 words you need to Python)\\nReal Python: the Import keywords\\nPEP-8: imports\\n\\nHints\\n\\nHints should refer to one or more of the links above, or analogous links from trusted sources or the Python docs.\\n\\nConcept Description\\n(a variant of this can be used for the v3/languages/python/concepts/<concept>/about.md doc and this exercises  introduction.md doc.)\\nConcept Description Needs to Be Filled In Here/Written\\nSome \"extras\" that we might want to include as notes in the concept description, or as links in links.json:\\n\\nConsiderations and conventions when importing a large amount of libraries.\\nSpecific conventions used in large frameworks and projects such as django or pandas\\nMore details on Pythons import system and importlib\\nModules and and the module search path\\n\\nRepresenter\\nNo changes required.\\nAnalyzer\\nNo changes required.\\nImplementing\\nThe general Python track concept exercise implantation guide can be found here.\\nTests should be written using unittest.TestCase and the test file named imports_test.py.\\nCode in the .meta/example.py file should only use syntax & concepts introduced in this exercise or one of its prerequisites. Please do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\\nHelp\\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\\nEdits\\n\\nAdded additional links for as and from keywords.  Re-phrased goals and objectives for clarity.  @BethanyG\\n\\n      ",
        "issue_comment": "This issue describes how to implement the   concept exercise for the Python track, which should explain how & why it is useful to   names (libraries, modules, classes, functions, etc.) in Python.  We're naming the concept \"imports\" to avoid a file name clash with the   keyword. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \\n \\n \\n \\n Please also watch the following video: \\n \\n Goal This concept exercise should convey a basic understanding and usage of   and   in a Python program.  Additionally, the student should learn how to employ the   keyword for    (re-naming) in an  context. Learning objectives \\n \\n \\n \\n \\n \\n Out of scope \\n \\n Concepts \\n \\n \\n \\n Prerequisites \\n \\n Resources to refer to \\n \\n \\n \\n \\n \\n Hints \\n \\n Concept Description ( ) \\n \\n \\n \\n \\n Representer No changes required. Analyzer No changes required. Implementing The general Python track concept exercise implantation guide can be found  . Tests should be written using   and the test file named  . Code in the   file should   Please do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow   guidelines. Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel. Edits \\n \\n Not yet sure we need/want an entire exercise devoted to  .  Putting this back on hold until we decide."
      },
      {
        "issue_serial": "/exercism/python/issues/2202",
        "issue_name": "Fix check-readmes.sh",
        "issue_label": "pinned ",
        "issue_content": "\n          \n Not all exercises are run through the script\n Script does not fail on out-of-date README\n\nSee https://github.com/exercism/python/pull/2200/files#r421688872 for more info\n*Edit: further context #2200 (comment)\n      ",
        "issue_comment": "See   for more info *Edit: further context  This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. Still open."
      },
      {
        "issue_serial": "/exercism/python/issues/2290",
        "issue_name": "[New Concept Exercise] : sequences and common sequence operations",
        "issue_label": "claimed new exercise x:size/largex:status/claimed",
        "issue_content": "\\n          Note:  this issue was ported from the working [V3] repo, and needs to be re-done.\\nThis issue describes how to implement the slicing concept exercise for the Python track.\\nGetting started\\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\\n\\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\\nWhat are those Weird Task Tags about?\\nBuilding Language Tracks: An Overview\\nWhat are Concepts?\\nConcept Exercise Specifications\\nConcept Specifications\\nExercism Formatting and Style Guide\\nExercism Markdown Specification\\nReputation\\n\\nGoal\\nThe goal of this exercise is to teach the student about  the slicing operation in Python and how it applies to various data types.\\nLearning objectives\\n\\nwhat is a slice (a copy of a selected subsection).\\nunderstand slice syntax (e.g. [start : stop : step]), and how Python evaluates slices.\\nunderstand indexing from the left and the right, and how this applies to slicing.\\nunderstand which built-in data types & data structures can be sliced, and which cannot. (strings can, numbers cannot).\\nperform slice operations on strings.\\nperform a slice operations on sequence types (lists, sets, & tuples).\\ncopy an object via the \"full\" slice [:]\\nreverse an object order via the \"reverse slice\" [::-1]\\n\\nOut of scope\\n\\nslice assignment\\nslice() function, and how it differs from [ ] notation\\nslice objects\\nitertools.islice()\\n\\nConcepts\\n\\nslicing\\nindexing\\n\\nPrerequisites\\n\\nbasics\\niteration\\nlists\\nlist-methods\\nsets\\nstrings\\ntuples\\n\\nResources to refer to\\n\\nhttps://railsware.com/blog/python-for-machine-learning-indexing-and-slicing-for-lists-tuples-strings-and-other-sequential-types/\\n\\nHints\\n\\nTBD?\\n\\nAfter\\n\\nthe slice() function\\n\\nRepresenter\\nNo changes required.\\nAnalyzer\\nNo changes required.\\nImplementing\\nTests should be written using unittest.TestCase and the test file named slicing_test.py.\\nHelp\\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue.\\n      ",
        "issue_comment": "This issue describes how to implement the   concept exercise for the Python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n \n \n \n \n \n Goal The goal of this exercise is to teach the student about  the   operation in Python and how it applies to various data types. Learning objectives \n \n \n \n \n \n \n \n \n Out of scope \n \n \n \n \n Concepts \n \n \n Prerequisites \n \n \n \n \n \n \n \n Resources to refer to \n \n Hints \n \n After \n \n Representer No changes required. Analyzer No changes required. Implementing Tests should be written using unittest.TestCase and the test file named slicing_test.py. Help If you have any questions while implementing the exercise, please post the questions as comments in this issue. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "issue_serial": "/exercism/python/issues/2291",
        "issue_name": "[New Concept Exercise] : docstrings",
        "issue_label": "",
        "issue_content": "\n          This issue describes how to implement the docstrings concept exercise for the Python track.\nGetting started\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\n\nThe features of v3.\nRationale for v3.\nWhat are concept exercise and how they are structured?\n\nPlease also watch the following video:\n\nThe Anatomy of a Concept Exercise.\n\nGoal\nThis exercise should demonstrate and motivate the proper use of docstrings in Python, according to PEP 257.\nLearning objectives\n\nWhat is a docstring?\n__doc__ dunder / magic attribute\nStudent should implement a one-line docstring (e.g. for a function and/or method)\nStudent should implement a multi-line docstring, properly formatted\n\nIdeally, this exercise would have a pre-written module, which contains a class, which has several methods on it. The student should write the documentation for\n\nthe module\nthe class\nmethods within the class\n\nSince this is an automated exercise, there isn't a lot of room for discussion of the content of the docstrings, but we can check for its existence, formatting (a blank line between summary and paragraph, for example) and an approximate length that we feel is appropriate.\nOut of scope\n\nEnforcing a specific docstring convention for styling (i.e. reST vs google's style guide).\n\nThe examples should probably be in reST since it's fairly prevalent, but the formatting here is more related to a specific implementation of a documentation parser, not a generalized understanding of what docstrings are and how they should be used.\n\nreturn types\n\nMentioning that return types can/should be documented is a good idea, but not necessary for the scope of this exercise, since it can also be covered more thoroughly by a typing exercise or similar.\nConcepts\n\ndocstrings\n\nPrerequisites\n\ncomments\nfunctions\nmethods\nclasses\nmodules\n\nResources to refer to\nhttps://www.python.org/dev/peps/pep-0257/\nhttps://www.python.org/dev/peps/pep-0287/\nhttps://docs.python-guide.org/writing/documentation/#docstrings-and-magic\nhttps://docs.python-guide.org/writing/documentation/#sphinx\nHints\nThe following should be explicilty tested for:\n\na summary line\na blank line between the summary and the larger docstring\ndocstring should exist for the module, class, and methods\n\nAfter\nNow is a good time to think about introducing the student to the magic (and usefulness) of automated documentation generators, or exposing them to prevalent examples of them in the Python community.\nRepresenter\n?\nAnalyzer\n?\nImplementing\nTests should be written using unittest.TestCase, and the test file named docstrings_test.py.\nHelp\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue.\n      ",
        "issue_comment": "This issue describes how to implement the   concept exercise for the Python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n Please also watch the following video: \n \n Goal This exercise should demonstrate and motivate the proper use of docstrings in Python, according to  . Learning objectives \n \n \n \n \n Ideally, this exercise would have a pre-written module, which contains a class, which has several methods on it. The student should write the documentation for \n \n \n \n Since this is an automated exercise, there isn't a lot of room for discussion of the content of the docstrings, but we can check for its existence, formatting (a blank line between summary and paragraph, for example) and an approximate length that we feel is appropriate. Out of scope \n \n The examples should probably be in reST since it's fairly prevalent, but the formatting here is more related to a specific implementation of a documentation parser, not a generalized understanding of what docstrings are and how they should be used. \n \n Mentioning that return types can/should be documented is a good idea, but not necessary for the scope of this exercise, since it can also be covered more thoroughly by a   exercise or similar. Concepts \n \n Prerequisites \n \n \n \n \n \n Resources to refer to \n \n Hints The following should be explicilty tested for: \n \n \n \n After Now is a good time to think about introducing the student to the magic (and usefulness) of automated documentation generators, or exposing them to prevalent examples of them in the Python community. Representer ? Analyzer ? Implementing Tests should be written using  , and the test file named  . Help If you have any questions while implementing the exercise, please post the questions as comments in this issue. We've added basic doctstrings to the   exercise (see issue   and related PR).  Propose we change this into a concept exercise around docstring and doctest best practices, and formatting for documentation generator tools such as Sphinx.     - thoughts? Propose we change this into a concept exercise around docstring and doctest best practices Agreed and formatting for documentation generator tools such as Sphinx. I think perhaps doctest and Sphinx are worth a mention in the after.md of such an exercise. Putting this on hold until we can get the issue updated with new specs. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. I don't like you  .  Not even a little."
      },
      {
        "issue_serial": "/exercism/python/issues/2292",
        "issue_name": "[New Concept Exercise] : generator-expressions",
        "issue_label": "claimed new exercise x:size/largex:status/claimed",
        "issue_content": "\n          This issue describes how to implement the generator-expressions concept exercise for the Python track.\nGetting started\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\n\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\nWhat are those Weird Task Tags about?\nBuilding Language Tracks: An Overview\nWhat are Concepts?\nConcept Exercise Specifications\nConcept Specifications\nExercism Formatting and Style Guide\nExercism Markdown Specification\nReputation\n\nGoal\nThe goal of this exercise is to teach the syntax and variants of generator expressions in Python.\nLearning objectives\n\nUnderstand how a generator expression relates to both  a list comprehension and a generator\nUnderstand where generator expressions can and cannot be utilized\nCreate a generator expression\nUse a generator expression as an argument to a function such as ''.join() or sum()\nUse a generator expression as an element of a comprehension\n\nOut of scope\n\nMemory and performance characteristics and optimizations\nGenerator methods such as throw() and close()\nUsing the assignment expression (walrus operator) with a generator expression\n\nConcepts\n\ngenerator expressions\n\nPrerequisites\n\nbasics\nconditionals\ncomparisons\nloops\ngenerators\niterators\niteration\nlist-comprehensions\nother-comprehensions\n\nResources to refer to\n\nGenerator expressions and list comprehensions (Python official docs)\nGenerators (Python official docs)\nList Comprehensions (Python official docs)\nGenerator Expressions in Python (Dan Bader)\n\nHints\n\nGenerator Expressions section of the Python docs tutorial:  Generator expressions and list comprehensions (Python official docs)\nGenerator Expressions in Python (Dan Bader)\n\nAfter\n\nAdditional Generator-iterator methods, such as generator.send() and generator.throw()\ngenerator expressions\nAsynchronous generator functions\ngenerators used as coroutines\n\nRepresenter\nNo changes required.\nAnalyzer\nNo changes rquired.\nImplementing\n\nTests should be written using unittest.TestCase, and the test file named list_comprehensions_test.py.\nHow to Implement a Concept Exercise in Python\nmake-concept-exercise Utility\n\nHelp\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue.\n      ",
        "issue_comment": "This issue describes how to implement the   concept exercise for the Python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n \n \n \n \n \n Goal The goal of this exercise is to teach the syntax and variants of   in Python. Learning objectives \n \n \n \n \n \n Out of scope \n \n \n \n Concepts \n \n Prerequisites \n \n \n \n \n \n \n \n \n \n Resources to refer to \n \n \n \n \n Hints \n \n \n After \n \n \n \n \n Representer No changes required. Analyzer No changes rquired. Implementing \n \n \n \n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "issue_serial": "/exercism/python/issues/2293",
        "issue_name": "[New Concept Exercise] : generators",
        "issue_label": "claimed x:action/createx:knowledge/advancedx:module/concept-exercisex:size/largex:status/claimed",
        "issue_content": "\\n          This issue describes how to implement the generators concept exercise for the Python track.\\nGetting started\\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\\n\\nThe features of v3.\\nRationale for v3.\\nWhat are concept exercise and how they are structured?\\nPython Track concept exercise implementation guide.\\n\\nPlease also watch the following video:\\n\\nThe Anatomy of a Concept Exercise.\\n\\nGoal\\nThe goal of this exercise is to teach the syntax and use of generators in Python.\\nLearning objectives\\n\\nUnderstand what generators are and how/when to use them\\nUnderstand how generators relate to loops and iterators\\nUnderstand how to use the yield keyword\\nUnderstand the __next__() method\\nCreate a generator\\n\\nOut of scope\\n\\nMemory and performance characteristics and optimizations\\nthrow(type, value=None, traceback=None)\\nclose()\\ngenerator expressions\\nyield from\\ngenerators used as coroutines\\n\\nConcepts covered\\n\\ngenerators\\nyield\\n__next__()\\niterators\\n\\nPrerequisites\\n\\nconditionals\\ndicts\\nfunctions\\nhigher-order-functions\\nlists\\nloops\\niteration\\niterators\\nsequences\\n\\nResources to refer to\\n\\nGenerators (Python official docs)\\ngenerator (Python official docs glossary)\\nThe yield statement (Python official docs)\\nYield expressions (Python official docs)\\nIterators(Python official docs)\\nGenerator-iterator methods (Python official docs)\\nHow to Use Generators and yield in Python (Real Python)\\n\\nHints\\n\\nReferring to one or more of the resources linked above, or analogous resources from a trusted source.\\nGenerators section of the Python Docs Functional How to tutorial:  Generators\\n\\nConcept Description\\n(a variant of this can be used for the v3/languages/python/concepts/<concept>/about.md doc and this exercises  introduction.md doc.)\\nConcept Description Needs to Be Filled In Here/Written\\nSome \"extras\" that we might want to include as notes in the concept description, or as links in links.json:\\n\\nAdditional Generator-iterator methods, such as generator.send() and generator.throw()\\ngenerator expressions\\nAsynchronous generator functions\\ngenerators used as coroutines\\n\\nRepresenter\\nNo changes required.\\nAnalyzer\\nNo changes rquired.\\nImplementing\\nThe general Python track concept exercise implantation guide can be found here.\\nTests should be written using unittest.TestCase and the test file named generators_test.py.\\nCode in the .meta/example.py file should only use syntax & concepts introduced in this exercise or one of its prerequisites. Please do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow PEP8 guidelines.\\nHelp\\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.\\n      ",
        "issue_comment": "This issue describes how to implement the   concept exercise for the Python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n Please also watch the following video: \n \n Goal The goal of this exercise is to teach the syntax and use of   in Python. Learning objectives \n \n \n \n \n \n Out of scope \n \n \n \n \n \n \n Concepts covered \n \n \n \n \n Prerequisites \n \n \n \n \n \n \n \n \n \n Resources to refer to \n \n \n \n \n \n \n \n Hints \n \n \n Concept Description ( ) \n \n \n \n \n Representer No changes required. Analyzer No changes rquired. Implementing The general Python track concept exercise implantation guide can be found  . Tests should be written using   and the test file named  . Code in the   file should   Please do not use comprehensions, generator expressions, or other syntax not previously covered.  Please also follow   guidelines. Help If you have any questions while implementing the exercise, please post the questions as comments in this issue, or contact one of the maintainers on our Slack channel.  is going to take this on.     Heya, I am going to work on this. My idea An airline needs your help with assigning seats for passengers, to do this they need   to make them a generator for that. First, clarification: \nA   uses the following format  , with each   being a number from 1 through 9, AKA the  . And the   is the seat in each row, it uses  . It is important to note that a lot of airlines (we'll be using   in the exercise) do not use row 13 because of the superstition surrounding it. The exercise consists (prone to change) out of these functions/generators: \n \n \n I think these should cover most of  , but I am still stuck on how to implement   and   into the exercise itself. Yeah sorry I realize I never got to this. My personal life sorta blew up right after I started contributing. No worries  !  We're happy you are back, and hopefully everything is going well for you. \nIf you'd like, I think   might be open to collaboration?   Just check in with him. But there are also other issues ( ) you can take on as well (if you'd like) -- just let us know!   \nFor the most part it has all been good stuff: new baby, new job, new house. New baby especially has trimmed all my free time  \nI'd love to come back and contribute at some point, but still might be a while yet.   -- WOW     That is a LOT of new!      ...and just give a shout when you want to ease back into contributing.   Wowie, congratulations on the kid! I wish you good night's rest!   Enjoy every moment, and we'll see you around! Thank you both!"
      },
      {
        "issue_serial": "/exercism/python/issues/2294",
        "issue_name": "[New Concept Exercise] : other-comprehensions",
        "issue_label": "claimed new exercise x:size/largex:status/claimed",
        "issue_content": "\n          This issue describes how to implement the other-comprehensions concept exercise for the Python track.\nGetting started\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\n\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\nWhat are those Weird Task Tags about?\nBuilding Language Tracks: An Overview\nWhat are Concepts?\nConcept Exercise Specifications\nConcept Specifications\nExercism Formatting and Style Guide\nExercism Markdown Specification\nReputation\n\nGoal\nThe goal of this exercise is to teach the syntax and variants of set comprehensions and dict comprehensions in Python.\nLearning objectives\n\nUnderstand how set and dict  comprehensions relate to their underlying data structures and the loop + append method of creating/computing them.\nCreate a dict comprehension from a loop + append\nCreate a set comprehension from a loop + append\nCreate a dict comprehension from Lists,  Sets,  Tuples, or other iterables (such as zip() or dict.items())\nCreate a set comprehension from Lists,  Sets,  Tuples, or other iterables (such as zip() or dict.items())\nUse one or more conditions/operators/methods to filter comprehension inputs\nUse methods or logic to format the elements (output members) of the comprehension\nCreate a nested comprehension  (of either flavor)\nCreate a nested comprehension (of either flavor) with one or more formatting or filtering conditions\n\nOut of scope\n\nMemory and performance characteristics and optimizations\ngenerators and generator expressions in other comprehensions\nusing the data structures in collections in combination with, or as part of a set or dict comprehension.\nUsing the assignment expression (walrus operator) with either flavor of comprehension.\n\nConcepts\n\ndict-comprehensions\nset-comprehensions\ncomprehension syntax\n\nPrerequisites\n\nbasics\nbools\nconditionals\ncomparisons\nloops\niteration\n\nResources to refer to\n\nList Comprehensions (Python official docs)\nNested List Comprehensions (Python official docs)\nComprehending Python's Comprehensions (Dan Bader)\nList and Dict Comprehensions in Python (Timothy Bramlett)\n\nHints\n\nList Comprehensions section of the Python docs tutorial:  List Comprehensions\nThis animated GIF from Trey Hunner:  List Comprehensions: The Movie\n\nAfter\n\ncomprehension syntax for other data structures such as sets and dictionaries\ngenerators and generator expressions\ngenerators and generator expressions in list comprehensions\n\nRepresenter\nNo changes required.\nAnalyzer\nNo changes rquired.\nImplementing\n\nTests should be written using unittest.TestCase, and the test file named list_comprehensions_test.py.\nHow to Implement a Concept Exercise in Python\nmake-concept-exercise Utility\n\nHelp\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue.\n      ",
        "issue_comment": "This issue describes how to implement the   concept exercise for the Python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n \n \n \n \n \n Goal The goal of this exercise is to teach the syntax and variants of   and   in Python. Learning objectives \n \n \n \n \n \n \n \n \n \n Out of scope \n \n \n \n \n Concepts \n \n \n \n Prerequisites \n \n \n \n \n \n \n Resources to refer to \n \n \n \n \n Hints \n \n \n After \n \n \n \n Representer No changes required. Analyzer No changes rquired. Implementing \n \n \n \n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "issue_serial": "/exercism/python/issues/2295",
        "issue_name": "[New Concept Exercise] : list-comprehensions",
        "issue_label": "claimed new exercise x:size/largex:status/claimed",
        "issue_content": "\n          This issue describes how to implement the list-comprehensions concept exercise for the Python track.\nGetting started\nPlease please please read the docs before starting. Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents:\n\nContributing to Exercism | Exercism and GitHub | Contributor Pull Request Guide\nWhat are those Weird Task Tags about?\nBuilding Language Tracks: An Overview\nWhat are Concepts?\nConcept Exercise Specifications\nConcept Specifications\nExercism Formatting and Style Guide\nExercism Markdown Specification\nReputation\n\nGoal\nThe goal of this exercise is to teach the syntax and variants of list comprehensions in Python.\nLearning objectives\n\nUnderstand how a list comprehension relates to the loop + append method of creating/computing a List.\nCreate a list comprehension from a loop + append\nCreate a list comprehension from a string,  List, or other iterable (such as zip() or dict.items())\nUse one or more conditions/operators/methods to filter comprehension inputs\nUse methods or logic to format the elements (output members) of the comprehension\nCreate a nested comprehension\nCreate a nested comprehension with one or more formatting or filtering conditions\n\nOut of scope\n\nMemory and performance characteristics and optimizations\ngenerators and generator expressions in list comprehensions\nHow map() and filter() relate to or differ from list comprehensions\nUsing the assignment expression (walrus operator) with a list comprehension\n\nConcepts\n\nlist-comprehensions\n\nPrerequisites\n\nbasics\nbools\ncomparisons\nconditionals\nlists\nlist-methods\nloops\niteration\nsequences\n\nResources to refer to\n\nList Comprehensions (Python official docs)\nNested List Comprehensions (Python official docs)\nWhen to Use a List Comprehension in Python (Real Python)\nPython List Comprehensions:  Explained Visually (Trey Hunner)\n\nHints\n\nList Comprehensions section of the Python docs tutorial:  List Comprehensions\nThis animated GIF from Trey Hunner:  List Comprehensions: The Movie\n\nAfter\n\ncomprehension syntax for other data structures such as sets and dictionaries\ngenerators and generator expressions\ngenerators and generator expressions in list comprehensions\n\nRepresenter\nNo changes required.\nAnalyzer\nNo changes rquired.\nImplementing\n\nTests should be written using unittest.TestCase, and the test file named list_comprehensions_test.py.\nHow to Implement a Concept Exercise in Python\nmake-concept-exercise Utility\n\nHelp\nIf you have any questions while implementing the exercise, please post the questions as comments in this issue.\n      ",
        "issue_comment": "This issue describes how to implement the   concept exercise for the Python track. Getting started  Posting PRs without reading these docs will be a lot more frustrating for you during the review cycle, and exhaust Exercism's maintainers' time. So, before diving into the implementation, please read up on the following documents: \n \n \n \n \n \n \n \n \n \n Goal The goal of this exercise is to teach the syntax and variants of   in Python. Learning objectives \n \n \n \n \n \n \n \n Out of scope \n \n \n \n \n Concepts \n \n Prerequisites \n \n \n \n \n \n \n \n \n \n Resources to refer to \n \n \n \n \n Hints \n \n \n After \n \n \n \n Representer No changes required. Analyzer No changes rquired. Implementing \n \n \n \n Help If you have any questions while implementing the exercise, please post the questions as comments in this issue. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. Is this actually claimed? :) If not, I'd like to work on it. By the way, can we steal   for this? Elixir's list comprehensions are very similar. Hi  !  Welcome to the Python track.  üëãüèΩ \nThis is indeed already claimed by me, and is in progress.  Thanks for checking tho!"
      },
      {
        "issue_serial": "/exercism/python/issues/2105",
        "issue_name": "[V2] Hangman exercise instructions are misleading.",
        "issue_label": "discussion please review  ",
        "issue_content": "\n          I just completed the Hangman exercise on the Python track. I see from #1690 that you had problems deciding what to do with this exercise. The problem is from a user perspective it looks like the problem specification and the hints are all written by the same person and should be taken together. So the hint:\n\nPlease ignore the part regarding FRP library, a third party library is not required for this exercise.\n\nlooks like its telling me that Python has inbuilt support for FRP, which it does not. It looks like I should still use FRP but that I don't need a third party library to do it.\nAfter reading the description, I spent a long time reading up on FRP assuming that I was supposed to use it. To be honest, FRP still confuses me, but as far as I can tell, there are Reactive Programming libraries for Python, but not Functional Reactive Programming libraries (Reactive Extensions is not FRP). To implement FRP in Python wouldn't seem to make much sense: you'd have to make everything immutable and you'd be fighting the language all the time. The fact that the exercise was made for OCaml is quite telling, I think. It is a very niche problem.\nI understand from the discussion that the problem statement cannot be changed. In that case, I think a clearer hint would be:\n\nPLEASE DISREGARD THE PROBLEM DESCRIPTION. IT IS NOT POSSIBLE TO USE FUNCTIONAL REACTIVE PROGRAMMING (FRP) WITH PYTHON. YOU CAN USE ANY STYLE/PARADIGM YOU THINK IS APPROPRIATE. WE ARE NOT ABLE TO CHANGE THE PROBLEM DESCRIPTION AND IT WAS ORIGINALLY MADE FOR A FUNCTIONAL PROGRAMMING LANGUAGE.\n\nalthough this is not a perfect fix. It should be in caps because as far as the student is concerned, the problem statement and the hints should be read together as one complete whole, but here the hints are directly contradicting the problem statement.\nIdeally the original problem should be changed to avoid requiring a specific paradigm. I have had similar problems in the Javascript track..\nAnyway, let me know your thoughts and if I should update something (I haven't contributed here before so I'm not sure of the procedure).\n      ",
        "issue_comment": "I just completed the Hangman exercise on the Python track. I see from   that you had problems deciding what to do with this exercise. The problem is from a user perspective it looks like the problem specification and the hints are all written by the same person and should be taken together. So the hint: Please ignore the part regarding FRP library, a third party library is not required for this exercise. looks like its telling me that Python has inbuilt support for FRP, which it does not. It looks like   but that I don't need a third party library to do it. After reading the description, I spent a long time reading up on FRP assuming that I was supposed to use it. To be honest, FRP still confuses me, but as far as I can tell, there are Reactive Programming libraries for Python, but not Functional Reactive Programming libraries  . To implement FRP in Python wouldn't seem to make much sense: you'd have to make everything immutable and you'd be fighting the language all the time.  , I think. It is a very niche problem. I understand from the discussion that the problem statement cannot be changed. In that case, I think a clearer hint would be: PLEASE DISREGARD THE PROBLEM DESCRIPTION. IT IS NOT POSSIBLE TO USE FUNCTIONAL REACTIVE PROGRAMMING (FRP) WITH PYTHON. YOU CAN USE ANY STYLE/PARADIGM YOU THINK IS APPROPRIATE. WE ARE NOT ABLE TO CHANGE THE PROBLEM DESCRIPTION AND IT WAS ORIGINALLY MADE FOR A FUNCTIONAL PROGRAMMING LANGUAGE. although this is not a perfect fix. It should be in caps because as far as the student is concerned, the problem statement and the hints should be read together as one complete whole, but here the hints are   the problem statement. Ideally the original problem should be changed to avoid requiring a specific paradigm. I have had similar problems in the  . Anyway, let me know your thoughts and if I should update something (I haven't contributed here before so I'm not sure of the procedure). Personally I'd remove   from the Python track entirely; there's no canonical-data.json, the canonical description.md is fundamentally aimed at languages in an entirely different programming paradigm, and the tests and solution we've created don't attempt to address FRP as it   be done in Python ... moreover   addressing FRP there's really no obvious pedagogic value to the exercise that isn't addressed better in other exercises. I remember implementing this \"as-is\" exercise was a struggle. Perhaps removing it would be best; I'm going to mark it in my notes for review when we begin the transition for v3. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "issue_serial": "/exercism/python/issues/1976",
        "issue_name": "[V2] react: add test template",
        "issue_label": "discussion please review  ",
        "issue_content": "\n          Task\nCreate a test template file for react\nDetails\n\nIf this is your first time contributing to this repository, welcome!\n\nContributing to a repository on GitHub requires a fork\n\n\nCreate a branch on your local repository called react-add-test-template\n\nRun: git checkout -b react-add-test-template\n\n\nClone problem-specifications repository; this is used to populate the template\n\nRun: git clone https://github.com/exercism/problem-specifications ../problem-specifications\n\n\nCreate exercises/react/.meta/template.j2\n\nSee Generator Documentation for more information\n\n\nGenerate test file from new template\n\nRun: bin/generate_tests.py react\n\n\n\nAt this point, if the generator fails, or you are otherwise stuck,\nplease feel free to reach out! It is perfectly acceptable to submit\nan incomplete PR in order to get feedback or assistance.\nResources\n\nContributing Guide\nGenerator Documentation\nClosing issues using keywords\n\n      ",
        "issue_comment": "Task Create a test template file for  Details \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n At this point, if the generator fails, or you are otherwise stuck, \nplease feel free to reach out! It is perfectly acceptable to submit \nan incomplete PR in order to get feedback or assistance. Resources \n \n \n \n Hey, I would like to try this issue too :D  have fun with it, we welcome a PR."
      },
      {
        "issue_serial": "/exercism/python/issues/1780",
        "issue_name": "[Error-Handling]: instructions are unclear, and wrong programs pass the tests",
        "issue_label": "bug ",
        "issue_content": "\\n          I just did the error-handling exercise, and had several issues:\\n\\nIt was unclear at first what to do with inputs. Looking at the tests, it seemed that trying to convert the input to int was the right thing to try, but this is not mentioned in the readme or the stubs.\\nThe test for whether a method throws an exception will pass any error that might occur, not just if it's intentionally raised:\\n\\ndef handle_error_by_throwing_exception():\\n    raise \"(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª\"  # Raising a string is a TypeError, but passes the test\\n\\nWhen returning a tuple, which element should be the result and which one the status? What should the result element be when it fails? No suggestion\\nNo mention of advantages or disadvantages of the different kinds of error handling, or what is idiomatic Python.\\n\\n      ",
        "issue_comment": "I just did the error-handling exercise, and had several issues: \\n \\n \\n \\n \\n \\n The problem with the test example is that the   methods delete the traceback of the exception before they return them. The closest this could probably get would be: However, that is limited to checking whether the exception class name is referenced somewhere in the entire function, and not just the statement that actually raised it. The entire   exercise is a bit problematic in its current implementation. It will likely be replaced with a proper Concept Exercise in v3. Yeah, this exercise needs a complete rethink. My best thought is that the dummy file include something like this: The test file can then import the UnhappyError and generate mocks that will raise it as a side_effect in appropriate circumstances. Then we'd just need tests to validate that everything worked when no error was raised as well as when an UnhappyError was raised ... we can probably relax our usual habit of ignoring what's actually in an error message and simply write the exercise so the student MUST pass-through the message the tests put into the UnhappyError verbatim when converting to a new error type. If you are going to go that far, don't forget to include having to use the three types of   statements. Also, you can monkey patch whatever you want using   so the exception can be generated without having to pass in a specific function to be called. Thinking about this, it could almost be step 2 of another exercise. For example, a tour of the built-in functions or types. In the example, step one is doing the conversions and calls with normal input (e.g. turn \"123\" into 123 or bool(None) == False), and this step two is the same but with bad calls or raised exceptions (int(\"football\") or set(123) raises an exception) to teach people how to handle them before things get too complicated. I'm not married to the idea of the built-ins, but it shows the general concept of extending a previous exercise. I noticed this yesterday! I understand that the v3 version of the track will have a new version of this exercise, but could we fix this in the interim with more descriptive hints? As it stands the student is left without a real direction to move to pass the tests, without just trying stuff out. If the intent is to show how to use   and  , could we give them hints as to what we want in each function? Edit - Glad to submit a PR if that makes sense for a short term fix.   -- Thanks so much for volunteering to help clarify this exercise!  Since we are close to launching a beta of V3 (within the next two months), and it looks like this exercise needs a complete re-work, we've decided to mark it as   ( ) until we can get both the V3 error-handling concept exercises completed and the re-write of this exercise completed. We would   if you'd like to help with either the V3 concept exercises or a re-write of this practice exercise...we just don't want you to do a bunch of \"short-term fix\" work that won't get used.  If you would like to take on either the V3 exercises or a re-write of this one, please reach out and let us know.  Thanks again. Thanks  ! I'll definitely join in on v3. I'm behind the curve on developments there, but I'm glad to help.  do we want to close this issue (and mark as resolved by  ), or leave it open as a reminder to address this exercise after requisite Concept Exercises are complete?   -- I think this would be good to leave open as a reminder.  Otherwise, it might get lost in the shuffle. Ultimately, we want to log both the error-handling concept exercise issues and a re-write of   practice exercise as its own issue, but I don't have time atm to do so -- so I think the best bet is to leave this pending. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "issue_serial": "/exercism/python/issues/1497",
        "issue_name": "[V2] zipper: several small issues in the tests",
        "issue_label": "discussion please review  ",
        "issue_content": "\n          I have several things I think are not correct on this exercise.\nFirst, a small detail, I think there is a bug in the example set_value method (it mutates the object). I don't know if there are other (similar) bugs, I'll test that latter.\nSecondly, and most importantly, one of the tests forces the student to do something odd. This is a bit long to explain and I'm not sure I can be really clear on the subject, but here it is:\nI think this test (generated from this) is conceptually incorrect:\ndef test_dead_end(self):\n        t1, _, _, _ = self.create_trees()\n        zipper = Zipper.from_tree(t1)\n        self.assertIsNone(zipper.left().left())\nThe tree t1 is the following:\n     1\n    / \\\n   2   4\n    \\\n     3\n\nWhile there is indeed no node at location .left().left(), this is still a valid location for a cursor to be at. From this position we could insert a node. And that's sounds like the best way to insert a leaf in a tree as otherwise (if this was returning None as expected in the test) you would have to have two distincts leaf insertion methods insert_left and insert_right. I find it more satisfying to have the following working:\nz = Zipper()\nz = z.insert(1).right().insert(4).up().left().insert(2).left().insert(3)\nThis requires having the ability to navigate to non-yet-existing leafs (What?). In that case, the zipper simply contains None as the current tree but still has a context attached to it (and therefore, the zipper is not None, it has a context).\nI know that the current tests do not include an insert method, but changing this test would allow to add (leaf) insertions in the goals of the exercise (especially because it would help having a clearer test set).\nWhy? By adding an insert method, we allow tests to rely only on the capabilities of the Zipper class only, which mean we could totally get rid of the from_tree/to_tree logic (together with the set_left/set_right in the current form). I think It would be nice because the tests would look more natural, which would help students understand zippers. Having to read an input graph (nested dictionaries), to then turn it to a zipper, and finally give it back in the form of a graph (same for as the input) doesn't really help understanding the zipper purpose as this may look totally un-efficient (and it is).\nWhat could be interesting to have as first tests is the immutability of the zipper objects, for example (note that I would like to have all tests using this construction for trees instead of the current zipper_test.py:bt method):\ndef test_immutability_move_insert(self):\n    z = Zipper().insert(1).right().insert(4).up().left().insert(2).left().insert(3).left()\n    z_2 = z.insert(5)\n    z_3 = z.insert(7)\n    self.assertIs((z.focus is None), True)\n    self.assertEqual(z.up().value(), 3)\n    self.assertNotEqual(z_2.value(), z_3.value())\n\ndef test_immutability_set_value(self):\n    z = Zipper().insert(1).right().insert(4).up().left().insert(2).left().insert(3)\n    z_2 = z.set_value(5)\n    self.assertEqual(z.value(), 3)\n    self.assertEqual(z_2.value(), 5)\nAnyway, let me know what you think about this, if you think I'm not drunk and/or crazy I can suggest a new version of the tests.\n      ",
        "issue_comment": "I have several things I think are not correct on this exercise. , a small detail, I think there is a bug in the   (it mutates the object). I don't know if there are other (similar) bugs, I'll test that latter. , and most importantly, one of the tests forces the student to do something odd. This is a bit long to explain and I'm not sure I can be really clear on the subject, but here it is: I think   (generated from  ) is conceptually incorrect: The tree   is the following: While there is indeed no node at location  , this is still a valid location for a cursor to be at. From this position we could insert a node. And that's sounds like the best way to insert a leaf in a tree as otherwise (if this was returning   as expected in the test) you would have to have two distincts leaf insertion methods   and  . I find it more satisfying to have the following working: This requires having the ability to navigate to non-yet-existing leafs (What?). In that case, the zipper simply contains   as the current tree but still has a context attached to it (and therefore, the zipper is not  , it has a context). I know that the current tests do not include an   method, but changing this test would allow to add (leaf) insertions in the goals of the exercise (especially because it would help having a clearer test set).  By adding an   method, we allow tests to rely only on the capabilities of the   class only, which mean we could totally get rid of the  /  logic (together with the  /  in the current form). I think It would be nice because the tests would look more natural, which would help students understand zippers. Having to read an input graph (nested dictionaries), to then turn it to a zipper, and finally give it back in the form of a graph (same for as the input) doesn't really help understanding the zipper purpose as this may look totally un-efficient (and it is). What could be interesting to have as first tests is the immutability of the zipper objects, for example (note that I would like to have all tests using this construction for trees instead of  ): Anyway, let me know what you think about this, if you think I'm not drunk and/or crazy I can suggest a new version of the tests. Thanks for all the thought you've put into this! First, a small detail, I think there is a bug in the example set_value method (it mutates the object). I don't know if there are other (similar) bugs, I'll test that latter. I wouldn't be surprised. Since the tests don't verify that the object is not mutates after a value change, and a mutating implementation is much simple to create, this is probably the case. I really like the idea of adding an insert method, because it changes the structure of a zipper object (in the context of the exercise) from a read-only tree to a mutable one, which is far more practical. Anyway, let me know what you think about this, if you think I'm not drunk and/or crazy I can suggest a new version of the tests. I (almost) always suggest this when a contributor suggests test changes/fixes here, whether I like the change or not, because 1) all test changes should go through   first, and 2) doing so gives maintainers from other tracks a chance to comment or suggest tweaks to the proposed changes. So by all means, please submit a PR over  !  I (almost) always suggest this when a contributor suggests test changes/fixes here, whether I like the change or not, because 1) all test changes should go through problem-specifications first, and 2) doing so gives maintainers from other tracks a chance to comment or suggest tweaks to the proposed changes. So by all means, please submit a PR over there!  I'll do that then. How do you usually proceed when writing updating a problem specification. Do you first write all tests in a specific language then try to generalise it as much as possible to fit the \"problem specification\"'s specification? Or do you proceed the other way around and start with the abstract description first? Generally, starting with the abstract is easier. If working exclusively in the abstract becomes confusing (happens with complex tests), I suggest working in a familiar language (since you're here, I'd suggest Python)   with the abstract. There is one thing that I can't find about the  problem-specifications format, is how to add things like   and  ? (In the .json I have from the older version I can see an \"operations\" list, which contains \"operation\", but that doesn't allow for such precision). Is   just an example? What are you actually trying to do? The best thing would be to just pick a format that seems to match the existing data as closely as you can, and create a PR. Once there is something there, the active maintainers in problem-specifications will chime in to help settle on a universally acceptable format for what you are trying to achieve. It's an example yes, what I want is to be able to say: vs. Take a look at   and see if that clarifies anything for you. If not, just pick a format that makes sense to you. The problem-specifications maintainers will help smooth it out. I have submitted a PR for the specification, should I wait for submitting the python version?  Standard procedure would be to leave this PR as-is (unmerged, open) until the spec PR has been merged. Then, this PR may be updated (or, if very extensive changes are required, replaced) accordingly and merged. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. Added   label as this issue is pending on  This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions."
      },
      {
        "issue_serial": "/exercism/python/issues/1120",
        "issue_name": "Should we adapt test cases to be more generator-friendly?",
        "issue_label": "",
        "issue_content": "\n          RE: comments from @AtelesPaniscus in #1117:\n\nI have one remark of general pertinence to the Python track.  The construction of test suites favours (usually requires) solutions that use lists and discourages those that use some other iterable (e.g. generators and generator expressions).  I assume this is not deliberate.  In the revised readme for this exercise I saw no mention of lists.  So why should an iterable that, when evaluated, yields all the right substrings in the right order be a fail and not a pass ?\n\n\nThe issue, to me, is about the students learning experience.  I've plenty of practice now with list comprehensions and I'd like to practice generators and explore how this interesting alternative affects how I think about problems.\n\n\nOK, I can (and do) make the effort and my solutions have a couple of extra lines of code compared with others.  I don't think many others will.  Some students' work shows them to be sufficiently unsure of themselves that I expect they will take the track not accepting iterables as suggesting generators are bad.  Most students seem to believe that any line of code may contains a bug so best the way to avoid bugs is to write fewer, not more, lines of code.\n\n\nI don't think this series exercise is well suited to generators (anagram is) but here is an example:\n\ndef slices(series, length):\n    if len(series) < length or length < 1:\n        raise ValueError\n\n    def slice_generator(series):\n        while len(series) >= length:\n            yield [int(x) for x in list(series[:length])]\n            series = series[1:]\n                                                                                                                                                                                                                                             \n    return list(slice_generator(series))\n\nGenerators* are a core Python concept, and it may be worthwhile to allow users to supply them for solutions in some cases.\n*Edit: originally used the term 'Iterators', but intended 'Generators'\n      ",
        "issue_comment": "RE: comments from   in  : I have one remark of general pertinence to the Python track.  The construction of test suites favours (usually requires) solutions that use lists and discourages those that use some other iterable (e.g. generators and generator expressions).  I assume this is not deliberate.  In the revised readme for this exercise I saw no mention of lists.  So why should an iterable that, when evaluated, yields all the right substrings in the right order be a fail and not a pass ? The issue, to me, is about the students learning experience.  I've plenty of practice now with list comprehensions and I'd like to practice generators and explore how this interesting alternative affects how I think about problems. OK, I can (and do) make the effort and my solutions have a couple of extra lines of code compared with others.  I don't think many others will.  Some students' work shows them to be sufficiently unsure of themselves that I expect they will take the track not accepting iterables as suggesting generators are bad.  Most students seem to believe that any line of code may contains a bug so best the way to avoid bugs is to write fewer, not more, lines of code. I don't think this   exercise is well suited to generators (  is) but here is an example: Generators* are a core Python concept, and it may be worthwhile to allow users to supply them for solutions in some cases. *Edit: originally used the term 'Iterators', but intended 'Generators' I agree that iterators would be useful, and given that Python's type system is so flexible, I think it would be good to update at least some of the test-suites. However, I do think that there are some cases in which a  ,   or   are the most appropriate output type and thus should be expected by the tests. In theory this is trivial to implement in that it just requires that we add   to the actual function outputs where  - iterators are easy coerced into lists! In practice, this is probably a lot of manual work, requiring that each exercise be checked, the most appropriate types determined, and any necessary changes made. Of course, that doesn't mean that we shouldn't do it! A generator is an iterator, so I'm a bit confused reading these posts. I can understanding wanting more variety in the data types and forms of iterators. I may have created the pattern. I seem to remember trying to throw them into one or two solutions to try to get people exposed to them if they read the solutions in the repo. The hard thing is each form of an iterator has different strengths, and its difficult to communicate when each is appropriate in these exercises. I am sorry that remarks I made some six months ago are only now causing confusion.  My English is, I fear, not mainstream. Let me try again. I view iterators as lazy lists.  I am sure that is a simplification but have the impression that in Python (3) you can substitute one for the other without changing any code on or around call site.  Perhaps I am mistaken. I use list comprehensions enclosed in [].  I can change [] to () and I have a generator.  I view generators as lazy list comprehensions.  Again, I am sure that is a simplification but when I did the substitution on the Exercism Python track several perfectly good solutions no longer passed the tests. The point I tried to make before was that Exercism, inadvertently, was discouraging the use of generators in particular and perhaps iterators in general.  This seemed bad pedagogy to me.  Now I would go so far as to suggest that is also un-Pythonesque. I was not trying to suggest there should be exercises that require an iterator for a return value instead of a list, merely that exercises should accept an iterator as a return value as well as a list. I did look at the problem six months ago.  The test cases use   from unittest and this will say \"a list is a list, an iterator is an iterator, these are different types: ergo not equal\".  I think it is entirely appropriate that   takes this view.  Perhaps there is a good reason for Exercism to take the same view but \"that's the way `assertEqual' works\" is not it. The README may say a list but the READ is written a generic fashion so as to meaningful for many languages so taking list to mean Python list is pedantic and thus also  un-Pythonesque. I wasn't asking for folk to down tools and do a lot of manual checking.  I was expecting as a minimum an update to guidelines for contributors and perhaps a change to a code generator ready for the next maintenance fix. This problem only affects exercises that requires a list is returned.  That is probably more than I think but fewer than you expect.  Myself, I would have tried scripting it.  That might not be quick but is not as tedious and not as error prone as manual checks. I was not trying to suggest there should be exercises that require an iterator for a return value instead of a list, merely that exercises should accept an iterator as a return value as well as a list. This is how I understood your original comments, however I think that up until   's comment, we might have been using 'generator' and 'iterator' interchangeably; from this point forward, I will make greater efforts to use the appropriate term. I believe we could support generators by checking the type and deciding to unpack it. However I'm not sure how liberal we want to be. There are edge cases, but one possible solution is to use inspect.isgenerator to check if a generator has been passed. We also have to weigh if the added complexity to the test suite is worth it. Perhaps mention it as extra credit in one or two assignments to see if we get any reports against it. Perhaps mention it as extra credit in one or two assignments to see if we get any reports against it. I like it. Also, to repeat   : In theory this is trivial to implement in that it just requires that we add list() to the actual function outputs where - iterators are easy coerced into lists! It depends on how defensive you want to be. For example: Granted dictionaries are not ordered, but there is a point we need to decide we can't save them from themselves. Good counter example  Is there a super-type that covers all ordered, one-dimensional iterables? (probably too convenient to be true) I did some looking into ordered here: \\n I haven't gone through the full thread again due to time at the moment, but I remember it wasn't as simple as I wished it was. Just skimmed  : here's a summary of my thoughts. \\n \\n \\n \\n This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. This issue has been automatically marked as   because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions. Still Open, needs review."
      }
    ],
    "each_label_info": [
      {
        "label": "abandoned ",
        "introduction": "",
        "amount": "1"
      },
      {
        "label": "bug ",
        "introduction": "",
        "amount": "3"
      },
      {
        "label": "chore ",
        "introduction": "",
        "amount": ""
      },
      {
        "label": "claimed ",
        "introduction": "For new exercises being written by contributors and maintainers.",
        "amount": "12"
      },
      {
        "label": "dependencies",
        "introduction": "Pull requests that update a dependency file",
        "amount": ""
      },
      {
        "label": "discussion ",
        "introduction": "",
        "amount": "14"
      },
      {
        "label": "do not merge ",
        "introduction": "Don't merge until this label is removed.",
        "amount": "1"
      },
      {
        "label": "documentation ",
        "introduction": "",
        "amount": "1"
      },
      {
        "label": "duplicate",
        "introduction": "",
        "amount": ""
      },
      {
        "label": "enhancement  ",
        "introduction": "Changing current behaviour or enhancing/adding to what's already there.",
        "amount": ""
      },
      {
        "label": "experimental ",
        "introduction": "Speculative functionality or implementation.",
        "amount": ""
      },
      {
        "label": "first-timers only ",
        "introduction": "Issues reserved for first contributions.",
        "amount": ""
      },
      {
        "label": "github_actions",
        "introduction": "Pull requests that update Github_actions code",
        "amount": ""
      },
      {
        "label": "good first issue",
        "introduction": "Good issue for a new contributor to this project/repo.",
        "amount": ""
      },
      {
        "label": "good first patch",
        "introduction": "Good fix/patch for a new contributor to this project/repo.",
        "amount": ""
      },
      {
        "label": "hacktoberfest ",
        "introduction": "",
        "amount": ""
      },
      {
        "label": "hacktoberfest-accepted",
        "introduction": "Make this PR count for hacktoberfest",
        "amount": ""
      },
      {
        "label": "hacktoberfest-accepted ",
        "introduction": "",
        "amount": ""
      },
      {
        "label": "help wanted",
        "introduction": "We'd like your help with this.",
        "amount": "12"
      },
      {
        "label": "improve documentation ",
        "introduction": "specific improvements to documentation on the track, the exercises, or the repo.",
        "amount": ""
      },
      {
        "label": "improve exercise ",
        "introduction": "",
        "amount": "2"
      },
      {
        "label": "improve reference docs ",
        "introduction": "for issues with links, introductions, or about docs for concepts",
        "amount": ""
      },
      {
        "label": "improve test case ",
        "introduction": "improve test case(s) for an exercise",
        "amount": ""
      },
      {
        "label": "in-progress ",
        "introduction": "",
        "amount": ""
      },
      {
        "label": "invalid",
        "introduction": "",
        "amount": ""
      },
      {
        "label": "maintainer action required",
        "introduction": "A maintainer needs to take action on this.",
        "amount": "3"
      },
      {
        "label": "maintainer chore ",
        "introduction": "",
        "amount": "2"
      },
      {
        "label": "new documentation ",
        "introduction": "",
        "amount": "2"
      },
      {
        "label": "new exercise ",
        "introduction": "",
        "amount": "23"
      },
      {
        "label": "new reference doc ",
        "introduction": "",
        "amount": ""
      }
    ]
  },
  "pr": {
    "num_of_pr": 11,
    "num_of_branch": 9,
    "num_of_version": 0
  },
  "overview_of_scanner": {
    "quality_score": 98.67,
    "info_of_code_check": {
      "untreated vulnerability": {
        "num_of_total": 31,
        "num_of_deadly_level": 0,
        "num_of_error_level": 10,
        "num_of_warning_level": 21
      },
      "rate_of_code_repetition": "1.54%",
      "num_of_cyclomatic_complexity": 35
    },
    "info_of_code_scan": {
      "new_unprocessed": {
        "num_of_function": 9,
        "num_of_security": 1,
        "num_of_style": 21
      },
      "existing_unprocessed": {
        "num_of_function": 9,
        "num_of_security": 1,
        "num_of_style": 21
      }
    },
    "info_of_cyclomatic_complexity": {
      "num_of_exceed_standard": 4,
      "num_of_not_exceed_standard": 3111
    },
    "info_of_duplicated_code": {
      "num_of_very_high_risk": 7,
      "num_of_high_risk": 0,
      "num_of_medium_risk": 0,
      "num_of_low_risk": 0
    },
    "info_of_code_statistics": {
      "num_of_blank": 13569,
      "num_of_code": 52082,
      "num_of_annotation": 2368
    }
  }
}